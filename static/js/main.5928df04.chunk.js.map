{"version":3,"sources":["components/Map.tsx","components/StreetView.tsx","components/Flag.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultCoordinates","lat","lng","Map","coordinates","mapContainerStyle","height","center","zoom","StreetView","streetViewPanoramaOptions","position","pov","heading","pitch","visible","options","Flag","name","code","alt","width","src","Game","useState","index","setIndex","modalOpened","setModalOpened","current","data","levels","className","onClick","prev","countries","getName","city","country","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","COORDINATES","App","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","ReactDOM","render","basename"],"mappings":"6qPAMMA,EAAqB,CACzBC,IAAK,YACLC,IAAK,aAGQ,SAASC,EAAT,GAED,IAAD,IADXC,mBACW,MADGJ,EACH,EACX,OACE,cAAC,IAAD,CACEK,kBAAmB,CAAEC,OAAQ,QAC7BC,OAAQH,EACRI,KAAM,KCXZ,IAAMR,EAAqB,CACzBC,IAAK,YACLC,IAAK,aAGQ,SAASO,EAAT,GAED,IAAD,IADXL,mBACW,MADGJ,EACH,EACLU,EAAmE,CACvEC,SAAUP,EACVQ,IAAK,CAACC,QAAS,EAAGC,MAAO,GACzBN,KAAM,EACNO,SAAS,GAGX,OACE,cAAC,IAAD,CACEV,kBAAmB,CAAEC,OAAQ,QAC7BC,OAAQH,EACRI,KAAM,GAHR,SAKE,cAAC,IAAD,CAAoBQ,QAASN,MCvBpB,SAASO,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KACnC,OACE,qBACEC,IAAKF,EACLZ,OAAQ,GACRe,MAAO,GACPC,IAAG,qEAAgEH,EAAhE,UCFM,SAASI,IAAQ,IAAD,EACHC,mBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,OAESF,oBAAS,GAFlB,mBAEtBG,EAFsB,KAETC,EAFS,KAIvBC,EAAUC,EAAKC,OAAON,GAE5B,OACE,sBAAKO,UAAU,sBAAf,UACE,cAACvB,EAAD,CACEL,YAAayB,EAAQzB,cAGvB,sBAAK4B,UAAU,eAAf,UACE,wBAAQC,QAAS,kBAAML,GAAe,SAAAM,GAAI,OAAKA,MAA/C,SACE,cAACjB,EAAD,CACEC,KAAMiB,IAAUC,QAAQP,EAAQQ,KAAKC,QAAS,MAC9CnB,KAAMU,EAAQQ,KAAKC,YAKvB,wBAAQL,QAAS,kBAAMP,GAAS,SAAAQ,GAAI,OAAIA,EAAM,MAA9C,qBAKF,cAAC,IAAD,CACEK,OAAQZ,EACRa,eAAgB,kBAAMZ,GAAe,IACrCa,kBAAgB,EAChBC,2BAAyB,EAJ3B,SAME,qBAAKV,UAAU,OAAf,SACE,qBAAKA,UAAU,OAAf,SACE,cAAC7B,EAAD,CACEC,YAAayB,EAAQzB,sBA5BWqB,GCP9C,IAAMkB,EAAc,CAAE1C,KAAM,WAAYC,KAAM,YA6B/B0C,MA3Bf,WAAgB,IAAD,EACmBC,YAAe,CAC7CC,iBAAkBC,4CADZC,EADK,EACLA,SAIR,OALa,EACKC,UAIbD,EAKH,sBAAKhB,UAAU,MAAf,UACE,gCACE,cAAC,IAAD,CAAMkB,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,eAAT,yBACA,cAAC,IAAD,CAAMA,GAAG,OAAT,oBAEF,qBAAKlB,UAAU,OAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmB,KAAK,IAAIC,QAAS,cAAC7B,EAAD,MACzB,cAAC,IAAD,CAAO4B,KAAK,cAAcC,QAAS,cAAC3C,EAAD,CAAYL,YAAauC,MAC5D,cAAC,IAAD,CAAOQ,KAAK,MAAMC,QAAS,cAACjD,EAAD,CAAKC,YAAauC,cAd5C,MCHIU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCIdnB,IAAU2B,eAAeC,GAEzBC,IAAWC,cAAcC,SAASC,eAAe,oBAEjDC,IAASC,OACP,cAAC,IAAD,CAAYC,SAAS,gBAArB,SACE,cAAC,EAAD,MAEFJ,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.5928df04.chunk.js","sourcesContent":["import { GoogleMap } from '@react-google-maps/api';\n\ninterface MapProps {\n  coordinates?: { lat: number, lng: number }\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627\n}\n\nexport default function Map({\n  coordinates = defaultCoordinates,\n}: MapProps) {\n  return (\n    <GoogleMap\n      mapContainerStyle={{ height: '100%' }}\n      center={coordinates}\n      zoom={10}\n    />\n  )\n}\n","import { GoogleMap } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\n\ninterface MapProps {\n  coordinates?: { lat: number, lng: number }\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627\n}\n\nexport default function StreetView({\n  coordinates = defaultCoordinates,\n}: MapProps) {\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    position: coordinates,\n    pov: {heading: 0, pitch: 0},\n    zoom: 1,\n    visible: true,\n  };\n\n  return (\n    <GoogleMap\n      mapContainerStyle={{ height: '100%' }}\n      center={coordinates}\n      zoom={10}\n    >\n      <StreetViewPanorama options={streetViewPanoramaOptions} />\n    </GoogleMap>\n  )\n}\n","interface FlagProps {\n  name: string\n  code: string\n}\n\nexport default function Flag({ name, code }: FlagProps) {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}/>\n  )\n}","import { useState } from 'react';\nimport data from '../data.json';\nimport Map from './Map';\nimport StreetView from './StreetView';\nimport Flag from './Flag';\nimport countries from 'i18n-iso-countries';\nimport ReactModal from 'react-modal';\n\n\nexport default function Game() {\n  const [index, setIndex] = useState(0);\n  const [modalOpened, setModalOpened] = useState(false);\n\n  const current = data.levels[index];\n\n  return (\n    <div className=\"game-container full\" key={index}>\n      <StreetView\n        coordinates={current.coordinates}\n      />\n\n      <div className=\"country-flag\">\n        <button onClick={() => setModalOpened(prev => !prev)}>\n          <Flag\n            name={countries.getName(current.city.country, \"pt\")}\n            code={current.city.country}\n          />\n        </button>\n\n\n        <button onClick={() => setIndex(prev => prev +1)}>\n          Next\n        </button>\n      </div>\n\n      <ReactModal\n        isOpen={modalOpened}\n        onRequestClose={() => setModalOpened(false)}\n        shouldCloseOnEsc\n        shouldCloseOnOverlayClick\n      >\n        <div className=\"full\">\n          <div className=\"full\">\n            <Map\n              coordinates={current.coordinates}\n            />\n          </div>\n        </div>\n      </ReactModal>\n    </div>\n  );\n}","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport Game from './Game';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 }\n\nfunction App() {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY!,\n  })\n\n  if (!isLoaded) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <Link to=\"/\">Game</Link>\n        <Link to=\"/street-view\">Street View</Link>\n        <Link to=\"/map\">Map</Link>\n      </nav>\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from \"i18n-iso-countries/langs/pt.json\"\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(document.getElementById('modal-container')!);\n\nReactDOM.render(\n  <HashRouter basename=\"/tcc-learning\">\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}