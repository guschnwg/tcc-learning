{"version":3,"sources":["components/Flag.tsx","components/Map.tsx","components/Stopwatch.tsx","components/StreetView.tsx","components/Level.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Flag","name","code","alt","height","width","src","defaultCoordinates","lat","lng","fetcher","url","fetch","then","r","json","Data","position","data","useSWR","suspense","display_name","address","country","country_code","toUpperCase","Map","coordinates","useState","marker","setMarker","showInfoWindow","setShowInfoWindow","mapContainerStyle","center","zoom","onClick","e","latLng","toJSON","onCloseClick","Suspense","fallback","Stopwatch","useStopwatch","autoStart","seconds","minutes","hours","days","isRunning","start","pause","style","fontSize","time","Date","setSeconds","getSeconds","StreetView","streetViewPanoramaOptions","pov","heading","pitch","visible","enableCloseButton","options","Level","current","onNext","mapModalOpened","setMapModalOpened","tipsModalOpened","setTipsModalOpened","className","prev","countries","getName","city","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","history","map","sentence","Game","index","setIndex","levels","COORDINATES","App","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","to","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.feecb108.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React, { useState } from 'react';\nimport { GoogleMap, InfoWindow, Marker } from '@react-google-maps/api';\nimport useSWR from 'swr';\nimport Flag from './Flag';\n\ninterface Props {\n  coordinates?: { lat: number; lng: number };\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst Data = ({ position }: { position: google.maps.LatLngLiteral }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  return (\n    <div>\n      <span>hello {data.display_name}</span>\n      <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n    </div>\n  );\n};\n\nconst Map: React.FC<Props> = ({ coordinates = defaultCoordinates }) => {\n  const [marker, setMarker] = useState<google.maps.LatLngLiteral>();\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\n\n  return (\n    <GoogleMap\n      mapContainerStyle={{ height: '100%' }}\n      center={coordinates}\n      zoom={10}\n      onClick={(e) => {\n        if (e.latLng) {\n          setMarker(e.latLng.toJSON());\n        }\n      }}\n    >\n      {marker && (\n        <Marker position={marker} onClick={() => setShowInfoWindow(true)}>\n          {showInfoWindow && (\n            <InfoWindow onCloseClick={() => setShowInfoWindow(false)}>\n              <React.Suspense fallback={() => <span>Loading...</span>}>\n                <Data position={marker} />\n              </React.Suspense>\n            </InfoWindow>\n          )}\n        </Marker>\n      )}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst Stopwatch: React.FC = () => {\n  const { seconds, minutes, hours, days, isRunning, start, pause } = useStopwatch({ autoStart: true });\n\n  return (\n    <div>\n      <div style={{ fontSize: '100px' }}>\n        <span>{seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24}</span>\n      </div>\n      <p>{isRunning ? 'Running' : 'Not running'}</p>\n      <button onClick={start}>Start</button>\n      <button onClick={pause}>Pause</button>\n      <button\n        onClick={() => {\n          // Restarts to 5 minutes timer\n          const time = new Date();\n          time.setSeconds(time.getSeconds() + 300);\n        }}\n      >\n        Restart\n      </button>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\n\ninterface Props {\n  coordinates?: { lat: number; lng: number };\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetView: React.FC<Props> = ({ coordinates = defaultCoordinates }) => {\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n  };\n\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={10}>\n      <StreetViewPanorama options={streetViewPanoramaOptions} />\n    </GoogleMap>\n  );\n};\n\nexport default StreetView;\n","import countries from 'i18n-iso-countries';\nimport React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport data from '../data.json';\n\nimport Flag from './Flag';\nimport Map from './Map';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\n\ninterface Props {\n  current: typeof data.levels[number];\n  onNext: () => void;\n}\n\nconst Level: React.FC<Props> = ({ current, onNext }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [tipsModalOpened, setTipsModalOpened] = useState(false);\n\n  return (\n    <div className=\"game-container full\">\n      <StreetView coordinates={current.coordinates} />\n\n      <div className=\"country-flag\">\n        <button onClick={() => setMapModalOpened((prev) => !prev)}>\n          <Flag name={countries.getName(current.city.country, 'pt')} code={current.city.country} />\n        </button>\n\n        <button onClick={onNext}>Next</button>\n\n        <button onClick={() => setTipsModalOpened((prev) => !prev)}>Tips</button>\n\n        <Stopwatch />\n      </div>\n\n      <ReactModal\n        isOpen={mapModalOpened}\n        onRequestClose={() => setMapModalOpened(false)}\n        shouldCloseOnEsc\n        shouldCloseOnOverlayClick\n      >\n        <div className=\"full\">\n          <div className=\"full\">\n            <Map coordinates={current.coordinates} />\n          </div>\n        </div>\n      </ReactModal>\n\n      <ReactModal\n        isOpen={tipsModalOpened}\n        onRequestClose={() => setTipsModalOpened(false)}\n        shouldCloseOnEsc\n        shouldCloseOnOverlayClick\n      >\n        <div className=\"full\">\n          <ul>\n            {current.history.map((sentence) => (\n              <li key={sentence}>{sentence}</li>\n            ))}\n          </ul>\n        </div>\n      </ReactModal>\n    </div>\n  );\n};\n\nexport default Level;\n","import React, { useState } from 'react';\n\nimport data from '../data.json';\n\nimport Level from './Level';\n\nconst Game: React.FC = () => {\n  const [index, setIndex] = useState(0);\n\n  return <Level current={data.levels[index]} onNext={() => setIndex((prev) => prev + 1)} />;\n};\n\nexport default Game;\n","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route, Link } from 'react-router-dom';\nimport Game from './Game';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <Link to=\"/\">Game</Link>\n        <Link to=\"/street-view\">Street View</Link>\n        <Link to=\"/map\">Map</Link>\n      </nav>\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}