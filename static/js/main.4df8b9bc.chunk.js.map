{"version":3,"sources":["click-2.wav","components/Button.tsx","components/Flag.tsx","components/Map.tsx","components/Modal.tsx","components/Spinner.tsx","components/Stopwatch.tsx","components/StreetView.tsx","components/Level.tsx","components/Path.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["click","Audio","clickSound","load","Button","children","props","onClick","event","play","Flag","name","code","alt","height","width","src","defaultCoordinates","lat","lng","Map","coordinates","zoom","onMapClick","mapContainerStyle","center","Modal","show","onHide","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","style","overlay","backgroundColor","undefined","content","inset","border","background","borderRadius","color","Spinner","className","borderColor","total","seconds","minutes","hours","days","Stopwatch","onChange","useStopwatch","autoStart","useEffect","StreetView","streetViewPanoramaOptions","position","pov","heading","pitch","visible","enableCloseButton","disableDefaultUI","options","fetcher","url","fetch","then","r","json","Data","data","useSWR","suspense","console","log","address","town","state","region","country","country_code","toUpperCase","PlaceChooser","marker","onConfirm","useState","showInfoWindow","setShowInfoWindow","onLoad","onCloseClick","Suspense","fallback","PlaceChooserModal","setMarker","e","latLng","toJSON","Tips","tips","tipsViewed","onTipView","map","tip","includes","Level","current","onNext","mapModalOpened","setMapModalOpened","tipsModalOpened","setTipsModalOpened","setTipsViewed","time","useRef","extraPoints","length","prev","history","id","Path","levels","onLevelClick","setShow","stateClass","sliderRef","useDimensions","ref","settings","slidesToShow","Math","floor","slidesToScroll","infinite","waitForAnimate","prevArrow","icon","faChevronLeft","nextArrow","faChevronRight","faChevronDown","faChevronUp","level","city","Game","index","setIndex","setPoints","points","userData","COORDINATES","App","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","countries","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.4df8b9bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click-2.66336ee5.wav\";","import React from \"react\";\nimport clickSound from \"../click-2.wav\";\n\ntype Props = JSX.IntrinsicElements[\"button\"]\n\nconst click = new Audio(clickSound);\nclick.load();\n\nconst Button: React.FC<Props> = ({ children, ...props}) => {\n    const handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n        click.play();   \n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    }\n\n    return (\n        <button {...props} onClick={handleClick}>\n            {children}\n        </button>\n    )\n}\n\nexport default Button;","import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface Props {\n  coordinates?: { lat: number; lng: number };\n  zoom?: number;\n  onMapClick?: ((e: google.maps.MapMouseEvent) => void) | undefined;\n}\n\nconst defaultCoordinates = {\n  lat: -13.8860709,\n  lng: -57.2789963,\n};\nconst defaultZoom = 4.5;\n\nconst Map: React.FC<Props> = ({ coordinates = defaultCoordinates, zoom = defaultZoom, children, onMapClick }) => {\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={zoom} onClick={onMapClick}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\ninterface Props {\n  show: boolean;\n  onHide: () => void;\n}\n\nconst Modal: React.FC<Props> = ({ children, show, onHide }) => {\n  return (\n    <ReactModal\n      isOpen={show}\n      onRequestClose={onHide}\n      shouldCloseOnEsc\n      shouldCloseOnOverlayClick\n      style={{\n        overlay: {\n          backgroundColor: undefined,\n        },\n        content: {\n          inset: '150px 40px 40px 40px',\n          border: '1px solid #1d246e',\n          background: '#323dbb',\n          borderRadius: '12px',\n          color: 'white',\n        },\n      }}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from \"react\"\nimport CSS from 'csstype';\n\n\ninterface Props {\n    color?: CSS.Property.Color\n}\n\nconst Spinner: React.FC<Props> = ({ color = \"white\" }) => {\n    return (\n        <div className=\"spinner\" style={{ borderColor: color }} >\n            <div style={{ borderColor: color }} />\n            <div style={{ borderColor: color }} />\n        </div>\n    )\n}\n\nexport default Spinner","import React, { useEffect } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst total = (seconds: number, minutes: number, hours: number, days: number): number => seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24\n\ninterface Props {\n  onChange?: (total: number) => void\n}\n\nconst Stopwatch: React.FC<Props> = ({ children, onChange }) => {\n  const { seconds, minutes, hours, days } = useStopwatch({ autoStart: true });\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(total(seconds, minutes, hours, days))\n    }\n  }, [onChange, seconds, minutes, hours, days])\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch-time shaking\">⏰</div>\n      <span className=\"stopwatch-time\">\n        {total(seconds, minutes, hours, days)}\n\n        {children}\n      </span>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\n\ninterface Props {\n  coordinates?: { lat: number; lng: number };\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetView: React.FC<Props> = ({ coordinates = defaultCoordinates }) => {\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n    disableDefaultUI: true,\n  };\n\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={10}>\n      <StreetViewPanorama options={streetViewPanoramaOptions} />\n    </GoogleMap>\n  );\n};\n\nexport default StreetView;\n","import { InfoWindow, Marker } from '@react-google-maps/api';\nimport React, { useRef, useState } from 'react';\nimport useSWR from 'swr';\nimport data from '../data.json';\nimport Button from './Button';\n\nimport Flag from './Flag';\nimport Map from './Map';\nimport Modal from './Modal';\nimport Spinner from './Spinner';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst Data = ({ position }: { position: google.maps.LatLngLiteral }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  console.log(data);\n\n  return (\n    <div className=\"data-container\">\n      <ul>\n        <li>Cidade: {data.address.town}</li>\n        <li>Estado: {data.address.state}</li>\n        <li>Região: {data.address.region || \":(\"}</li>\n        <li>\n          País: {data.address.country}\n          <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nconst PlaceChooser = ({ marker, onMapClick, onConfirm }: any) => {\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\n\n  return (\n    <div className=\"full\">\n      <div className=\"full\">\n        <Map\n          onMapClick={onMapClick}\n        >\n          {marker && (\n            <Marker position={marker} onClick={() => setShowInfoWindow(true)} onLoad={() => setShowInfoWindow(true)}>\n              {showInfoWindow && (\n                <InfoWindow onCloseClick={() => setShowInfoWindow(false)}>\n                  <React.Suspense fallback={<Spinner color=\"#323dbb\" />}>\n                    <Data position={marker} />\n\n                    <Button onClick={onConfirm}>Confirmar</Button>\n                  </React.Suspense>\n                </InfoWindow>\n              )}\n            </Marker>\n          )}\n        </Map>\n      </div>\n    </div>\n  )\n}\n\nconst PlaceChooserModal = ({ show, onHide, onConfirm }: any) => {\n  const [marker, setMarker] = useState<google.maps.LatLngLiteral>();\n  \n  return (\n    <Modal show={show} onHide={onHide}>\n      <PlaceChooser\n        marker={marker}\n        onMapClick={(e: any) => {\n          if (e.latLng) {\n            setMarker(e.latLng.toJSON());\n          }\n        }}\n        onConfirm={onConfirm}\n      />\n    </Modal>\n  );\n};\n\nconst Tips = ({ tips, tipsViewed, show, onHide, onTipView }: any) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <div className=\"full\">\n        <ul>\n          {tips.map((tip: string) => {\n            if (tipsViewed.includes(tip)) {\n              return <li key={tip}>{tip}</li>;\n            }\n            return (\n              <li key={tip}>\n                Escondido\n                <Button onClick={() => onTipView(tip)}>Mostrar</Button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </Modal>\n  );\n};\n\ninterface Props {\n  current: typeof data.levels[number];\n  onNext: (points: number) => void;\n}\n\nconst Level: React.FC<Props> = ({ current, onNext }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [tipsModalOpened, setTipsModalOpened] = useState(false);\n  const [tipsViewed, setTipsViewed] = useState<string[]>([]);\n  const time = useRef(0); // Not ideal, but :(\n  const extraPoints = tipsViewed.length * 100;\n\n  return (\n    <div className=\"game-container full\">\n      <div className=\"game-header\">\n        <div>\n          <Button onClick={() => setMapModalOpened((prev) => !prev)}>Palpitar</Button>\n          <Button onClick={() => setTipsModalOpened((prev) => !prev)}>\n            Dicas {tipsViewed.length}/{current.history.length}\n          </Button>\n        </div>\n\n        <div>\n          <Stopwatch key={current.id} onChange={total => time.current = total}>\n            {extraPoints ? (\n              <span className=\"stopwatch-extra\">\n                (+{extraPoints})\n              </span>\n            ) : null}\n          </Stopwatch>\n        </div>\n\n        <div>\n          <Button\n            onClick={() => {\n              setTipsViewed([]);\n              onNext(time.current + extraPoints);\n            }}\n          >Pular</Button>\n        </div>\n      </div>\n\n      <div className=\"game-body full-height\">\n        <StreetView coordinates={current.coordinates} />\n      </div>\n\n      <PlaceChooserModal\n        show={mapModalOpened}\n        onHide={() => setMapModalOpened(false)}\n        onConfirm={() => {\n          setMapModalOpened(false);\n          onNext(time.current + extraPoints);\n        }}\n      />\n\n      <Tips\n        tips={current.history}\n        tipsViewed={tipsViewed}\n        show={tipsModalOpened}\n        onHide={() => setTipsModalOpened(false)}\n        onTipView={(tip: string) => setTipsViewed(prev => [...prev, tip])}\n      />\n    </div>\n  );\n};\n\nexport default Level;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronUp, faChevronDown, faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons'\nimport React, { useRef, useState } from \"react\"\nimport data from '../data.json';\nimport userData from '../user-data.json';\nimport Button from \"./Button\";\nimport \"slick-carousel/slick/slick.css\";\nimport useDimensions from \"react-use-dimensions\";\nimport Slider, { Settings } from \"react-slick\";\n\n\ninterface Props {\n    levels: typeof data.levels\n    userData: typeof userData\n    current: number\n    onLevelClick: (index: number) => void\n}\n\nconst Path: React.FC<Props> = ({ levels, current, onLevelClick }) => {\n    const [show, setShow] = useState(false);\n    const stateClass = show ? \"shown\" : \"hidden\"\n    const sliderRef = useRef<React.LegacyRef<Slider>>()\n    const [ref, { width }] = useDimensions();\n\n    const settings: Settings = {\n        slidesToShow: width ? Math.floor((width) / (180 + 40)) : 1,\n        slidesToScroll: 4,\n        infinite: false,\n        waitForAnimate: false,\n        prevArrow: <Button><FontAwesomeIcon icon={faChevronLeft} /></Button>,\n        nextArrow: <Button><FontAwesomeIcon icon={faChevronRight} /></Button>,\n    };\n\n    return (\n        <div className={`path-container ${stateClass}`}>\n            <Button onClick={() => setShow(prev => !prev)}>\n                Níveis\n                {\" \"}\n                <FontAwesomeIcon icon={show ? faChevronDown : faChevronUp} />\n            </Button>\n\n            <div className=\"path-content\">\n                <div ref={ref}>\n                    <Slider {...settings} ref={sliderRef.current}>\n                        {levels.map(level => (\n                            <Button\n                                key={level.id}\n                                className=\"path-content-level full\"\n                                onClick={() => onLevelClick(level.id)}\n                            >\n                                {level.id} - {level.city.name}\n                            </Button>\n                        ))}\n                    </Slider>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Path","import React, { useState } from 'react';\n\nimport data from '../data.json';\nimport userData from '../user-data.json';\n\nimport Level from './Level';\nimport Path from './Path';\n\nconst Game: React.FC = () => {\n  const [index, setIndex] = useState(0);\n  const [, setPoints] = useState(0);\n\n  return (\n    <div className=\"full\">\n      <Level\n        current={data.levels[index]}\n        onNext={(points) => {\n          setIndex((prev) => prev + 1)\n          setPoints(prev => prev + points)\n        }}\n      />\n\n      <Path\n        levels={data.levels}\n        userData={userData}\n        current={index}\n        onLevelClick={setIndex}\n      />\n    </div>\n  );\n};\n\nexport default Game;\n","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport Game from './Game';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}