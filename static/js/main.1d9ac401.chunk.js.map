{"version":3,"sources":["components/Flag.tsx","components/Map.tsx","components/Modal.tsx","components/Stopwatch.tsx","components/StreetView.tsx","components/Level.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Flag","name","code","alt","height","width","src","defaultCoordinates","lat","lng","Map","coordinates","zoom","children","onMapClick","mapContainerStyle","center","onClick","Modal","show","onHide","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","style","overlay","backgroundColor","undefined","content","inset","border","background","borderRadius","color","Stopwatch","useStopwatch","autoStart","seconds","minutes","hours","days","isRunning","start","pause","className","StreetView","streetViewPanoramaOptions","position","pov","heading","pitch","visible","enableCloseButton","disableDefaultUI","options","fetcher","url","fetch","then","r","json","Data","data","useSWR","suspense","display_name","address","country","country_code","toUpperCase","PlaceChooser","onConfirm","useState","marker","setMarker","showInfoWindow","setShowInfoWindow","e","latLng","toJSON","onLoad","onCloseClick","Suspense","fallback","Tips","tips","onTipView","setVisible","useEffect","map","sentence","includes","prev","Level","current","onNext","mapModalOpened","setMapModalOpened","tipsModalOpened","setTipsModalOpened","tipsViewed","setTipsViewed","length","history","viewed","Game","index","setIndex","levels","COORDINATES","App","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","countries","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.1d9ac401.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface Props {\n  coordinates?: { lat: number; lng: number };\n  zoom?: number;\n  onMapClick?: ((e: google.maps.MapMouseEvent) => void) | undefined;\n}\n\nconst defaultCoordinates = {\n  lat: -13.8860709,\n  lng: -57.2789963,\n};\nconst defaultZoom = 4.5;\n\nconst Map: React.FC<Props> = ({ coordinates = defaultCoordinates, zoom = defaultZoom, children, onMapClick }) => {\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={zoom} onClick={onMapClick}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\ninterface Props {\n  show: boolean;\n  onHide: () => void;\n}\n\nconst Modal: React.FC<Props> = ({ children, show, onHide }) => {\n  return (\n    <ReactModal\n      isOpen={show}\n      onRequestClose={onHide}\n      shouldCloseOnEsc\n      shouldCloseOnOverlayClick\n      style={{\n        overlay: {\n          backgroundColor: undefined,\n        },\n        content: {\n          inset: '150px 40px 40px 40px',\n          border: '1px solid #1d246e',\n          background: '#323dbb',\n          borderRadius: '12px',\n          color: 'white',\n        },\n      }}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst Stopwatch: React.FC = () => {\n  const { seconds, minutes, hours, days, isRunning, start, pause } = useStopwatch({ autoStart: true });\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"clock shaking\">‚è∞</div>\n      <span>{seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24}</span>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\n\ninterface Props {\n  coordinates?: { lat: number; lng: number };\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetView: React.FC<Props> = ({ coordinates = defaultCoordinates }) => {\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n    disableDefaultUI: true,\n  };\n\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={10}>\n      <StreetViewPanorama options={streetViewPanoramaOptions} />\n    </GoogleMap>\n  );\n};\n\nexport default StreetView;\n","import { InfoWindow, Marker } from '@react-google-maps/api';\nimport React, { useEffect, useState } from 'react';\nimport useSWR from 'swr';\nimport data from '../data.json';\n\nimport Flag from './Flag';\nimport Map from './Map';\nimport Modal from './Modal';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst Data = ({ position }: { position: google.maps.LatLngLiteral }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  return (\n    <div>\n      <span>{data.display_name}</span>\n\n      <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n    </div>\n  );\n};\n\nconst PlaceChooser = ({ show, onHide, onConfirm }: any) => {\n  const [marker, setMarker] = useState<google.maps.LatLngLiteral>();\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\n\n  return (\n    <Modal show={show} onHide={onHide}>\n      <div className=\"full\">\n        <div className=\"full\">\n          <Map\n            onMapClick={(e) => {\n              if (e.latLng) {\n                setMarker(e.latLng.toJSON());\n              }\n            }}\n          >\n            {marker && (\n              <Marker position={marker} onClick={() => setShowInfoWindow(true)} onLoad={() => setShowInfoWindow(true)}>\n                {showInfoWindow && (\n                  <InfoWindow onCloseClick={() => setShowInfoWindow(false)}>\n                    <React.Suspense fallback={<span>Loading...</span>}>\n                      <Data position={marker} />\n\n                      <button onClick={onConfirm}>Confirm</button>\n                    </React.Suspense>\n                  </InfoWindow>\n                )}\n              </Marker>\n            )}\n          </Map>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nconst Tips = ({ tips, show, onHide, onTipView }: any) => {\n  const [visible, setVisible] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (onTipView) {\n      onTipView(visible);\n    }\n  }, [visible, onTipView]);\n\n  return (\n    <Modal show={show} onHide={onHide}>\n      <div className=\"full\">\n        <ul>\n          {tips.map((sentence: string) => {\n            if (visible.includes(sentence)) {\n              return <li key={sentence}>{sentence}</li>;\n            }\n            return (\n              <li key={sentence}>\n                Escondido\n                <button onClick={() => setVisible((prev) => [...prev, sentence])}>Mostrar</button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </Modal>\n  );\n};\n\ninterface Props {\n  current: typeof data.levels[number];\n  onNext: () => void;\n}\n\nconst Level: React.FC<Props> = ({ current, onNext }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [tipsModalOpened, setTipsModalOpened] = useState(false);\n  const [tipsViewed, setTipsViewed] = useState<string[]>([]);\n\n  return (\n    <div className=\"game-container full\">\n      <StreetView coordinates={current.coordinates} />\n\n      <div className=\"country-flag\">\n        <button onClick={() => setMapModalOpened((prev) => !prev)}>Palpitar</button>\n\n        <button onClick={onNext}>Pular</button>\n\n        <button onClick={() => setTipsModalOpened((prev) => !prev)}>\n          Dicas {tipsViewed.length}/{current.history.length}\n        </button>\n\n        <Stopwatch />\n      </div>\n\n      <PlaceChooser\n        show={mapModalOpened}\n        onHide={() => setMapModalOpened(false)}\n        onConfirm={() => {\n          setMapModalOpened(false);\n          onNext();\n        }}\n      />\n\n      <Tips\n        tips={current.history}\n        show={tipsModalOpened}\n        onHide={() => setTipsModalOpened(false)}\n        onTipView={(viewed: string[]) => setTipsViewed(viewed)}\n      />\n    </div>\n  );\n};\n\nexport default Level;\n","import React, { useState } from 'react';\n\nimport data from '../data.json';\n\nimport Level from './Level';\n\nconst Game: React.FC = () => {\n  const [index, setIndex] = useState(0);\n\n  return <Level current={data.levels[index]} onNext={() => setIndex((prev) => prev + 1)} />;\n};\n\nexport default Game;\n","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport Game from './Game';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}