{"version":3,"sources":["components/Flag.tsx","components/Map.tsx","components/StreetView.tsx","components/Stopwatch.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Flag","name","code","alt","height","width","src","defaultCoordinates","lat","lng","Map","coordinates","mapContainerStyle","center","zoom","StreetView","streetViewPanoramaOptions","position","pov","heading","pitch","visible","options","Stopwatch","useStopwatch","autoStart","seconds","minutes","hours","days","isRunning","start","pause","style","fontSize","onClick","time","Date","setSeconds","getSeconds","Game","useState","index","setIndex","modalOpened","setModalOpened","current","data","levels","className","prev","countries","getName","city","country","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","COORDINATES","App","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","ReactDOM","render"],"mappings":"6qPAOe,SAASA,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KACnC,OACE,qBACEC,IAAKF,EACLG,OAAQ,GACRC,MAAO,GACPC,IAAG,qEAAgEJ,EAAhE,UCNT,IAAMK,EAAqB,CACzBC,IAAK,YACLC,IAAK,aAGQ,SAASC,EAAT,GAA8D,IAAD,IAA9CC,mBAA8C,MAAhCJ,EAAgC,EAC1E,OAAO,cAAC,IAAD,CAAWK,kBAAmB,CAAER,OAAQ,QAAUS,OAAQF,EAAaG,KAAM,KCLtF,IAAMP,EAAqB,CACzBC,IAAK,YACLC,IAAK,aAGQ,SAASM,EAAT,GAAqE,IAAD,IAA9CJ,mBAA8C,MAAhCJ,EAAgC,EAC3ES,EAAmE,CACvEC,SAAUN,EACVO,IAAK,CAAEC,QAAS,EAAGC,MAAO,GAC1BN,KAAM,EACNO,SAAS,GAGX,OACE,cAAC,IAAD,CAAWT,kBAAmB,CAAER,OAAQ,QAAUS,OAAQF,EAAaG,KAAM,GAA7E,SACE,cAAC,IAAD,CAAoBQ,QAASN,M,YCpBpB,SAASO,IACtB,MAAmEC,uBAAa,CAAEC,WAAW,IAArFC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,KAAMC,EAAvC,EAAuCA,UAAWC,EAAlD,EAAkDA,MAAOC,EAAzD,EAAyDA,MAEzD,OACE,gCACE,qBAAKC,MAAO,CAAEC,SAAU,SAAxB,SACE,+BAAOR,EAAoB,GAAVC,EAAuB,GAARC,EAAa,GAAY,GAAPC,EAAY,GAAK,OAErE,4BAAIC,EAAY,UAAY,gBAC5B,wBAAQK,QAASJ,EAAjB,mBACA,wBAAQI,QAASH,EAAjB,mBACA,wBACEG,QAAS,WAEP,IAAMC,EAAO,IAAIC,KACjBD,EAAKE,WAAWF,EAAKG,aAAe,MAJxC,wBCHS,SAASC,IACtB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAUC,EAAKC,OAAON,GAE5B,OACE,sBAAKO,UAAU,sBAAf,UACE,cAAClC,EAAD,CAAYJ,YAAamC,EAAQnC,cAEjC,sBAAKsC,UAAU,eAAf,UACE,wBAAQd,QAAS,kBAAMU,GAAe,SAACK,GAAD,OAAWA,MAAjD,SACE,cAAClD,EAAD,CAAMC,KAAMkD,IAAUC,QAAQN,EAAQO,KAAKC,QAAS,MAAOpD,KAAM4C,EAAQO,KAAKC,YAGhF,wBAAQnB,QAAS,kBAAMQ,GAAS,SAACO,GAAD,OAAUA,EAAO,MAAjD,kBAEA,cAAC3B,EAAD,OAGF,cAAC,IAAD,CACEgC,OAAQX,EACRY,eAAgB,kBAAMX,GAAe,IACrCY,kBAAgB,EAChBC,2BAAyB,EAJ3B,SAME,qBAAKT,UAAU,OAAf,SACE,qBAAKA,UAAU,OAAf,SACE,cAACvC,EAAD,CAAKC,YAAamC,EAAQnC,sBArBQ+B,GCT9C,IAAMiB,EAAc,CAAEnD,KAAM,WAAYC,KAAM,YA6B/BmD,MA3Bf,WACE,MAAgCC,YAAe,CAC7CC,iBAAkBC,4CADZC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAIlB,OAAKD,GAAYC,EACR,KAIP,sBAAKhB,UAAU,MAAf,UACE,gCACE,cAAC,IAAD,CAAMiB,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,eAAT,yBACA,cAAC,IAAD,CAAMA,GAAG,OAAT,oBAEF,qBAAKjB,UAAU,OAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkB,KAAK,IAAIC,QAAS,cAAC5B,EAAD,MACzB,cAAC,IAAD,CAAO2B,KAAK,cAAcC,QAAS,cAACrD,EAAD,CAAYJ,YAAagD,MAC5D,cAAC,IAAD,CAAOQ,KAAK,MAAMC,QAAS,cAAC1D,EAAD,CAAKC,YAAagD,eCjBxCU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCIdnB,IAAU2B,eAAeC,GAEzBC,IAAWC,cAAcC,SAASC,eAAe,oBAEjDC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFH,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.50ab5f79.chunk.js","sourcesContent":["import React from 'react';\n\ninterface FlagProps {\n  name: string;\n  code: string;\n}\n\nexport default function Flag({ name, code }: FlagProps) {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n}\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface MapProps {\n  coordinates?: { lat: number; lng: number };\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nexport default function Map({ coordinates = defaultCoordinates }: MapProps) {\n  return <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={10} />;\n}\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\n\ninterface MapProps {\n  coordinates?: { lat: number; lng: number };\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nexport default function StreetView({ coordinates = defaultCoordinates }: MapProps) {\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n  };\n\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={10}>\n      <StreetViewPanorama options={streetViewPanoramaOptions} />\n    </GoogleMap>\n  );\n}\n","import React from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nexport default function Stopwatch() {\n  const { seconds, minutes, hours, days, isRunning, start, pause } = useStopwatch({ autoStart: true });\n\n  return (\n    <div>\n      <div style={{ fontSize: '100px' }}>\n        <span>{seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24}</span>\n      </div>\n      <p>{isRunning ? 'Running' : 'Not running'}</p>\n      <button onClick={start}>Start</button>\n      <button onClick={pause}>Pause</button>\n      <button\n        onClick={() => {\n          // Restarts to 5 minutes timer\n          const time = new Date();\n          time.setSeconds(time.getSeconds() + 300);\n        }}\n      >\n        Restart\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport countries from 'i18n-iso-countries';\nimport ReactModal from 'react-modal';\n\nimport data from '../data.json';\n\nimport Flag from './Flag';\nimport Map from './Map';\nimport StreetView from './StreetView';\nimport Stopwatch from './Stopwatch';\n\nexport default function Game() {\n  const [index, setIndex] = useState(0);\n  const [modalOpened, setModalOpened] = useState(false);\n\n  const current = data.levels[index];\n\n  return (\n    <div className=\"game-container full\" key={index}>\n      <StreetView coordinates={current.coordinates} />\n\n      <div className=\"country-flag\">\n        <button onClick={() => setModalOpened((prev) => !prev)}>\n          <Flag name={countries.getName(current.city.country, 'pt')} code={current.city.country} />\n        </button>\n\n        <button onClick={() => setIndex((prev) => prev + 1)}>Next</button>\n\n        <Stopwatch />\n      </div>\n\n      <ReactModal\n        isOpen={modalOpened}\n        onRequestClose={() => setModalOpened(false)}\n        shouldCloseOnEsc\n        shouldCloseOnOverlayClick\n      >\n        <div className=\"full\">\n          <div className=\"full\">\n            <Map coordinates={current.coordinates} />\n          </div>\n        </div>\n      </ReactModal>\n    </div>\n  );\n}\n","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route, Link } from 'react-router-dom';\nimport Game from './Game';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nfunction App() {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <Link to=\"/\">Game</Link>\n        <Link to=\"/street-view\">Street View</Link>\n        <Link to=\"/map\">Map</Link>\n      </nav>\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(document.getElementById('modal-container')!);\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}