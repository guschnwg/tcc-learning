{"version":3,"sources":["click-2.wav","components/Button.tsx","components/Stopwatch.tsx","components/Flag.tsx","components/OpenStreetMapData.tsx","components/StreetView.tsx","components/Map.tsx","components/Modal.tsx","components/Spinner.tsx","utils.ts","components/PlaceChooser.tsx","components/Hints.tsx","components/Level.tsx","supabase.ts","components/Login.tsx","components/Path.tsx","components/Settings.tsx","components/Game.tsx","components/Leaderboard.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["click","Audio","clickSound","load","Button","children","props","onClick","event","play","total","seconds","minutes","hours","days","Stopwatch","start","step","onChange","onStep","useStopwatch","autoStart","offsetTimestamp","Date","now","lastStepEmitted","useRef","useEffect","current","className","Flag","name","code","alt","height","width","src","CITY_KEYS","STATE_KEYS","findItemInOSMData","address","keys","key","isSame","addressOne","addressTwo","isSameOSMPlace","OpenStreetMapsData","data","distance","city","state","region","country","country_code","toUpperCase","defaultCoordinates","lat","lng","StreetViewMarker","streetViewPanorama","coordinates","useState","marker","setMarker","infoWindowRef","position","onLoad","e","infoWindow","open","ref","options","pixelOffset","google","maps","Size","StreetView","markers","guesses","showMarkers","setStreetViewPanorama","streetViewPanoramaOptions","clickToGo","pov","heading","pitch","zoom","visible","enableCloseButton","disableDefaultUI","mapContainerStyle","center","map","guess","Number","lon","id","index","DEFAULT_COORDINATES","getZoom","lat_a","lng_a","lat_b","lng_b","latRad","sin","Math","PI","radX2","log","max","min","latDif","abs","lngDif","latFrac","lngFrac","lngZoom","latZoom","Map","onMapClick","Modal","portalClassName","show","onHide","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","style","overlay","backgroundColor","undefined","content","inset","border","background","borderRadius","color","padding","Spinner","borderColor","fisherYates","array","randomnumber","temp","count","length","random","fetcher","url","fetch","then","r","json","Data","showConfirmButton","onConfirm","useSWR","suspense","error","GuessInfo","level","onClose","onNext","toFixed","PlaceChooserMarker","placeCoords","guessCoords","showInfoWindow","onShowInfoWindow","showDistance","setShowDistance","ready","setReady","useMemo","mk1","mk2","rlat1","rlat2","difflat","difflon","asin","sqrt","cos","haversineDistance","zIndex","onPositionChanged","onCloseClick","Suspense","fallback","PlaceChooserGuesses","showInfoWindowId","onGuessClick","sort","g1","g2","icon","time_elapsed","PlaceChooser","canGuess","mapCenter","setMapCenter","setZoom","setGuessCoords","setShowInfoWindowId","guessInfo","setGuessInfo","handleSubmit","preventDefault","locale","target","value","encoded","encodeURIComponent","response","boundingbox","onSubmit","clickableIcons","latLng","toJSON","PlaceChooserModal","Hints","hints","hintsViewed","onHintView","hint","hintView","find","h","hint_id","description","Level","guessLimit","startTime","onGuess","onHintViewed","onTimePassed","mapModalOpened","setMapModalOpened","hintsModalOpened","setHintsModalOpened","time","prev","supabase","createClient","process","GUESSES_TABLE","BEST_GUESSES_TABLE","GAMES_TABLE","GAME_LEVELS_TABLE","GAME_LEVEL_HINTS_TABLE","LEVELS_TABLE","fetchOrCreate","table","match","insert","from","select","loginOrRegister","email","authData","password","auth","signIn","signUp","Login","onAuth","window","localStorage","getItem","setGuessLimit","userName","alert","user","session","htmlFor","defaultValue","type","onInput","Levels","bestGuesses","levels","onLevelClick","bestGuess","g","hints_viewed","Path","setShow","useDimensions","divider","margin","Settings","InternalGame","game","setGame","currentLevel","setCurrentLevel","setBestGuesses","fetchOrCreateGame","user_id","guess_limit","fetchBestGuesses","order","eq","d","game_levels","level_id","VeryInternalGame","gameLevel","setGameLevel","setGuesses","setHints","setHintsViewed","fetchOrCreateUserLevel","game_id","fetchGuesses","game_level_id","fetchHintsViewed","fetchHints","handleTimePass","update","handleHintView","handleGuess","osmData","Game","setAuth","setLevels","fetchLevels","to","InternalLeaderboard","setData","setError","levelId","limit","games","profiles","Leaderboard","COORDINATES","App","useJsApiLoader","googleMapsApiKey","isLoaded","loadError","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","countries","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.99bf96e6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click-2.66336ee5.wav\";","import React from \"react\";\nimport clickSound from \"../click-2.wav\";\n\ntype Props = JSX.IntrinsicElements[\"button\"]\n\nconst click = new Audio(clickSound);\nclick.load();\n\nconst Button: React.FC<Props> = ({ children, ...props}) => {\n    const handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n        click.play();   \n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    }\n\n    return (\n        <button {...props} onClick={handleClick}>\n            {children}\n        </button>\n    )\n}\n\nexport default Button;","import React, { useEffect, useRef } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst total = (seconds: number, minutes: number, hours: number, days: number): number => seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24\n\ninterface Props {\n  start?: number\n  step?: number\n  onChange?: (total: number) => void\n  onStep?: (total: number) => void\n}\n\n\nconst Stopwatch: React.FC<Props> = ({ start = 0, step = 10, children, onChange, onStep }) => {\n  const { seconds, minutes, hours, days } = useStopwatch({\n    autoStart: true,\n    offsetTimestamp: new Date(Date.now() + start * 1000),\n  });\n  const lastStepEmitted = useRef<number>(start);\n\n  useEffect(() => {\n    const current = total(seconds, minutes, hours, days);\n\n    if (onChange) {\n      onChange(current)\n    }\n    if (onStep && current >= lastStepEmitted.current + step) {\n      onStep(current)\n      lastStepEmitted.current = current;\n    }\n\n  }, [onChange, seconds, minutes, hours, days, onStep, start, step])\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch-time shaking\">⏰</div>\n      <span className=\"stopwatch-time\">\n        {total(seconds, minutes, hours, days)}\n\n        {children}\n      </span>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React from \"react\";\nimport Flag from \"./Flag\";\n\ntype OSMAddressKeys = (keyof OSMAddress)[]\n\nexport const DISTRICT_KEYS: OSMAddressKeys = [\"city_district\", \"district\", \"borough\", \"suburb\", \"subdivision\"];\nexport const CITY_KEYS: OSMAddressKeys = [\"city\", \"town\", \"village\", \"municipality\"];\nexport const STATE_KEYS: OSMAddressKeys = [\"state\", \"state_district\", \"county\"];\n\nexport function findItemInOSMData(address: OSMAddress, keys: OSMAddressKeys): string {\n  for (const key of keys) {\n    if (key in address) {\n      return address[key] as string;\n    }\n  }\n  return \"\";\n}\n\nfunction isSame(addressOne: OSMAddress, addressTwo: OSMAddress, keys: OSMAddressKeys): boolean {\n  return findItemInOSMData(addressOne, keys) === findItemInOSMData(addressTwo, keys);\n}\n\nexport function isSameOSMPlace(addressOne: OSMAddress, addressTwo: OSMAddress): boolean {\n  if (!isSame(addressOne, addressTwo, STATE_KEYS)) {\n    return false;\n  }\n  if (!isSame(addressOne, addressTwo, CITY_KEYS)) {\n    return false;\n  }\n  if (!isSame(addressOne, addressTwo, [\"region\"])) {\n    return false;\n  }\n  if (!isSame(addressOne, addressTwo, [\"country\"])) {\n    return false;\n  }\n\n  return true;\n}\n\nconst OpenStreetMapsData: React.FC<OpenStreetMapDataProps> = ({ data, className = \"\", distance, children }) => {\n  const city = findItemInOSMData(data.address, CITY_KEYS);\n  const state = findItemInOSMData(data.address, STATE_KEYS);\n\n  return (\n    <div className={`data-container ${className}`}>\n      {city && <span>Cidade: {city}</span>}\n      {state && <span>Estado: {state}</span>}\n      {data.address.region && <span>Região: {data.address.region}</span>}\n      {data.address.country && data.address.country_code && (\n        <span className=\"country\">\n          País: {data.address.country}\n          <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n        </span>\n      )}\n      {distance && (<span>Distância: {distance} km</span>)}\n      {children}\n    </div>\n  );\n}\n\nexport default OpenStreetMapsData;\n","import React, { useRef, useState } from 'react';\nimport { GoogleMap, InfoWindow, Marker } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\nimport OpenStreetMapsData from './OpenStreetMapData';\n\ninterface Props {\n  markers?: LevelMarker[]\n  guesses?: GuessEntity[]\n  coordinates?: google.maps.LatLngLiteral\n}\n\ninterface StreetViewMarkerProps {\n  streetViewPanorama: google.maps.StreetViewPanorama\n  coordinates?: google.maps.LatLngLiteral\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetViewMarker: React.FC<StreetViewMarkerProps> = ({ streetViewPanorama, coordinates, children }) => {\n  const [marker, setMarker] = useState<google.maps.Marker>();\n  const infoWindowRef = useRef<InfoWindow>(null);\n\n  if (!coordinates) {\n    return null;\n  }\n\n  return (\n    <Marker\n      position={coordinates}\n      onLoad={(e) => setMarker(e)}\n      onClick={() => {\n        if (infoWindowRef.current && infoWindowRef.current.state.infoWindow) {\n          infoWindowRef.current.state.infoWindow.open(streetViewPanorama);\n        }\n      }}\n    >\n      {children && marker && (\n        <InfoWindow\n          ref={infoWindowRef}\n          options={{pixelOffset: new google.maps.Size(0, -50, 'px', 'px')}}\n        >\n          {children}\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst StreetView: React.FC<Props> = ({ markers = [], guesses = [], coordinates = defaultCoordinates }) => {\n  const [showMarkers] = useState(false);\n  const [streetViewPanorama, setStreetViewPanorama] = useState<google.maps.StreetViewPanorama>();\n\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    clickToGo: true,\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n    disableDefaultUI: true,\n  };\n\n  return (\n    <>\n      <GoogleMap\n        mapContainerStyle={{ height: '100%' }}\n        center={coordinates}\n        zoom={10}\n      >\n        <StreetViewPanorama\n          onLoad={e => setStreetViewPanorama(e)}\n          options={streetViewPanoramaOptions}\n        />\n\n        {showMarkers && streetViewPanorama && (\n          <>\n            <StreetViewMarker\n              streetViewPanorama={streetViewPanorama}\n              coordinates={coordinates}\n            >\n              <span>This is the initial location</span>\n            </StreetViewMarker>\n\n            {guesses.map(guess => (\n              <StreetViewMarker\n                key={guess.id}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={{ lat: Number(guess.data.lat), lng: Number(guess.data.lon) }}\n              >\n                <OpenStreetMapsData data={guess.data} />\n              </StreetViewMarker>\n            ))}\n\n            {markers.map((marker, index) => (\n              <StreetViewMarker\n                key={index}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={marker.coordinates}\n              >\n                <span>{marker.data}</span>\n              </StreetViewMarker>\n            ))}\n          </>\n        )}\n      </GoogleMap>\n    </>\n  );\n};\n\nexport default StreetView;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface Props {\n  options?: google.maps.MapOptions\n  coordinates?: { lat: number; lng: number };\n  zoom?: number;\n  onMapClick?: ((e: google.maps.MapMouseEvent) => void) | undefined;\n}\n\nexport const DEFAULT_COORDINATES = {\n  lat: -13.8860709,\n  lng: -57.2789963,\n};\nexport const DEFAULT_ZOOM = 4.5;\n\nexport function getZoom(lat_a: number, lng_a: number, lat_b: number, lng_b: number): number {\n  function latRad(lat: number) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n    return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n  }\n\n  const latDif = Math.abs(latRad(lat_a) - latRad(lat_b))\n  const lngDif = Math.abs(lng_a - lng_b)\n\n  const latFrac = latDif / Math.PI\n  const lngFrac = lngDif / 360\n\n  const lngZoom = Math.log(1 / latFrac) / Math.log(2)\n  const latZoom = Math.log(1 / lngFrac) / Math.log(2)\n\n  return Math.min(lngZoom, latZoom)\n}\n\nconst Map: React.FC<Props> = ({ coordinates = DEFAULT_COORDINATES, zoom = DEFAULT_ZOOM, options = {}, children, onMapClick }) => {\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={zoom} options={options} onClick={onMapClick}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\ninterface Props {\n  className?: string\n  portalClassName?: string\n  show: boolean;\n  onHide: () => void;\n}\n\nconst Modal: React.FC<Props> = ({ className = \"\", portalClassName = \"\", children, show, onHide }) => {\n  return (\n    <ReactModal\n      isOpen={show}\n      onRequestClose={onHide}\n      shouldCloseOnEsc\n      shouldCloseOnOverlayClick\n      style={{\n        overlay: {\n          backgroundColor: undefined,\n        },\n        content: {\n          inset: '150px',\n          border: '1px solid #1d246e',\n          background: '#323dbb',\n          borderRadius: '12px',\n          color: 'white',\n          padding: '10px',\n        },\n      }}\n      className={className}\n      portalClassName={portalClassName}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from \"react\"\nimport CSS from 'csstype';\n\n\ninterface Props {\n    color?: CSS.Property.Color\n}\n\nconst Spinner: React.FC<Props> = ({ color = \"white\" }) => {\n    return (\n        <div className=\"spinner\" style={{ borderColor: color }} >\n            <div style={{ borderColor: color }} />\n            <div style={{ borderColor: color }} />\n        </div>\n    )\n}\n\nexport default Spinner","/* eslint-disable */\n// @ts-ignore\nexport function fisherYates(array) {\n  var count = array.length,\n    randomnumber,\n    temp;\n  while (count) {\n    randomnumber = Math.random() * count-- | 0;\n    temp = array[count];\n    array[count] = array[randomnumber];\n    array[randomnumber] = temp\n  }\n}\n/* eslint-enable */\n\nexport function haversineDistance(mk1: google.maps.LatLngLiteral, mk2: google.maps.LatLngLiteral): number {\n  const R = 3958.8; // Radius of the Earth in miles\n  const rlat1 = mk1.lat * (Math.PI / 180); // Convert degrees to radians\n  const rlat2 = mk2.lat * (Math.PI / 180); // Convert degrees to radians\n  const difflat = rlat2 - rlat1; // Radian difference (latitudes)\n  const difflon = (mk2.lng - mk1.lng) * (Math.PI / 180); // Radian difference (longitudes)\n\n  const d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n  return d;\n}\n","import React, { FormEvent, useEffect, useMemo, useState } from 'react';\nimport { InfoWindow, Marker } from '@react-google-maps/api';\nimport useSWR from 'swr';\nimport Button from './Button';\n\nimport Map, { DEFAULT_COORDINATES, DEFAULT_ZOOM, getZoom } from './Map';\nimport Modal from './Modal';\nimport OpenStreetMapsData, { isSameOSMPlace } from './OpenStreetMapData';\nimport Spinner from './Spinner';\nimport { haversineDistance } from '../utils';\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst Data: React.FC<{ position: google.maps.LatLngLiteral, showConfirmButton: boolean, onConfirm?: (data: OSMData) => void }> = ({ position, showConfirmButton, onConfirm, children }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  if (data.error || !data.address) {\n    return <span className='data-container'>Não consegui localizar, tente novamente.</span>;\n  }\n\n  return (\n    <>\n      <OpenStreetMapsData data={data}>\n        {children}\n      </OpenStreetMapsData>\n\n      {showConfirmButton && <Button onClick={() => onConfirm && onConfirm(data)}>Confirmar</Button>}\n    </>\n  );\n};\n\nconst GuessInfo: React.FC<{ guess: GuessEntity, level: LevelEntity, onClose: () => void, onNext: () => void }> = ({ level, guess, onClose, onNext }) => {\n  return (\n    <Modal className=\"guess-info-modal\" portalClassName=\"guess-info-modal-container\" show onHide={onClose}>\n      <h3>Seu palpite</h3>\n\n      <OpenStreetMapsData data={guess.data}>\n        <span>Distância: {guess.distance.toFixed(2)}km</span>\n\n        <div className=\"guess-info-modal-actions\">\n          {isSameOSMPlace(level.data.address, guess.data.address) ? (\n            <>\n              <h4>Você acertou a cidade!</h4>\n\n              <Button onClick={onNext}>\n                Próximo\n              </Button>\n            </>\n          ) : (\n            <Button onClick={onClose}>\n              Tentar novamente\n            </Button>\n          )}\n        </div>\n      </OpenStreetMapsData>\n    </Modal>\n  )\n}\n\nconst PlaceChooserMarker: React.FC<PlaceChooserMarkerProps> = ({ placeCoords, guessCoords, showInfoWindow, onShowInfoWindow, onConfirm }) => {\n  const [showDistance, setShowDistance] = useState(false);\n  const [ready, setReady] = useState(false);\n  const distance = useMemo(() => {\n    return haversineDistance(guessCoords, placeCoords);\n  }, [guessCoords, placeCoords]);\n\n  useEffect(() => {\n    setShowDistance(false);\n  }, [guessCoords])\n\n  const handleConfirm = (data: OSMData) => {\n    setShowDistance(true);\n    onConfirm(guessCoords, data, distance);\n  }\n\n  return (\n    <Marker\n      position={guessCoords}\n      zIndex={0}\n      onClick={() => onShowInfoWindow(true)}\n      onPositionChanged={() => onShowInfoWindow(true)}\n      onLoad={() => setReady(true)}\n    >\n      {showInfoWindow && ready && (\n        <InfoWindow onCloseClick={() => onShowInfoWindow(false)}>\n          <React.Suspense fallback={<Spinner color=\"#323dbb\" />}>\n            <Data position={guessCoords} showConfirmButton={!showDistance} onConfirm={handleConfirm}>\n              {showDistance && (\n                <span>Distância: {distance.toFixed(2)}km</span>\n              )}\n            </Data>\n          </React.Suspense>\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst PlaceChooserGuesses: React.FC<{ showInfoWindowId?: number, level: LevelEntity, guesses: GuessEntity[], onGuessClick: (id?: number) => void }> = ({ showInfoWindowId, level, guesses, onGuessClick }) => {\n  return (\n    <>\n      {guesses.sort((g1, g2) => g1.distance - g2.distance).map((guess, index) => {\n        let color = \"red\";\n\n        if (isSameOSMPlace(guess.data.address, level.data.address)) {\n          color = \"sunny\";\n        } else {\n          if (guess.distance < 30) {\n            color = \"blue\";\n          } else if (guess.distance < 100) {\n            color = \"green\";\n          } else if (guess.distance < 300) {\n            color = \"yellow\";\n          } else if (guess.distance < 1000) {\n            color = \"orange\";\n          }\n\n          if (index === 0) {\n            color += \"-dot\";\n          }\n        }\n\n        return (\n          <Marker\n            key={guess.id}\n            zIndex={guesses.length + 1 - index}\n            position={guess}\n            icon={`https://maps.google.com/mapfiles/ms/micons/${color}.png`}\n            onClick={() => onGuessClick(guess.id)}\n          >\n            {showInfoWindowId === guess.id && (\n              <InfoWindow onCloseClick={() => onGuessClick(undefined)}>\n                <OpenStreetMapsData data={guess.data}>\n                  <span>Distância: {guess.distance.toFixed(2)}km</span>\n                  <span>Palpite aos {guess.time_elapsed}s</span>\n                </OpenStreetMapsData>\n              </InfoWindow>\n            )}\n          </Marker>\n        )}\n      )}\n    </>\n  )\n}\n\nconst PlaceChooser: React.FC<PlaceChooserProps> = ({ level, canGuess, guesses, onConfirm, onNext }) => {\n  const [mapCenter, setMapCenter] = useState(DEFAULT_COORDINATES);\n  const [zoom, setZoom] = useState(DEFAULT_ZOOM);\n  const [guessCoords, setGuessCoords] = useState<google.maps.LatLngLiteral>();\n  const [showInfoWindowId, setShowInfoWindowId] = useState<number>();\n  const [guessInfo, setGuessInfo] = useState<GuessEntity>();\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const locale = (event.target as HTMLFormElement)[\"locale\"].value;\n    const encoded = encodeURIComponent(locale);\n\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/search.php?q=${encoded}&polygon_geojson=1&format=jsonv2`\n    )\n    const data = await response.json();\n\n    if (data && data[0]) {\n      setMapCenter({\n        lat: Number(data[0].lat),\n        lng: Number(data[0].lon),\n      });\n      const zoom = getZoom(\n        Number(data[0].boundingbox[0]),\n        Number(data[0].boundingbox[2]),\n        Number(data[0].boundingbox[1]),\n        Number(data[0].boundingbox[3]),\n      )\n      setZoom(zoom);\n    }\n  }\n\n  return (\n    <div className=\"place-chooser-container\">\n      <div className=\"search-place-form\">\n        <form onSubmit={handleSubmit}>\n          <input name=\"locale\" id=\"locale\" />\n          <Button>Pesquisar</Button>\n        </form>\n      </div>\n      <div className=\"place-chooser-map-container\">\n        <Map\n          coordinates={mapCenter}\n          zoom={zoom}\n          options={{ clickableIcons: false }}\n          onMapClick={e => {\n            setShowInfoWindowId(-1);\n            if (e.latLng && canGuess) {\n              setGuessCoords(e.latLng.toJSON());\n            }\n          }}\n        >\n          <PlaceChooserGuesses\n            showInfoWindowId={showInfoWindowId}\n            level={level}\n            guesses={guesses}\n            onGuessClick={setShowInfoWindowId}\n          />\n\n          {guessCoords && (\n            <PlaceChooserMarker\n              placeCoords={level}\n              showInfoWindow={showInfoWindowId === -1}\n              guessCoords={guessCoords}\n              onShowInfoWindow={show => setShowInfoWindowId(show ? -1 : undefined)}\n              onConfirm={async (marker: google.maps.LatLngLiteral, data: OSMData, distance: number) => {\n                setShowInfoWindowId(undefined);\n                const guess = await onConfirm(marker, data, distance);\n                setGuessInfo(guess);\n                setGuessCoords(undefined);\n              }}\n            />\n          )}\n\n          {guessInfo && (\n            <GuessInfo\n              level={level}\n              guess={guessInfo}\n              onClose={() => setGuessInfo(undefined)}\n              onNext={onNext}\n            />\n          )}\n        </Map>\n      </div>\n    </div>\n  )\n}\n\nexport const PlaceChooserModal: React.FC<PlaceChooserModalProps> = ({ show, canGuess, level, guesses, onHide, onConfirm, onNext }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <PlaceChooser level={level} canGuess={canGuess} guesses={guesses} onConfirm={onConfirm} onNext={onNext} />\n    </Modal>\n  );\n};\n","import React from \"react\";\n\nimport Button from './Button';\nimport Modal from './Modal';\n\ninterface HintsProps {\n  hints: HintEntity[]\n  hintsViewed: GameLevelHintEntity[]\n  show: boolean\n  onHide: () => void\n  onHintView: (hint: HintEntity) => void\n}\n\nconst Hints: React.FC<HintsProps> = ({ hints, hintsViewed, show, onHide, onHintView }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <ul className=\"hints\">\n        {hints.map((hint) => {\n          const hintView = hintsViewed.find(h => h.hint_id === hint.id);\n          if (hintView) {\n            return (\n              <li key={hint.id}>\n                <span>{hint.description} - Visto aos {hintView.time_elapsed}s</span>\n              </li>\n            );\n          }\n\n          return (\n            <li key={hint.id}>\n              <Button onClick={() => onHintView(hint)}>Mostrar</Button>\n            </li>\n          );\n        })}\n      </ul>\n    </Modal>\n  );\n};\n\nexport default Hints;\n","import React, { useRef, useState } from 'react';\nimport Button from './Button';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\nimport { PlaceChooserModal } from './PlaceChooser';\nimport Hints from './Hints';\n\nconst Level: React.FC<LevelProps> = ({ current, hints, guessLimit, startTime, guesses, hintsViewed, onGuess, onHintViewed, onTimePassed, onNext }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [hintsModalOpened, setHintsModalOpened] = useState(false);\n  const time = useRef(0); // Not ideal, but :(\n\n  const canGuess = guessLimit === 0 || guesses.length < guessLimit;\n\n  return (\n    <>\n      <div className=\"game-header\">\n        <div>\n          <Button onClick={() => setMapModalOpened((prev) => !prev)}>\n            Palpitar {guesses.length}/{guessLimit === 0 ? \"∞\" : guessLimit}\n          </Button>\n        </div>\n        <div>\n          <Stopwatch\n            key={current.id}\n            start={startTime}\n            onChange={total => time.current = total}\n            onStep={onTimePassed}\n          />\n        </div>\n        <div>\n          <Button onClick={() => setHintsModalOpened((prev) => !prev)}>\n            Dicas {hintsViewed.length}/{hints.length}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"game-body full-height\">\n        <StreetView\n          markers={[]}\n          guesses={guesses}\n          coordinates={current}\n        />\n      </div>\n\n      <PlaceChooserModal\n        show={mapModalOpened}\n        level={current}\n        canGuess={canGuess}\n        guesses={guesses}\n        onHide={() => setMapModalOpened(false)}\n        onConfirm={(marker, data, distance) => onGuess(marker, data, time.current, distance)}\n        onNext={onNext}\n      />\n\n      <Hints\n        hints={hints}\n        hintsViewed={hintsViewed}\n        show={hintsModalOpened}\n        onHide={() => setHintsModalOpened(false)}\n        onHintView={(hint: HintEntity) => onHintViewed(hint, time.current)}\n      />\n    </>\n  );\n};\n\nexport default Level;\n","import { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient('https://ddzlknjoifzrxzclbzop.supabase.co', process.env.REACT_APP_SUPABASE_KEY || '');\n\nexport const GUESSES_TABLE = \"guesses\";\nexport const BEST_GUESSES_TABLE = \"best_guesses\";\nexport const GAMES_TABLE = \"games\";\nexport const GAME_LEVELS_TABLE = \"game_levels\";\nexport const GAME_LEVEL_HINTS_TABLE = \"game_level_hints\";\nexport const LEVELS_TABLE = \"levels\";\nexport const PROFILES_TABLE = \"profiles\";\nexport const HINTS_TABLE = \"hints\";\n\nexport async function fetchOrCreate<T>(table: string, match: Record<string, unknown>, insert: Record<string, unknown>): Promise<T | null> {\n  let response = await supabase\n    .from(table)\n    .select()\n    .match(match);\n\n  if (response.data && response.data[0]) {\n    return response.data[0];\n  }\n\n  response = await supabase\n    .from(table)\n    .insert({...match, ...insert });\n\n  if (response.data && response.data[0]) {\n    return response.data[0];\n  }\n\n  return null;\n}\n\nexport default supabase;","import React, { FormEvent, useState } from \"react\";\nimport supabase from '../supabase';\nimport Button from \"./Button\";\n\nasync function loginOrRegister(email: string) {\n  const authData = { email: email, password: email };\n\n  const response = await supabase.auth.signIn(authData);\n  if (!response.error) {\n    return response;\n  }\n\n  return await supabase.auth.signUp(authData);\n}\n\nconst Login: React.FC<LoginProps> = ({ onAuth }) => {\n  const [guessLimit, setGuessLimit] = useState(window.localStorage.getItem(\"guess_limit\") || \"5\");\n\n  const onSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const userName = (event.target as HTMLFormElement)[\"user\"].value;\n    if (!userName) {\n      alert(\"Informe o nome do jogador\")\n      return;\n    }\n\n    const { user, session, error } = await loginOrRegister(userName + \"@lalalala.com\");\n\n    onAuth({ user, session, error }, Number(guessLimit));\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        <label htmlFor=\"user\">Nome do Jogador</label>\n        <input name=\"user\" id=\"user\" defaultValue={window.localStorage.getItem(\"user\") || \"\"} />\n      </div>\n      <div>\n        <label htmlFor=\"guess_limit\">Número de Palpites: {guessLimit === \"0\" ? \"Ilimitado\" : guessLimit}</label>\n        <input\n          type=\"range\"\n          name=\"guess_limit\"\n          id=\"guess_limit\"\n          defaultValue={guessLimit}\n          onInput={e => setGuessLimit((e.target as HTMLInputElement).value)}\n          min=\"0\"\n          max=\"10\"\n        />\n      </div>\n      <div>\n        <Button>Entrar</Button>\n      </div>\n    </form>\n  )\n}\n\nexport default Login;","import React, { useState } from \"react\"\nimport Button from \"./Button\";\nimport useDimensions from \"react-use-dimensions\";\nimport Modal from \"./Modal\";\n\n\ninterface Props {\n  levels: LevelEntity[]\n  bestGuesses: BestGuess[]\n  current: number\n  onLevelClick: (index: number) => void\n}\n\ninterface LevelsProps extends Props {\n  style?: React.CSSProperties\n}\n\nconst Levels: React.FC<LevelsProps> = ({ style, bestGuesses, current, levels, onLevelClick }) => {\n  return (\n    <>\n      {levels.map((level, index) => {\n        const bestGuess = bestGuesses.find(g => g.level.id === level.id);\n\n        return (\n          <Button\n            key={level.id}\n            className={`path-content-level full ${current === index ? \"current\" : \"\"}`}\n            onClick={() => onLevelClick(index)}\n            style={style}\n          >\n            <span className={`level-number ${!bestGuess || !bestGuess.guess ? \"never-tried\" : \"\"}`}>{index + 1}</span>\n\n            {bestGuess && bestGuess.guess && (\n              <div className=\"best-guess-path\">\n                <span className=\"best-guess-path-title\">Melhor palpite</span>\n                <span>Distância: {bestGuess.guess.distance.toFixed(2)} km</span>\n                <span>Dicas: {bestGuess.guess.hints_viewed}</span>\n              </div>\n            )}\n          </Button>\n        );\n      })}\n    </>\n  )\n}\n\nconst Path: React.FC<Props> = ({ levels, bestGuesses, current, onLevelClick }) => {\n  const [show, setShow] = useState(false);\n  const [ref, { width }] = useDimensions();\n\n  let divider = 2;\n  if (width > 2500) {\n    divider = 7;\n  } else if (width > 1800) {\n    divider = 6;\n  } else if (width > 1200) {\n    divider = 5;\n  } else if (width > 850) {\n    divider = 4;\n  } else if (width > 600) {\n    divider = 3;\n  }\n\n  return (\n    <>\n      <Button onClick={() => setShow(prev => !prev)}>\n        Níveis\n      </Button>\n\n      <Modal show={show} onHide={() => setShow(false)}>\n        <div className=\"levels-container\" ref={ref}>\n          <Levels\n            style={{\n              width: (width || 0) / divider - 20,\n              height: (width || 0) / divider - 20,\n              margin: 10,\n            }}\n            levels={levels}\n            bestGuesses={bestGuesses}\n            current={current}\n            onLevelClick={level => {\n              onLevelClick(level);\n              setShow(false);\n            }}\n          />\n        </div>\n\n        <div>Mais por vir...</div>\n      </Modal>\n    </>\n  )\n}\n\nexport default Path","import React from \"react\";\n\nconst Settings: React.FC = () => {\n  return null\n}\n\nexport default Settings;\n","import React, { useState, useEffect } from 'react';\n\nimport Level from './Level';\nimport supabase, { BEST_GUESSES_TABLE, fetchOrCreate, GAMES_TABLE, GAME_LEVELS_TABLE, GAME_LEVEL_HINTS_TABLE, GUESSES_TABLE, HINTS_TABLE, LEVELS_TABLE } from '../supabase';\nimport Login from './Login';\nimport { User } from '@supabase/supabase-js';\nimport Path from './Path';\nimport Button from './Button';\nimport { fisherYates } from '../utils';\nimport Settings from './Settings';\nimport { Link } from 'react-router-dom';\n\nconst Game: React.FC = () => {\n  const [auth, setAuth] = useState<AuthData>();\n  const [guessLimit, setGuessLimit] = useState<number>();\n\n  const [levels, setLevels] = useState<LevelsData>();\n\n  const fetchLevels = async () => {\n    const { data, error } = await supabase.from(LEVELS_TABLE).select().order(\"id\");\n    if (data) fisherYates(data);\n    setLevels({ data, error });\n  }\n\n  useEffect(() => {\n    if (!levels) fetchLevels()\n  }, [levels]);\n\n  if (!auth) {\n    return (\n      <div className=\"login-container\">\n        <Login\n          onAuth={(auth, guessLimit) => {\n            setAuth(auth);\n            setGuessLimit(guessLimit);\n          }}\n        />\n\n        <Link to=\"/leaderboard\" className=\"leaderboard-link\">\n          leaderboard\n        </Link>\n      </div>\n    );\n  }\n\n  if (!levels || !levels.data || !auth || !auth.user || !auth.session || !guessLimit) {\n    return (\n      <div className=\"login-container\">\n        <span>\n          Carregando ou erro kkkk\n        </span>\n      </div>\n    )\n  }\n\n  return <InternalGame auth={auth as FulfilledAuthData} guessLimit={guessLimit} levels={levels.data} />\n}\n\nconst InternalGame: React.FC<GameProps> = ({ auth, guessLimit, levels }) => {\n  const [game, setGame] = useState<GameEntity>();\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [bestGuesses, setBestGuesses] = useState<BestGuess[]>();\n\n  const fetchOrCreateGame = async (user: User, guessLimit: number) => {\n    const game = await fetchOrCreate<GameEntity>(\n      GAMES_TABLE,\n      { user_id: user.id, guess_limit: guessLimit },\n      {},\n    );\n    if (game) {\n      setGame(game);\n    }\n  }\n\n  const fetchBestGuesses = async (game: GameEntity, levels: LevelEntity[]) => {\n    const { data, error } = await supabase\n      .from(BEST_GUESSES_TABLE)\n      .select(`*, ${GAME_LEVELS_TABLE}!inner(*, ${LEVELS_TABLE}!inner(*))`)\n      .order(\"distance\")\n      .eq(`${GAME_LEVELS_TABLE}.game_id`, game.id);\n\n    if (data) {\n      setBestGuesses(levels.map(level => ({\n        level,\n        guess: data.find(d => d.game_levels.level_id === level.id)\n      })));\n    }\n  }\n\n  useEffect(() => {\n    if (!game) fetchOrCreateGame(auth.user, guessLimit);\n  }, [game, guessLimit, auth.user])\n\n  useEffect(() => {\n    if (game && levels) fetchBestGuesses(game, levels);\n  }, [game, levels])\n\n  if (!game) {\n    return null;\n  }\n\n  const level = levels[currentLevel];\n  if (!level) {\n    return <span>Nenhum nível aqui!</span>;\n  }\n\n  return (\n    <div className=\"game-container full\">\n      <VeryInternalGame\n        key={currentLevel}\n        auth={auth}\n        level={level}\n        game={game}\n        onGuess={() => fetchBestGuesses(game, levels)}\n        onNext={() => setCurrentLevel(prev => prev + 1)}\n      />\n\n      <div className=\"game-footer\">\n        <div>\n          <Settings />\n        </div>\n\n        <div>\n          <Path\n            levels={levels}\n            bestGuesses={bestGuesses || []}\n            current={currentLevel}\n            onLevelClick={setCurrentLevel}\n          />\n\n          <Button onClick={() => setCurrentLevel(prev => prev + 1)}>\n            Pular\n          </Button>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nconst VeryInternalGame: React.FC<{ auth: FulfilledAuthData, level: LevelEntity, game: GameEntity, onGuess: () => void, onNext: () => void }> = ({ auth, game, level, onGuess, onNext }) => {\n  const [gameLevel, setGameLevel] = useState<GameLevelEntity>();\n  const [guesses, setGuesses] = useState<GuessEntity[]>();\n  const [hints, setHints] = useState<HintEntity[]>();\n  const [hintsViewed, setHintsViewed] = useState<GameLevelHintEntity[]>();\n\n  const fetchOrCreateUserLevel = async (game: GameEntity, level: LevelEntity) => {\n    const gameLevel = await fetchOrCreate<GameLevelEntity>(\n      GAME_LEVELS_TABLE,\n      { game_id: game.id, level_id: level.id },\n      { time_elapsed: 0 },\n    )\n    if (gameLevel) {\n      setGameLevel(gameLevel);\n    }\n  }\n\n  const fetchGuesses = async (gameLevel: GameLevelEntity) => {\n    const { data, error } = await supabase.from(GUESSES_TABLE).select().match({ game_level_id: gameLevel.id });\n\n    if (data) {\n      setGuesses(data);\n    }\n  }\n\n  const fetchHintsViewed = async (gameLevel: GameLevelEntity) => {\n    const { data, error } = await supabase.from(GAME_LEVEL_HINTS_TABLE).select().match({ game_level_id: gameLevel.id });\n\n    if (data) {\n      setHintsViewed(data);\n    }\n  }\n\n  const fetchHints = async (level: LevelEntity) => {\n    const { data, error } = await supabase.from(HINTS_TABLE).select().match({ level_id: level.id });\n\n    if (data) {\n      setHints(data);\n    }\n  }\n\n  useEffect(() => {\n    if (!gameLevel) fetchOrCreateUserLevel(game, level);\n  }, [gameLevel, game, level]);\n\n  useEffect(() => {\n    if (gameLevel) {\n      fetchGuesses(gameLevel);\n      fetchHintsViewed(gameLevel);\n    }\n  }, [gameLevel]);\n\n  useEffect(() => {\n    if (level) fetchHints(level);\n  }, [level]);\n\n  if (!gameLevel) {\n    return null;\n  }\n\n  const handleTimePass = async (time: number) => {\n    await supabase\n      .from(GAME_LEVELS_TABLE)\n      .update({ time_elapsed: time })\n      .match({ game_id: game.id, level_id: level.id });\n  }\n\n  const handleHintView = async (hint: HintEntity, time: number) => {\n    const { data, error } = await supabase\n      .from(GAME_LEVEL_HINTS_TABLE)\n      .insert({ game_level_id: gameLevel.id, hint_id: hint.id, time_elapsed: time });\n\n    handleTimePass(time);\n\n    if (data && data[0]) {\n      setHintsViewed(prev => [...(prev || []), data[0]]);\n    }\n  }\n\n  const handleGuess = async (marker: google.maps.LatLngLiteral, osmData: OSMData, time: number, distance: number) => {\n    const { data, error } = await supabase\n      .from(GUESSES_TABLE)\n      .insert({\n        game_level_id: gameLevel.id,\n        distance: distance,\n        lat: marker.lat,\n        lng: marker.lng,\n        time_elapsed: time,\n        data: osmData,\n        hints_viewed: (hintsViewed || []).length\n      });\n\n    handleTimePass(time);\n\n    if (data && data[0]) {\n      setGuesses(prev => [...(prev || []), data[0]])\n      onGuess();\n      return data[0];\n    }\n\n    return null;\n  }\n\n  return (\n    <Level\n      current={level}\n      hints={hints || []}\n      guessLimit={game.guess_limit}\n      startTime={gameLevel.time_elapsed}\n      guesses={guesses || []}\n      hintsViewed={hintsViewed || []}\n      onNext={onNext}\n      onGuess={handleGuess}\n      onHintViewed={handleHintView}\n      onTimePassed={handleTimePass}\n    />\n  );\n};\n\nexport default Game;\n","import { PostgrestError } from \"@supabase/supabase-js\";\nimport supabase, { BEST_GUESSES_TABLE, GAMES_TABLE, GAME_LEVELS_TABLE, LEVELS_TABLE, PROFILES_TABLE } from \"../supabase\";\nimport React, { FormEvent, useEffect, useState } from \"react\";\nimport Button from \"./Button\";\n\nconst Leaderboard: React.FC = () => {\n  const [levels, setLevels] = useState<LevelEntity[]>();\n\n  const fetchLevels = async () => {\n    const { data, error } = await supabase.from(LEVELS_TABLE).select().order(\"id\");\n    if (data) {\n      setLevels(data);\n    }\n  }\n\n  useEffect(() => {\n    if (!levels) fetchLevels()\n  }, [levels]);\n\n  if (!levels) {\n    return null;\n  }\n\n  return <InternalLeaderboard levels={levels} />;\n}\n\nconst InternalLeaderboard: React.FC<{ levels: LevelEntity[] }> = ({ levels }) => {\n  const [data, setData] = useState<LeaderboardData[]>();\n  const [, setError] = useState<PostgrestError>();\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const guessLimit = Number((event.target as HTMLFormElement)[\"guess_limit\"].value || \"0\");\n    const levelId = Number((event.target as HTMLFormElement)[\"level_id\"].value || \"0\");\n\n    const { data, error } = await supabase\n      .from(BEST_GUESSES_TABLE)\n      .select(`*, ${GAME_LEVELS_TABLE}!inner(*, ${GAMES_TABLE}!inner(*, ${PROFILES_TABLE}!inner(*)))`)\n      .eq(`${GAME_LEVELS_TABLE}.${GAMES_TABLE}.guess_limit`, guessLimit)\n      .eq(`${GAME_LEVELS_TABLE}.level_id`, levelId)\n      .order('distance')\n      .limit(20);\n\n    if (error) {\n      setError(error);\n    }\n    if (data) {\n      setData(data);\n    }\n  }\n\n  return (\n    <div className=\"leaderboard\">\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"level_id\">\n            Nível\n          </label>\n          <select name=\"level_id\" id=\"level_id\" defaultValue={0}>\n            {levels.map(level => <option key={level.id} value={level.id}>{level.id}</option>)}\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"guess_limit\">\n            Número de palpites\n          </label>\n          <select name=\"guess_limit\" id=\"guess_limit\" defaultValue={5}>\n            <option value=\"0\">Ilimitado</option>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n            <option value=\"7\">7</option>\n            <option value=\"8\">8</option>\n            <option value=\"9\">9</option>\n            <option value=\"10\">10</option>\n          </select>\n        </div>\n\n        <div>\n          <Button>Confirm</Button>\n        </div>\n      </form>\n\n      {data && (\n        <div>\n          <table>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Nome</th>\n                <th>Distância</th>\n                <th>Tempo</th>\n                <th>Dicas Usadas</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {data.map((d, index) => (\n                <tr key={d.game_levels.games.profiles.name}>\n                  <td>{index + 1}</td>\n                  <td>{d.game_levels.games.profiles.name}</td>\n                  <td>{d.distance.toFixed(2)}</td>\n                  <td>{d.time_elapsed}</td>\n                  <td>{d.hints_viewed}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Leaderboard;\n","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport Game from './Game';\nimport Leaderboard from './Leaderboard';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"/leaderboard\" element={<Leaderboard />} />\n          <Route path=\"/street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"/map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <BrowserRouter basename='/tcc-learning'>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}