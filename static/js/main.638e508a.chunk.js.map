{"version":3,"sources":["click-2.wav","components/Button.tsx","components/Map.tsx","components/Modal.tsx","components/Flag.tsx","components/OpenStreetMapData.tsx","components/Spinner.tsx","components/Stopwatch.tsx","components/StreetView.tsx","components/Level.tsx","components/Path.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["click","Audio","clickSound","load","Button","children","props","onClick","event","play","DEFAULT_COORDINATES","lat","lng","getZoom","lat_a","lng_a","lat_b","lng_b","latRad","sin","Math","PI","radX2","log","max","min","latDif","abs","lngDif","latFrac","lngFrac","lngZoom","latZoom","Map","coordinates","zoom","options","onMapClick","mapContainerStyle","height","center","Modal","show","onHide","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","style","overlay","backgroundColor","undefined","content","inset","border","background","borderRadius","color","padding","Flag","name","code","alt","width","src","OpenStreetMapsData","data","className","distance","city","address","town","municipality","county","village","console","district","neighbourhood","suburb","city_district","state","region","country","country_code","toUpperCase","Spinner","borderColor","total","seconds","minutes","hours","days","Stopwatch","start","step","onChange","onStep","useStopwatch","autoStart","offsetTimestamp","Date","now","lastStepEmitted","useRef","useEffect","current","defaultCoordinates","StreetViewMarker","streetViewPanorama","useState","marker","setMarker","infoWindowRef","position","onLoad","e","infoWindow","open","ref","pixelOffset","google","maps","Size","StreetView","markers","guesses","showMarkers","setStreetViewPanorama","streetViewPanoramaOptions","clickToGo","pov","heading","pitch","visible","enableCloseButton","disableDefaultUI","map","guess","Number","lon","id","index","fetcher","url","fetch","then","r","json","Data","showConfirmButton","onConfirm","useSWR","suspense","error","PlaceChooserMarker","showInfoWindow","setShowInfoWindow","showDistance","setShowDistance","useMemo","mk1","mk2","rlat1","rlat2","difflat","difflon","asin","sqrt","cos","haversineDistance","onPositionChanged","onCloseClick","Suspense","fallback","toFixed","PlaceChooserGuesses","showInfoWindowId","setShowInfoWindowId","icon","timestamp","PlaceChooser","mapCenter","setMapCenter","setZoom","handleSubmit","preventDefault","locale","target","value","encoded","encodeURIComponent","response","boundingbox","onSubmit","clickableIcons","latLng","toJSON","PlaceChooserModal","Hints","hints","hintsViewed","onTipView","hint","hintView","find","h","description","Level","userData","onNext","onGuess","onHintViewed","onTimePassed","mapModalOpened","setMapModalOpened","hintsModalOpened","setHintsModalOpened","time","filter","viewed","prev","length","current_time","Levels","levels","onLevelClick","level","d","level_id","bestGuess","sort","g1","g2","hints_viewed","Path","setShow","useDimensions","divider","margin","supabase","createClient","process","InternalGame","onUpdate","setIndex","update","theNewUserData","updateState","from","match","handleHintViewed","hintIndex","JSON","parse","stringify","theHint","levelData","ud","push","handleNext","toIndex","nextIndex","handleGuess","osmData","theGuess","handleTimePassed","l","Game","setData","setLevels","setError","fetchLevels","select","order","user","eq","window","localStorage","setItem","confirm","insert","htmlFor","defaultValue","getItem","COORDINATES","App","useJsApiLoader","googleMapsApiKey","isLoaded","loadError","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","countries","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.638e508a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click-2.66336ee5.wav\";","import React from \"react\";\nimport clickSound from \"../click-2.wav\";\n\ntype Props = JSX.IntrinsicElements[\"button\"]\n\nconst click = new Audio(clickSound);\nclick.load();\n\nconst Button: React.FC<Props> = ({ children, ...props}) => {\n    const handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n        click.play();   \n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    }\n\n    return (\n        <button {...props} onClick={handleClick}>\n            {children}\n        </button>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface Props {\n  options?: google.maps.MapOptions\n  coordinates?: { lat: number; lng: number };\n  zoom?: number;\n  onMapClick?: ((e: google.maps.MapMouseEvent) => void) | undefined;\n}\n\nexport const DEFAULT_COORDINATES = {\n  lat: -13.8860709,\n  lng: -57.2789963,\n};\nexport const DEFAULT_ZOOM = 4.5;\n\nexport function getZoom(lat_a: number, lng_a: number, lat_b: number, lng_b: number): number {\n  function latRad(lat: number) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n    return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n  }\n\n  const latDif = Math.abs(latRad(lat_a) - latRad(lat_b))\n  const lngDif = Math.abs(lng_a - lng_b)\n\n  const latFrac = latDif / Math.PI\n  const lngFrac = lngDif / 360\n\n  const lngZoom = Math.log(1 / latFrac) / Math.log(2)\n  const latZoom = Math.log(1 / lngFrac) / Math.log(2)\n\n  return Math.min(lngZoom, latZoom)\n}\n\nconst Map: React.FC<Props> = ({ coordinates = DEFAULT_COORDINATES, zoom = DEFAULT_ZOOM, options = {}, children, onMapClick }) => {\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={zoom} options={options} onClick={onMapClick}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\ninterface Props {\n  show: boolean;\n  onHide: () => void;\n}\n\nconst Modal: React.FC<Props> = ({ children, show, onHide }) => {\n  return (\n    <ReactModal\n      isOpen={show}\n      onRequestClose={onHide}\n      shouldCloseOnEsc\n      shouldCloseOnOverlayClick\n      style={{\n        overlay: {\n          backgroundColor: undefined,\n        },\n        content: {\n          inset: '150px',\n          border: '1px solid #1d246e',\n          background: '#323dbb',\n          borderRadius: '12px',\n          color: 'white',\n          padding: '10px',\n        },\n      }}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React from \"react\";\nimport Flag from \"./Flag\";\n\nconst OpenStreetMapsData: React.FC<OpenStreetMapDataProps> = ({ data, className = \"\", distance, children }) => {\n  const city = data.address.city || data.address.town || data.address.municipality || data.address.county || data.address.village;\n  if (!city) {\n    console.log(data);\n  }\n\n  const district = data.address.neighbourhood || data.address.suburb || data.address.city_district;\n\n  return (\n    <div className={`data-container ${className}`}>\n      {district && <span>Bairro: {district}</span>}\n      {city && <span>Cidade: {city}</span>}\n      {data.address.state && <span>Estado: {data.address.state}</span>}\n      {data.address.region && <span>Região: {data.address.region}</span>}\n      {data.address.country && data.address.country_code && (\n        <span className=\"country\">\n          País: {data.address.country}\n          <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n        </span>\n      )}\n      {distance && (<span>Distância: {distance} km</span>)}\n      {children}\n    </div>\n  );\n}\n\nexport default OpenStreetMapsData;\n","import React from \"react\"\nimport CSS from 'csstype';\n\n\ninterface Props {\n    color?: CSS.Property.Color\n}\n\nconst Spinner: React.FC<Props> = ({ color = \"white\" }) => {\n    return (\n        <div className=\"spinner\" style={{ borderColor: color }} >\n            <div style={{ borderColor: color }} />\n            <div style={{ borderColor: color }} />\n        </div>\n    )\n}\n\nexport default Spinner","import React, { useEffect, useRef } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst total = (seconds: number, minutes: number, hours: number, days: number): number => seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24\n\ninterface Props {\n  start?: number\n  step?: number\n  onChange?: (total: number) => void\n  onStep?: (total: number) => void\n}\n\n\nconst Stopwatch: React.FC<Props> = ({ start = 0, step = 10, children, onChange, onStep }) => {\n  const { seconds, minutes, hours, days } = useStopwatch({\n    autoStart: true,\n    offsetTimestamp: new Date(Date.now() + start * 1000),\n  });\n  const lastStepEmitted = useRef<number>(start);\n\n  useEffect(() => {\n    const current = total(seconds, minutes, hours, days);\n\n    if (onChange) {\n      onChange(current)\n    }\n    if (onStep && current >= lastStepEmitted.current + step) {\n      onStep(current)\n      lastStepEmitted.current = current;\n    }\n\n  }, [onChange, seconds, minutes, hours, days, onStep, start, step])\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch-time shaking\">⏰</div>\n      <span className=\"stopwatch-time\">\n        {total(seconds, minutes, hours, days)}\n\n        {children}\n      </span>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React, { useRef, useState } from 'react';\nimport { GoogleMap, InfoWindow, Marker } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\nimport OpenStreetMapsData from './OpenStreetMapData';\n\ninterface Props {\n  markers?: LevelMarker[]\n  guesses?: Guess[]\n  coordinates?: google.maps.LatLngLiteral\n}\n\ninterface StreetViewMarkerProps {\n  streetViewPanorama: google.maps.StreetViewPanorama\n  coordinates?: google.maps.LatLngLiteral\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetViewMarker: React.FC<StreetViewMarkerProps> = ({ streetViewPanorama, coordinates, children }) => {\n  const [marker, setMarker] = useState<google.maps.Marker>();\n  const infoWindowRef = useRef<InfoWindow>(null);\n\n  if (!coordinates) {\n    return null;\n  }\n\n  return (\n    <Marker\n      position={coordinates}\n      onLoad={(e) => setMarker(e)}\n      onClick={() => {\n        if (infoWindowRef.current && infoWindowRef.current.state.infoWindow) {\n          infoWindowRef.current.state.infoWindow.open(streetViewPanorama);\n        }\n      }}\n    >\n      {children && marker && (\n        <InfoWindow\n          ref={infoWindowRef}\n          options={{pixelOffset: new google.maps.Size(0, -50, 'px', 'px')}}\n        >\n          {children}\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst StreetView: React.FC<Props> = ({ markers = [], guesses = [], coordinates = defaultCoordinates }) => {\n  const [showMarkers] = useState(false);\n  const [streetViewPanorama, setStreetViewPanorama] = useState<google.maps.StreetViewPanorama>();\n\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    clickToGo: true,\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n    disableDefaultUI: true,\n  };\n\n  return (\n    <>\n      <GoogleMap\n        mapContainerStyle={{ height: '100%' }}\n        center={coordinates}\n        zoom={10}\n      >\n        <StreetViewPanorama\n          onLoad={e => setStreetViewPanorama(e)}\n          options={streetViewPanoramaOptions}\n        />\n\n        {showMarkers && streetViewPanorama && (\n          <>\n            <StreetViewMarker\n              streetViewPanorama={streetViewPanorama}\n              coordinates={coordinates}\n            >\n              <span>This is the initial location</span>\n            </StreetViewMarker>\n\n            {guesses.map(guess => (\n              <StreetViewMarker\n                key={guess.id}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={{ lat: Number(guess.data.lat), lng: Number(guess.data.lon) }}\n              >\n                <OpenStreetMapsData data={guess.data} />\n              </StreetViewMarker>\n            ))}\n\n            {markers.map((marker, index) => (\n              <StreetViewMarker\n                key={index}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={marker.coordinates}\n              >\n                <span>{marker.data}</span>\n              </StreetViewMarker>\n            ))}\n          </>\n        )}\n      </GoogleMap>\n    </>\n  );\n};\n\nexport default StreetView;\n","import { InfoWindow, Marker } from '@react-google-maps/api';\nimport React, { FormEvent, useEffect, useMemo, useRef, useState } from 'react';\nimport useSWR from 'swr';\nimport _data from '../data.json';\nimport _userData from '../user-data.json';\nimport Button from './Button';\n\nimport Map, { DEFAULT_COORDINATES, DEFAULT_ZOOM, getZoom } from './Map';\nimport Modal from './Modal';\nimport OpenStreetMapsData from './OpenStreetMapData';\nimport Spinner from './Spinner';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst haversineDistance = (mk1: google.maps.LatLngLiteral, mk2: google.maps.LatLngLiteral) => {\n  const R = 3958.8; // Radius of the Earth in miles\n  const rlat1 = mk1.lat * (Math.PI / 180); // Convert degrees to radians\n  const rlat2 = mk2.lat * (Math.PI / 180); // Convert degrees to radians\n  const difflat = rlat2 - rlat1; // Radian difference (latitudes)\n  const difflon = (mk2.lng - mk1.lng) * (Math.PI / 180); // Radian difference (longitudes)\n\n  const d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n  return d;\n}\n\nconst Data: React.FC<{ position: google.maps.LatLngLiteral, showConfirmButton: boolean, onConfirm?: (data: OSMData) => void }> = ({ position, showConfirmButton, onConfirm, children }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  if (data.error || !data.address) {\n    return <span className='data-container'>Não consegui localizar, tente novamente.</span>;\n  }\n\n  return (\n    <>\n      <OpenStreetMapsData data={data}>\n        {children}\n      </OpenStreetMapsData>\n\n      {showConfirmButton && <Button onClick={() => onConfirm && onConfirm(data)}>Confirmar</Button>}\n    </>\n  );\n};\n\nconst PlaceChooserMarker: React.FC<{ coordinates: google.maps.LatLngLiteral, marker: google.maps.LatLngLiteral, onConfirm: (data: OSMData, distance: number) => void }> = ({ coordinates, marker, onConfirm }) => {\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\n  const [showDistance, setShowDistance] = useState(false);\n  const distance = useMemo(() => {\n    return haversineDistance(marker, coordinates);\n  }, [marker, coordinates]);\n\n  useEffect(() => {\n    setShowDistance(false);\n  }, [marker])\n\n  const handleConfirm = (data: OSMData) => {\n    setShowDistance(true);\n    onConfirm(data, distance);\n  }\n\n  return (\n    <Marker\n      position={marker}\n      onClick={() => setShowInfoWindow(true)}\n      onPositionChanged={() => setShowInfoWindow(true)}\n      onLoad={() => setShowInfoWindow(true)}\n    >\n      {showInfoWindow && (\n        <InfoWindow onCloseClick={() => setShowInfoWindow(false)}>\n          <React.Suspense fallback={<Spinner color=\"#323dbb\" />}>\n            <Data position={marker} showConfirmButton={!showDistance} onConfirm={handleConfirm}>\n              {showDistance && (\n                <span>Distância: {distance.toFixed(2)}km</span>\n              )}\n            </Data>\n          </React.Suspense>\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst PlaceChooserGuesses: React.FC<{ guesses: Guess[] }> = ({ guesses }) => {\n  const [showInfoWindowId, setShowInfoWindowId] = useState<number>();\n\n  return (\n    <>\n      {guesses.map(guess => {\n        const marker = { lat: Number(guess.data.lat), lng: Number(guess.data.lon) };\n        return (\n          <Marker\n            key={guess.id}\n            position={marker}\n            icon=\"https://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n            onClick={() => setShowInfoWindowId(guess.id)}\n          >\n            {showInfoWindowId === guess.id && (\n              <InfoWindow onCloseClick={() => setShowInfoWindowId(guess.id)}>\n                <React.Suspense fallback={<Spinner color=\"#323dbb\" />}>\n                  <Data position={marker} showConfirmButton={false}>\n                    <span>Distância: {guess.distance.toFixed(2)}km</span>\n                    <span>Palpite aos {guess.timestamp}s</span>\n                  </Data>\n                </React.Suspense>\n              </InfoWindow>\n            )}\n          </Marker>\n        )}\n      )}\n    </>\n  )\n}\n\nconst PlaceChooser: React.FC<PlaceChooserProps> = ({ coordinates, guesses, onConfirm }) => {\n  const [mapCenter, setMapCenter] = useState(DEFAULT_COORDINATES);\n  const [zoom, setZoom] = useState(DEFAULT_ZOOM);\n  const [marker, setMarker] = useState<google.maps.LatLngLiteral>();\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const locale = (event.target as HTMLFormElement)[\"locale\"].value;\n    const encoded = encodeURIComponent(locale);\n\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/search.php?q=${encoded}&polygon_geojson=1&format=jsonv2`\n    )\n    const data = await response.json();\n\n    if (data && data[0]) {\n      setMapCenter({\n        lat: Number(data[0].lat),\n        lng: Number(data[0].lon),\n      });\n      const zoom = getZoom(\n        Number(data[0].boundingbox[0]),\n        Number(data[0].boundingbox[2]),\n        Number(data[0].boundingbox[1]),\n        Number(data[0].boundingbox[3]),\n      )\n      setZoom(zoom);\n    }\n  }\n\n  return (\n    <div className=\"place-chooser-container\">\n      <div className=\"search-place-form\">\n        <form onSubmit={handleSubmit}>\n          <input name=\"locale\" id=\"locale\" />\n          <Button>Pesquisar</Button>\n        </form>\n      </div>\n      <div className=\"place-chooser-map-container\">\n        <Map\n          coordinates={mapCenter}\n          zoom={zoom}\n          options={{ clickableIcons: false }}\n          onMapClick={e => {\n            if (e.latLng) {\n              setMarker(e.latLng.toJSON());\n            }\n          }}\n        >\n          <PlaceChooserGuesses guesses={guesses} />\n\n          {marker && (\n            <PlaceChooserMarker\n              coordinates={coordinates}\n              marker={marker}\n              onConfirm={onConfirm} \n            />\n          )}\n        </Map>\n      </div>\n    </div>\n  )\n}\n\nconst PlaceChooserModal: React.FC<PlaceChooserModalProps> = ({ show, coordinates, guesses, onHide, onConfirm }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <PlaceChooser coordinates={coordinates} guesses={guesses} onConfirm={onConfirm} />\n    </Modal>\n  );\n};\n\ninterface HintsProps {\n  hints: typeof _data.levels[number][\"hints\"]\n  hintsViewed: typeof _userData[number][\"hints\"]\n  show: boolean\n  onHide: () => void\n  onTipView: (index: number) => void\n}\n\nconst Hints = ({ hints, hintsViewed, show, onHide, onTipView }: HintsProps) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <ul>\n        {hints.map((hint) => {\n          const hintView = hintsViewed.find(h => h.id === hint.id);\n          if (hintView) {\n            return <li key={hint.id}>{hint.description} - Visto aos {hintView.timestamp}s</li>;\n          }\n\n          return (\n            <li key={hint.id}>\n              <Button onClick={() => onTipView(hint.id)}>Mostrar</Button>\n            </li>\n          );\n        })}\n      </ul>\n    </Modal>\n  );\n};\n\ninterface Props {\n  current: Level;\n  userData?: UserLevel;\n  onNext: () => void\n  onGuess: (data: OSMData, time: number, distance: number) => void;\n  onHintViewed: (index: number, time: number) => void;\n  onTimePassed: (time: number) => void\n}\n\nconst Level: React.FC<Props> = ({ current, userData, onNext, onGuess, onHintViewed, onTimePassed }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [hintsModalOpened, setHintsModalOpened] = useState(false);\n  const time = useRef(0); // Not ideal, but :(\n\n  const hintsViewed = userData ? userData.hints.filter(h => h.viewed) : [];\n\n  return (\n    <div className=\"game-container full\">\n      <div className=\"game-header\">\n        <div>\n          <Button onClick={() => setMapModalOpened((prev) => !prev)}>Palpitar</Button>\n          <Button onClick={() => setHintsModalOpened((prev) => !prev)}>\n            Dicas {hintsViewed.length}/{current.hints.length}\n          </Button>\n        </div>\n\n        <div>\n          <Stopwatch\n            key={current.id}\n            start={userData?.current_time || 0}\n            onChange={total => time.current = total}\n            onStep={onTimePassed}\n          />\n        </div>\n\n        <div>\n          <Button onClick={() => onNext()}>Pular</Button>\n        </div>\n      </div>\n\n      <div className=\"game-body full-height\">\n        <StreetView\n          markers={current.markers}\n          guesses={userData?.guesses || []}\n          coordinates={current.coordinates}\n        />\n      </div>\n\n      <PlaceChooserModal\n        show={mapModalOpened}\n        coordinates={current.coordinates}\n        guesses={userData?.guesses || []}\n        onHide={() => setMapModalOpened(false)}\n        onConfirm={(data, distance) => {\n          onGuess(data, time.current, distance);\n        }}\n      />\n\n      <Hints\n        hints={current.hints}\n        hintsViewed={hintsViewed}\n        show={hintsModalOpened}\n        onHide={() => setHintsModalOpened(false)}\n        onTipView={(index: number) => onHintViewed(index, time.current)}\n      />\n    </div>\n  );\n};\n\nexport default Level;\n","import React, { useState } from \"react\"\nimport Button from \"./Button\";\nimport useDimensions from \"react-use-dimensions\";\nimport Modal from \"./Modal\";\n\n\ninterface Props {\n    levels: Level[]\n    userData: UserLevel[]\n    current: number\n    onLevelClick: (index: number) => void\n}\n\nconst Levels: React.FC<Props & { style?: React.CSSProperties }> = ({ style = {}, current, levels, userData, onLevelClick }) => {\n    return (\n        <>\n            {levels.map(level => {\n                const data = userData.find(d => d.level_id === level.id);\n\n                let bestGuess = null;\n                if (data && data.guesses) {\n                    bestGuess = data.guesses.sort((g1, g2) => g1.distance - g2.distance)[0];\n                }\n\n                return (\n                    <Button\n                        key={level.id}\n                        className={`path-content-level full ${current === level.id ? \"current\" : \"\"}`}\n                        onClick={() => onLevelClick(level.id)}\n                        style={style}\n                    >\n                        <span className={`level-number ${!bestGuess ? \"never-tried\" : \"\"}`}>{level.id}</span>\n\n                        {bestGuess && (\n                            <div className=\"best-guess-path\">\n                                <span className=\"best-guess-path-title\">Melhor palpite</span>\n                                <span>Distância: {bestGuess.distance.toFixed(2)} km</span>\n                                <span>Dicas: {bestGuess.hints_viewed}</span>\n                            </div>\n                        )}\n                    </Button>\n                );\n            })}\n        </>\n    )\n}\n\nconst Path: React.FC<Props> = ({ levels, userData, current, onLevelClick }) => {\n    const [show, setShow] = useState(false);\n    const [ref, { width }] = useDimensions();\n\n    let divider = 2;\n    if (width > 2500) {\n        divider = 7;\n    } else if (width > 1800) {\n        divider = 6;\n    } else if (width > 1200) {\n        divider = 5;\n    } else if (width > 850) {\n        divider = 4;\n    } else if (width > 600) {\n        divider = 3;\n    }\n\n    return (\n        <div className=\"path-container shown\">\n            <Button onClick={() => setShow(prev => !prev)}>\n                Níveis\n            </Button>\n\n            <Modal show={show} onHide={() => setShow(false)}>\n                <div className=\"levels-container\" ref={ref}>\n                    <Levels\n                        style={{\n                            width: (width || 0) / divider - 20,\n                            height: (width || 0) / divider - 20,\n                            margin: 10,\n                        }}\n                        levels={levels}\n                        userData={userData}\n                        current={current}\n                        onLevelClick={level => {\n                            onLevelClick(level);\n                            setShow(false);\n                        }}\n                    />\n                </div>\n\n                <div>Mais por vir...</div>\n            </Modal>\n        </div>\n    )\n}\n\nexport default Path","import React, { useState, FormEvent, useEffect } from 'react';\nimport { createClient, PostgrestError } from '@supabase/supabase-js'\n\nimport Level from './Level';\nimport Path from './Path';\nimport Button from './Button';\n\nconst supabase = createClient('https://ddzlknjoifzrxzclbzop.supabase.co', process.env.REACT_APP_SUPABASE_KEY || '');\n\nconst Game: React.FC = () => {\n  const [data, setData] = useState<UserData>();\n  const [levels, setLevels] = useState<Level[]>();\n  const [error, setError] = useState<PostgrestError>();\n\n  const fetchLevels = async () => {\n    const { data, error } = await supabase.from('levels').select().order(\"id\");\n\n    if (error) {\n      setError(error);\n    }\n    if (data) {\n      setLevels(data);\n    }\n  }\n\n  useEffect(() => {\n    if (data && !levels) {\n      fetchLevels();\n    }\n  }, [data, levels]);\n\n  const onSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const user = (event.target as HTMLFormElement)[\"user\"].value;\n\n    const { data, error } = await supabase.from('data').select().eq('user', user);\n    if (error) {\n      setError(error);\n      return;\n    }\n    if (data && data[0]) {\n      setData(data[0]);\n      window.localStorage.setItem(\"user\", user);\n      return;\n    }\n\n    if (window.confirm(\"No user, create?\")) {\n      const { data, error } = await supabase.from('data').insert([{ user, data: [] }]);\n\n      if (data && data[0]) {\n        setData(data[0]);\n        window.localStorage.setItem(\"user\", user);\n      }\n\n      if (error) {\n        setError(error);\n      }\n    }\n  }\n\n  if (error) {\n    return (\n      <div className=\"login-container\">\n        <pre>\n          {JSON.stringify(error, null, 2)}\n        </pre>\n\n        <Button onClick={() => setError(undefined)}>Retry</Button>\n      </div>\n    )\n  }\n\n  if (!data) {\n    return (\n      <div className=\"login-container\">\n        <form onSubmit={onSubmit}>\n          <div>\n            <label htmlFor=\"name\">User</label>\n            <input name=\"user\" id=\"user\" defaultValue={window.localStorage.getItem(\"user\") || \"\"} />\n          </div>\n          <div>\n            <Button>Entrar</Button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  if (!levels) {\n    return (\n      <div className=\"login-container\">\n        <span>\n          Loading levels...\n        </span>\n      </div>\n    )\n  }\n\n  return <InternalGame levels={levels} data={data} onUpdate={setData} />\n}\n\ninterface GameProps {\n  levels: Level[]\n  data: UserData\n  onUpdate: (data: UserData) => void\n}\n\nconst InternalGame: React.FC<GameProps> = ({ levels, data, onUpdate }) => {\n  const [index, setIndex] = useState(2);\n\n  const update = async (theNewUserData: UserData, updateState = true) => {\n    const { data } = await supabase.from<UserData>('data').update({ data: theNewUserData.data }).match({ id: theNewUserData.id });\n    if (data && data[0]) {\n      if (updateState) {\n        onUpdate(data[0]);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  const handleHintViewed = async (hintIndex: number, time: number) => {\n    const theNewUserData = JSON.parse(JSON.stringify(data)) as UserData;\n\n    const theHint: HintView = {\n      id: hintIndex,\n      viewed: true,\n      timestamp: time,\n    };\n    const levelData = theNewUserData.data.find(ud => ud.level_id === index);\n    if (levelData) {\n      levelData.hints.push(theHint);\n    } else {\n      theNewUserData.data.push({\n        \"id\": theNewUserData.data.length,\n        \"level_id\": index,\n        \"current_time\": 0,\n        \"hints\": [theHint],\n        \"guesses\": [],\n        \"completed\": false,\n      })\n    }\n\n    await update(theNewUserData);\n  }\n\n  const handleNext = async (toIndex?: number) => {\n    const theNewUserData = JSON.parse(JSON.stringify(data)) as UserData;\n\n    const nextIndex = toIndex || index + 1;\n    const levelData = theNewUserData.data.find(ud => ud.level_id === nextIndex);\n    if (!levelData) {\n      theNewUserData.data.push({\n        \"id\": theNewUserData.data.length,\n        \"level_id\": nextIndex,\n        \"current_time\": 0,\n        \"hints\": [],\n        \"guesses\": [],\n        \"completed\": false,\n      })\n    }\n\n    if (await update(theNewUserData)) {\n      setIndex((prev) => toIndex || prev + 1)\n    }\n  }\n\n  const handleGuess = async (osmData: OSMData, time: number, distance: number) => {\n    const theNewUserData = JSON.parse(JSON.stringify(data)) as UserData;\n\n    const levelData = theNewUserData.data.find(ud => ud.level_id === index);\n    const theGuess = {\n      \"id\": levelData ? levelData.guesses.length + 1 : 1,\n      \"distance\": distance,\n      \"timestamp\": time,\n      \"hints_viewed\": levelData ? levelData.hints.length : 0,\n      \"data\": osmData,\n    };\n    if (levelData) {\n      levelData.guesses.push(theGuess);\n    } else {\n      theNewUserData.data.push({\n        \"id\": theNewUserData.data.length,\n        \"level_id\": index,\n        \"current_time\": 0,\n        \"hints\": [],\n        \"guesses\": [theGuess],\n        \"completed\": false,\n      })\n    }\n\n    await update(theNewUserData);\n  }\n\n  const handleTimePassed = async (time: number) => {\n    const theNewUserData = JSON.parse(JSON.stringify(data)) as UserData;\n\n    const levelData = theNewUserData.data.find(ud => ud.level_id === index);\n    if (levelData) {\n      levelData.current_time = time;\n    } else {\n      theNewUserData.data.push({\n        \"id\": theNewUserData.data.length,\n        \"level_id\": index,\n        \"current_time\": time,\n        \"hints\": [],\n        \"guesses\": [],\n        \"completed\": false,\n      })\n    }\n\n    await update(theNewUserData, false);\n  }\n\n  return (\n    <div className=\"full\">\n      <Level\n        // eslint-disable-next-line\n        current={levels.find(l => l.id === index)!}\n        userData={data.data.find(ud => ud.level_id === index)}\n        onNext={handleNext}\n        onGuess={handleGuess}\n        onHintViewed={handleHintViewed}\n        onTimePassed={handleTimePassed}\n      />\n\n      <Path\n        levels={levels}\n        userData={data.data}\n        current={index}\n        onLevelClick={handleNext}\n      />\n    </div>\n  );\n};\n\nexport default Game;\n","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport Game from './Game';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}