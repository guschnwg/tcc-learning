{"version":3,"sources":["components/Flag.tsx","components/Map.tsx","components/StreetView.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Flag","name","code","alt","height","width","src","defaultCoordinates","lat","lng","Map","coordinates","mapContainerStyle","center","zoom","StreetView","streetViewPanoramaOptions","position","pov","heading","pitch","visible","options","Game","useState","index","setIndex","modalOpened","setModalOpened","useStopwatch","autoStart","seconds","minutes","hours","days","isRunning","start","pause","current","data","levels","className","onClick","prev","countries","getName","city","country","style","fontSize","time","Date","setSeconds","getSeconds","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","COORDINATES","App","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.30d1fe08.chunk.js","sourcesContent":["interface FlagProps {\n  name: string\n  code: string\n}\n\nexport default function Flag({ name, code }: FlagProps) {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}/>\n  )\n}","import { GoogleMap } from '@react-google-maps/api';\n\ninterface MapProps {\n  coordinates?: { lat: number, lng: number }\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627\n}\n\nexport default function Map({\n  coordinates = defaultCoordinates,\n}: MapProps) {\n  return (\n    <GoogleMap\n      mapContainerStyle={{ height: '100%' }}\n      center={coordinates}\n      zoom={10}\n    />\n  )\n}\n","import { GoogleMap } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\n\ninterface MapProps {\n  coordinates?: { lat: number, lng: number }\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627\n}\n\nexport default function StreetView({\n  coordinates = defaultCoordinates,\n}: MapProps) {\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    position: coordinates,\n    pov: {heading: 0, pitch: 0},\n    zoom: 1,\n    visible: true,\n  };\n\n  return (\n    <GoogleMap\n      mapContainerStyle={{ height: '100%' }}\n      center={coordinates}\n      zoom={10}\n    >\n      <StreetViewPanorama options={streetViewPanoramaOptions} />\n    </GoogleMap>\n  )\n}\n","import { useState } from 'react';\nimport countries from 'i18n-iso-countries';\nimport ReactModal from 'react-modal';\nimport { useStopwatch, useTimer } from 'react-timer-hook';\n\nimport data from '../data.json';\n\nimport Flag from './Flag';\nimport Map from './Map';\nimport StreetView from './StreetView';\n\n\nexport default function Game() {\n  const [index, setIndex] = useState(0);\n  const [modalOpened, setModalOpened] = useState(false);\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n  } = useStopwatch({ autoStart: true });\n\n\n  const current = data.levels[index];\n\n  return (\n    <div className=\"game-container full\" key={index}>\n      <StreetView\n        coordinates={current.coordinates}\n      />\n\n      <div className=\"country-flag\">\n        <button onClick={() => setModalOpened(prev => !prev)}>\n          <Flag\n            name={countries.getName(current.city.country, \"pt\")}\n            code={current.city.country}\n          />\n        </button>\n\n        <button onClick={() => setIndex(prev => prev + 1)}>\n          Next\n        </button>\n\n        <div style={{ fontSize: '100px' }}>\n          <span>{seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60* 24}</span>\n        </div>\n        <p>{isRunning ? 'Running' : 'Not running'}</p>\n        <button onClick={start}>Start</button>\n        <button onClick={pause}>Pause</button>\n        <button onClick={() => {\n          // Restarts to 5 minutes timer\n          const time = new Date();\n          time.setSeconds(time.getSeconds() + 300);\n        }}>Restart</button>\n      </div>\n\n      <ReactModal\n        isOpen={modalOpened}\n        onRequestClose={() => setModalOpened(false)}\n        shouldCloseOnEsc\n        shouldCloseOnOverlayClick\n      >\n        <div className=\"full\">\n          <div className=\"full\">\n            <Map\n              coordinates={current.coordinates}\n            />\n          </div>\n        </div>\n      </ReactModal>\n    </div>\n  );\n}","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport Game from './Game';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 }\n\nfunction App() {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY!,\n  })\n\n  if (!isLoaded) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <Link to=\"/\">Game</Link>\n        <Link to=\"/street-view\">Street View</Link>\n        <Link to=\"/map\">Map</Link>\n      </nav>\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from \"i18n-iso-countries/langs/pt.json\"\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(document.getElementById('modal-container')!);\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}