{"version":3,"sources":["click-2.wav","components/Button.tsx","components/Stopwatch.tsx","components/Flag.tsx","components/OpenStreetMapData.tsx","components/StreetView.tsx","components/Map.tsx","components/Modal.tsx","components/Spinner.tsx","components/PlaceChooser.tsx","components/Hints.tsx","components/Level.tsx","components/Path.tsx","supabase.ts","components/Game.tsx","components/Leaderboard.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["click","Audio","clickSound","load","Button","children","props","onClick","event","play","total","seconds","minutes","hours","days","Stopwatch","start","step","onChange","onStep","useStopwatch","autoStart","offsetTimestamp","Date","now","lastStepEmitted","useRef","useEffect","current","className","Flag","name","code","alt","height","width","src","OpenStreetMapsData","data","distance","city","address","town","municipality","county","village","console","log","district","neighbourhood","suburb","city_district","state","region","country","country_code","toUpperCase","defaultCoordinates","lat","lng","StreetViewMarker","streetViewPanorama","coordinates","useState","marker","setMarker","infoWindowRef","position","onLoad","e","infoWindow","open","ref","options","pixelOffset","google","maps","Size","StreetView","markers","guesses","showMarkers","setStreetViewPanorama","streetViewPanoramaOptions","clickToGo","pov","heading","pitch","zoom","visible","enableCloseButton","disableDefaultUI","mapContainerStyle","center","map","guess","Number","lon","id","index","DEFAULT_COORDINATES","getZoom","lat_a","lng_a","lat_b","lng_b","latRad","sin","Math","PI","radX2","max","min","latDif","abs","lngDif","latFrac","lngFrac","lngZoom","latZoom","Map","onMapClick","Modal","show","onHide","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","style","overlay","backgroundColor","undefined","content","inset","border","background","borderRadius","color","padding","Spinner","borderColor","fetcher","url","fetch","then","r","json","Data","showConfirmButton","onConfirm","useSWR","suspense","error","PlaceChooserMarker","placeCoords","guessCoords","showInfoWindow","onShowInfoWindow","showDistance","setShowDistance","ready","setReady","useMemo","mk1","mk2","rlat1","rlat2","difflat","difflon","asin","sqrt","cos","haversineDistance","zIndex","onPositionChanged","onCloseClick","Suspense","fallback","toFixed","PlaceChooserGuesses","showInfoWindowId","onGuessClick","sort","g1","g2","length","icon","timestamp","PlaceChooser","canGuess","mapCenter","setMapCenter","setZoom","setGuessCoords","setShowInfoWindowId","handleSubmit","preventDefault","locale","target","value","encoded","encodeURIComponent","response","boundingbox","onSubmit","clickableIcons","latLng","toJSON","PlaceChooserModal","Hints","hints","hintsViewed","onTipView","hint","hintView","find","h","description","Level","guessLimit","userData","onNext","onGuess","onHintViewed","onTimePassed","mapModalOpened","setMapModalOpened","hintsModalOpened","setHintsModalOpened","time","filter","viewed","prev","current_time","Levels","levels","onLevelClick","level","d","level_id","bestGuess","hints_viewed","Path","setShow","useDimensions","divider","margin","supabase","createClient","process","USER_DATA_TABLE","InternalGame","onUpdate","setIndex","update","theNewUserData","updateState","from","match","handleHintViewed","hintIndex","JSON","parse","stringify","theHint","levelData","ud","push","handleNext","toIndex","nextIndex","handleGuess","osmData","theGuess","handleTimePassed","l","guess_limit","Game","setData","setLevels","setError","window","localStorage","getItem","guessesNumber","setGuessesNumber","fetchLevels","select","order","user","alert","eq","setItem","toString","confirm","insert","htmlFor","defaultValue","hidden","type","onInput","Leaderboard","udd","levelId","reduce","agg","crr","COORDINATES","App","useJsApiLoader","googleMapsApiKey","isLoaded","loadError","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","countries","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.cfe9d5ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click-2.66336ee5.wav\";","import React from \"react\";\nimport clickSound from \"../click-2.wav\";\n\ntype Props = JSX.IntrinsicElements[\"button\"]\n\nconst click = new Audio(clickSound);\nclick.load();\n\nconst Button: React.FC<Props> = ({ children, ...props}) => {\n    const handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n        click.play();   \n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    }\n\n    return (\n        <button {...props} onClick={handleClick}>\n            {children}\n        </button>\n    )\n}\n\nexport default Button;","import React, { useEffect, useRef } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst total = (seconds: number, minutes: number, hours: number, days: number): number => seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24\n\ninterface Props {\n  start?: number\n  step?: number\n  onChange?: (total: number) => void\n  onStep?: (total: number) => void\n}\n\n\nconst Stopwatch: React.FC<Props> = ({ start = 0, step = 10, children, onChange, onStep }) => {\n  const { seconds, minutes, hours, days } = useStopwatch({\n    autoStart: true,\n    offsetTimestamp: new Date(Date.now() + start * 1000),\n  });\n  const lastStepEmitted = useRef<number>(start);\n\n  useEffect(() => {\n    const current = total(seconds, minutes, hours, days);\n\n    if (onChange) {\n      onChange(current)\n    }\n    if (onStep && current >= lastStepEmitted.current + step) {\n      onStep(current)\n      lastStepEmitted.current = current;\n    }\n\n  }, [onChange, seconds, minutes, hours, days, onStep, start, step])\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch-time shaking\">⏰</div>\n      <span className=\"stopwatch-time\">\n        {total(seconds, minutes, hours, days)}\n\n        {children}\n      </span>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React from \"react\";\nimport Flag from \"./Flag\";\n\nconst OpenStreetMapsData: React.FC<OpenStreetMapDataProps> = ({ data, className = \"\", distance, children }) => {\n  const city = data.address.city || data.address.town || data.address.municipality || data.address.county || data.address.village;\n  if (!city) {\n    console.log(data);\n  }\n\n  const district = data.address.neighbourhood || data.address.suburb || data.address.city_district;\n\n  return (\n    <div className={`data-container ${className}`}>\n      {district && <span>Bairro: {district}</span>}\n      {city && <span>Cidade: {city}</span>}\n      {data.address.state && <span>Estado: {data.address.state}</span>}\n      {data.address.region && <span>Região: {data.address.region}</span>}\n      {data.address.country && data.address.country_code && (\n        <span className=\"country\">\n          País: {data.address.country}\n          <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n        </span>\n      )}\n      {distance && (<span>Distância: {distance} km</span>)}\n      {children}\n    </div>\n  );\n}\n\nexport default OpenStreetMapsData;\n","import React, { useRef, useState } from 'react';\nimport { GoogleMap, InfoWindow, Marker } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\nimport OpenStreetMapsData from './OpenStreetMapData';\n\ninterface Props {\n  markers?: LevelMarker[]\n  guesses?: Guess[]\n  coordinates?: google.maps.LatLngLiteral\n}\n\ninterface StreetViewMarkerProps {\n  streetViewPanorama: google.maps.StreetViewPanorama\n  coordinates?: google.maps.LatLngLiteral\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetViewMarker: React.FC<StreetViewMarkerProps> = ({ streetViewPanorama, coordinates, children }) => {\n  const [marker, setMarker] = useState<google.maps.Marker>();\n  const infoWindowRef = useRef<InfoWindow>(null);\n\n  if (!coordinates) {\n    return null;\n  }\n\n  return (\n    <Marker\n      position={coordinates}\n      onLoad={(e) => setMarker(e)}\n      onClick={() => {\n        if (infoWindowRef.current && infoWindowRef.current.state.infoWindow) {\n          infoWindowRef.current.state.infoWindow.open(streetViewPanorama);\n        }\n      }}\n    >\n      {children && marker && (\n        <InfoWindow\n          ref={infoWindowRef}\n          options={{pixelOffset: new google.maps.Size(0, -50, 'px', 'px')}}\n        >\n          {children}\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst StreetView: React.FC<Props> = ({ markers = [], guesses = [], coordinates = defaultCoordinates }) => {\n  const [showMarkers] = useState(false);\n  const [streetViewPanorama, setStreetViewPanorama] = useState<google.maps.StreetViewPanorama>();\n\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    clickToGo: true,\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n    disableDefaultUI: true,\n  };\n\n  return (\n    <>\n      <GoogleMap\n        mapContainerStyle={{ height: '100%' }}\n        center={coordinates}\n        zoom={10}\n      >\n        <StreetViewPanorama\n          onLoad={e => setStreetViewPanorama(e)}\n          options={streetViewPanoramaOptions}\n        />\n\n        {showMarkers && streetViewPanorama && (\n          <>\n            <StreetViewMarker\n              streetViewPanorama={streetViewPanorama}\n              coordinates={coordinates}\n            >\n              <span>This is the initial location</span>\n            </StreetViewMarker>\n\n            {guesses.map(guess => (\n              <StreetViewMarker\n                key={guess.id}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={{ lat: Number(guess.data.lat), lng: Number(guess.data.lon) }}\n              >\n                <OpenStreetMapsData data={guess.data} />\n              </StreetViewMarker>\n            ))}\n\n            {markers.map((marker, index) => (\n              <StreetViewMarker\n                key={index}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={marker.coordinates}\n              >\n                <span>{marker.data}</span>\n              </StreetViewMarker>\n            ))}\n          </>\n        )}\n      </GoogleMap>\n    </>\n  );\n};\n\nexport default StreetView;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface Props {\n  options?: google.maps.MapOptions\n  coordinates?: { lat: number; lng: number };\n  zoom?: number;\n  onMapClick?: ((e: google.maps.MapMouseEvent) => void) | undefined;\n}\n\nexport const DEFAULT_COORDINATES = {\n  lat: -13.8860709,\n  lng: -57.2789963,\n};\nexport const DEFAULT_ZOOM = 4.5;\n\nexport function getZoom(lat_a: number, lng_a: number, lat_b: number, lng_b: number): number {\n  function latRad(lat: number) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n    return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n  }\n\n  const latDif = Math.abs(latRad(lat_a) - latRad(lat_b))\n  const lngDif = Math.abs(lng_a - lng_b)\n\n  const latFrac = latDif / Math.PI\n  const lngFrac = lngDif / 360\n\n  const lngZoom = Math.log(1 / latFrac) / Math.log(2)\n  const latZoom = Math.log(1 / lngFrac) / Math.log(2)\n\n  return Math.min(lngZoom, latZoom)\n}\n\nconst Map: React.FC<Props> = ({ coordinates = DEFAULT_COORDINATES, zoom = DEFAULT_ZOOM, options = {}, children, onMapClick }) => {\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={zoom} options={options} onClick={onMapClick}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\ninterface Props {\n  show: boolean;\n  onHide: () => void;\n}\n\nconst Modal: React.FC<Props> = ({ children, show, onHide }) => {\n  return (\n    <ReactModal\n      isOpen={show}\n      onRequestClose={onHide}\n      shouldCloseOnEsc\n      shouldCloseOnOverlayClick\n      style={{\n        overlay: {\n          backgroundColor: undefined,\n        },\n        content: {\n          inset: '150px',\n          border: '1px solid #1d246e',\n          background: '#323dbb',\n          borderRadius: '12px',\n          color: 'white',\n          padding: '10px',\n        },\n      }}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from \"react\"\nimport CSS from 'csstype';\n\n\ninterface Props {\n    color?: CSS.Property.Color\n}\n\nconst Spinner: React.FC<Props> = ({ color = \"white\" }) => {\n    return (\n        <div className=\"spinner\" style={{ borderColor: color }} >\n            <div style={{ borderColor: color }} />\n            <div style={{ borderColor: color }} />\n        </div>\n    )\n}\n\nexport default Spinner","import React, { FormEvent, useEffect, useMemo, useState } from 'react';\nimport { InfoWindow, Marker } from '@react-google-maps/api';\nimport useSWR from 'swr';\nimport Button from './Button';\n\nimport Map, { DEFAULT_COORDINATES, DEFAULT_ZOOM, getZoom } from './Map';\nimport Modal from './Modal';\nimport OpenStreetMapsData from './OpenStreetMapData';\nimport Spinner from './Spinner';\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst haversineDistance = (mk1: google.maps.LatLngLiteral, mk2: google.maps.LatLngLiteral) => {\n  const R = 3958.8; // Radius of the Earth in miles\n  const rlat1 = mk1.lat * (Math.PI / 180); // Convert degrees to radians\n  const rlat2 = mk2.lat * (Math.PI / 180); // Convert degrees to radians\n  const difflat = rlat2 - rlat1; // Radian difference (latitudes)\n  const difflon = (mk2.lng - mk1.lng) * (Math.PI / 180); // Radian difference (longitudes)\n\n  const d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n  return d;\n}\n\nconst Data: React.FC<{ position: google.maps.LatLngLiteral, showConfirmButton: boolean, onConfirm?: (data: OSMData) => void }> = ({ position, showConfirmButton, onConfirm, children }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  if (data.error || !data.address) {\n    return <span className='data-container'>Não consegui localizar, tente novamente.</span>;\n  }\n\n  return (\n    <>\n      <OpenStreetMapsData data={data}>\n        {children}\n      </OpenStreetMapsData>\n\n      {showConfirmButton && <Button onClick={() => onConfirm && onConfirm(data)}>Confirmar</Button>}\n    </>\n  );\n};\n\nconst PlaceChooserMarker: React.FC<PlaceChooserMarkerProps> = ({ placeCoords, guessCoords, showInfoWindow, onShowInfoWindow, onConfirm }) => {\n  const [showDistance, setShowDistance] = useState(false);\n  const [ready, setReady] = useState(false);\n  const distance = useMemo(() => {\n    return haversineDistance(guessCoords, placeCoords);\n  }, [guessCoords, placeCoords]);\n\n  useEffect(() => {\n    setShowDistance(false);\n  }, [guessCoords])\n\n  const handleConfirm = (data: OSMData) => {\n    setShowDistance(true);\n    onConfirm(guessCoords, data, distance);\n  }\n\n  return (\n    <Marker\n      position={guessCoords}\n      zIndex={0}\n      onClick={() => onShowInfoWindow(true)}\n      onPositionChanged={() => onShowInfoWindow(true)}\n      onLoad={() => setReady(true)}\n    >\n      {showInfoWindow && ready && (\n        <InfoWindow onCloseClick={() => onShowInfoWindow(false)}>\n          <React.Suspense fallback={<Spinner color=\"#323dbb\" />}>\n            <Data position={guessCoords} showConfirmButton={!showDistance} onConfirm={handleConfirm}>\n              {showDistance && (\n                <span>Distância: {distance.toFixed(2)}km</span>\n              )}\n            </Data>\n          </React.Suspense>\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst PlaceChooserGuesses: React.FC<{ showInfoWindowId?: number, guesses: Guess[], onGuessClick: (id?: number) => void }> = ({ showInfoWindowId, guesses, onGuessClick }) => {\n  return (\n    <>\n      {guesses.sort((g1, g2) => g1.distance - g2.distance).map((guess, index) => {\n        let color = \"red\";\n        if (guess.distance < 30) {\n          color = \"blue\";\n        } else if (guess.distance < 100) {\n          color = \"green\";\n        } else if (guess.distance < 300) {\n          color = \"yellow\";\n        } else if (guess.distance < 1000) {\n          color = \"orange\";\n        }\n\n        if (index === 0) {\n          color += \"-dot\";\n        }\n\n        return (\n          <Marker\n            key={guess.id}\n            zIndex={guesses.length + 1 - index}\n            position={guess.coordinates}\n            icon={`https://maps.google.com/mapfiles/ms/icons/${color}.png`}\n            onClick={() => onGuessClick(guess.id)}\n          >\n            {showInfoWindowId === guess.id && (\n              <InfoWindow onCloseClick={() => onGuessClick(undefined)}>\n                <OpenStreetMapsData data={guess.data}>\n                  <span>Distância: {guess.distance.toFixed(2)}km</span>\n                  <span>Palpite aos {guess.timestamp}s</span>\n                </OpenStreetMapsData>\n              </InfoWindow>\n            )}\n          </Marker>\n        )}\n      )}\n    </>\n  )\n}\n\nconst PlaceChooser: React.FC<PlaceChooserProps> = ({ placeCoords, canGuess, guesses, onConfirm }) => {\n  const [mapCenter, setMapCenter] = useState(DEFAULT_COORDINATES);\n  const [zoom, setZoom] = useState(DEFAULT_ZOOM);\n  const [guessCoords, setGuessCoords] = useState<google.maps.LatLngLiteral>();\n  const [showInfoWindowId, setShowInfoWindowId] = useState<number>();\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const locale = (event.target as HTMLFormElement)[\"locale\"].value;\n    const encoded = encodeURIComponent(locale);\n\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/search.php?q=${encoded}&polygon_geojson=1&format=jsonv2`\n    )\n    const data = await response.json();\n\n    if (data && data[0]) {\n      setMapCenter({\n        lat: Number(data[0].lat),\n        lng: Number(data[0].lon),\n      });\n      const zoom = getZoom(\n        Number(data[0].boundingbox[0]),\n        Number(data[0].boundingbox[2]),\n        Number(data[0].boundingbox[1]),\n        Number(data[0].boundingbox[3]),\n      )\n      setZoom(zoom);\n    }\n  }\n\n  return (\n    <div className=\"place-chooser-container\">\n      <div className=\"search-place-form\">\n        <form onSubmit={handleSubmit}>\n          <input name=\"locale\" id=\"locale\" />\n          <Button>Pesquisar</Button>\n        </form>\n      </div>\n      <div className=\"place-chooser-map-container\">\n        <Map\n          coordinates={mapCenter}\n          zoom={zoom}\n          options={{ clickableIcons: false }}\n          onMapClick={e => {\n            setShowInfoWindowId(-1);\n            if (e.latLng && canGuess) {\n              setGuessCoords(e.latLng.toJSON());\n            }\n          }}\n        >\n          <PlaceChooserGuesses\n            showInfoWindowId={showInfoWindowId}\n            guesses={guesses}\n            onGuessClick={setShowInfoWindowId}\n          />\n\n          {guessCoords && (\n            <PlaceChooserMarker\n              placeCoords={placeCoords}\n              showInfoWindow={showInfoWindowId === -1}\n              guessCoords={guessCoords}\n              onShowInfoWindow={show => setShowInfoWindowId(show ? -1 : undefined)}\n              onConfirm={async (marker: google.maps.LatLngLiteral, data: OSMData, distance: number) => {\n                const guess = await onConfirm(marker, data, distance);\n                setShowInfoWindowId(guess.id);\n                setGuessCoords(undefined);\n              }}\n            />\n          )}\n        </Map>\n      </div>\n    </div>\n  )\n}\n\nexport const PlaceChooserModal: React.FC<PlaceChooserModalProps> = ({ show, canGuess, coordinates, guesses, onHide, onConfirm }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <PlaceChooser placeCoords={coordinates} canGuess={canGuess} guesses={guesses} onConfirm={onConfirm} />\n    </Modal>\n  );\n};\n","import React from \"react\";\n\nimport Button from './Button';\nimport Modal from './Modal';\n\ninterface HintsProps {\n  hints: Hint[]\n  hintsViewed: HintView[]\n  show: boolean\n  onHide: () => void\n  onTipView: (index: number) => void\n}\n\nconst Hints: React.FC<HintsProps> = ({ hints, hintsViewed, show, onHide, onTipView }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <ul>\n        {hints.map((hint) => {\n          const hintView = hintsViewed.find(h => h.id === hint.id);\n          if (hintView) {\n            return <li key={hint.id}>{hint.description} - Visto aos {hintView.timestamp}s</li>;\n          }\n\n          return (\n            <li key={hint.id}>\n              <Button onClick={() => onTipView(hint.id)}>Mostrar</Button>\n            </li>\n          );\n        })}\n      </ul>\n    </Modal>\n  );\n};\n\nexport default Hints;\n","import React, { useRef, useState } from 'react';\nimport Button from './Button';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\nimport { PlaceChooserModal } from './PlaceChooser';\nimport Hints from './Hints';\n\nconst Level: React.FC<LevelProps> = ({ current, guessLimit, userData, onNext, onGuess, onHintViewed, onTimePassed }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [hintsModalOpened, setHintsModalOpened] = useState(false);\n  const time = useRef(0); // Not ideal, but :(\n\n  const guesses = userData?.guesses || [];\n  const canGuess = guessLimit === 0 || guesses.length < guessLimit;\n  const hintsViewed = userData ? userData.hints.filter(h => h.viewed) : [];\n\n  return (\n    <div className=\"game-container full\">\n      <div className=\"game-header\">\n        <div>\n          <Button onClick={() => setMapModalOpened((prev) => !prev)}>\n            Palpitar {guesses.length}/{guessLimit === 0 ? \"∞\" : guessLimit}\n          </Button>\n          <Button onClick={() => setHintsModalOpened((prev) => !prev)}>\n            Dicas {hintsViewed.length}/{current.hints.length}\n          </Button>\n        </div>\n\n        <div>\n          <Stopwatch\n            key={current.id}\n            start={userData?.current_time || 0}\n            onChange={total => time.current = total}\n            onStep={onTimePassed}\n          />\n        </div>\n\n        <div>\n          <Button onClick={() => onNext()}>Pular</Button>\n        </div>\n      </div>\n\n      <div className=\"game-body full-height\">\n        <StreetView\n          markers={current.markers}\n          guesses={guesses}\n          coordinates={current.coordinates}\n        />\n      </div>\n\n      <PlaceChooserModal\n        show={mapModalOpened}\n        coordinates={current.coordinates}\n        canGuess={canGuess}\n        guesses={guesses}\n        onHide={() => setMapModalOpened(false)}\n        onConfirm={(marker, data, distance) => onGuess(marker, data, time.current, distance)}\n      />\n\n      <Hints\n        hints={current.hints}\n        hintsViewed={hintsViewed}\n        show={hintsModalOpened}\n        onHide={() => setHintsModalOpened(false)}\n        onTipView={(index: number) => onHintViewed(index, time.current)}\n      />\n    </div>\n  );\n};\n\nexport default Level;\n","import React, { useState } from \"react\"\nimport Button from \"./Button\";\nimport useDimensions from \"react-use-dimensions\";\nimport Modal from \"./Modal\";\n\n\ninterface Props {\n    levels: Level[]\n    userData: UserLevel[]\n    current: number\n    onLevelClick: (index: number) => void\n}\n\nconst Levels: React.FC<Props & { style?: React.CSSProperties }> = ({ style = {}, current, levels, userData, onLevelClick }) => {\n    return (\n        <>\n            {levels.map(level => {\n                const data = userData.find(d => d.level_id === level.id);\n\n                let bestGuess = null;\n                if (data && data.guesses) {\n                    bestGuess = data.guesses.sort((g1, g2) => g1.distance - g2.distance)[0];\n                }\n\n                return (\n                    <Button\n                        key={level.id}\n                        className={`path-content-level full ${current === level.id ? \"current\" : \"\"}`}\n                        onClick={() => onLevelClick(level.id)}\n                        style={style}\n                    >\n                        <span className={`level-number ${!bestGuess ? \"never-tried\" : \"\"}`}>{level.id}</span>\n\n                        {bestGuess && (\n                            <div className=\"best-guess-path\">\n                                <span className=\"best-guess-path-title\">Melhor palpite</span>\n                                <span>Distância: {bestGuess.distance.toFixed(2)} km</span>\n                                <span>Dicas: {bestGuess.hints_viewed}</span>\n                            </div>\n                        )}\n                    </Button>\n                );\n            })}\n        </>\n    )\n}\n\nconst Path: React.FC<Props> = ({ levels, userData, current, onLevelClick }) => {\n    const [show, setShow] = useState(false);\n    const [ref, { width }] = useDimensions();\n\n    let divider = 2;\n    if (width > 2500) {\n        divider = 7;\n    } else if (width > 1800) {\n        divider = 6;\n    } else if (width > 1200) {\n        divider = 5;\n    } else if (width > 850) {\n        divider = 4;\n    } else if (width > 600) {\n        divider = 3;\n    }\n\n    return (\n        <div className=\"path-container shown\">\n            <Button onClick={() => setShow(prev => !prev)}>\n                Níveis\n            </Button>\n\n            <Modal show={show} onHide={() => setShow(false)}>\n                <div className=\"levels-container\" ref={ref}>\n                    <Levels\n                        style={{\n                            width: (width || 0) / divider - 20,\n                            height: (width || 0) / divider - 20,\n                            margin: 10,\n                        }}\n                        levels={levels}\n                        userData={userData}\n                        current={current}\n                        onLevelClick={level => {\n                            onLevelClick(level);\n                            setShow(false);\n                        }}\n                    />\n                </div>\n\n                <div>Mais por vir...</div>\n            </Modal>\n        </div>\n    )\n}\n\nexport default Path","import { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient('https://ddzlknjoifzrxzclbzop.supabase.co', process.env.REACT_APP_SUPABASE_KEY || '');\n\nexport const USER_DATA_TABLE = \"user_data\";\nexport const LEVELS_TABLE = \"levels\";\n\nexport default supabase;","import React, { useState, FormEvent, useEffect } from 'react';\nimport { PostgrestError } from '@supabase/supabase-js'\n\nimport Level from './Level';\nimport Path from './Path';\nimport Button from './Button';\nimport supabase, { LEVELS_TABLE, USER_DATA_TABLE } from '../supabase';\n\nconst Game: React.FC = () => {\n  const [data, setData] = useState<UserData>();\n  const [levels, setLevels] = useState<Level[]>();\n  const [error, setError] = useState<PostgrestError>();\n  const [guessesNumber, setGuessesNumber] = useState(window.localStorage.getItem(\"guess_limit\") || \"5\");\n\n  const fetchLevels = async () => {\n    const { data, error } = await supabase.from(LEVELS_TABLE).select().order(\"id\");\n\n    if (error) {\n      setError(error);\n    }\n    if (data) {\n      setLevels(data);\n    }\n  }\n\n  useEffect(() => {\n    if (data && !levels) {\n      fetchLevels();\n    }\n  }, [data, levels]);\n\n  const onSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const user = (event.target as HTMLFormElement)[\"user\"].value;\n    const guessLimit = Number((event.target as HTMLFormElement)[\"guess_limit\"].value || \"0\");\n\n    if (!user) {\n      alert(\"Informe o nome do jogador\")\n      return;\n    }\n\n    const { data, error } = await supabase.from(USER_DATA_TABLE).select().eq('user', user).eq('guess_limit', guessLimit);\n    if (error) {\n      setError(error);\n      return;\n    }\n    if (data && data[0]) {\n      setData(data[0]);\n      window.localStorage.setItem(\"user\", user);\n      window.localStorage.setItem(\"guess_limit\", guessLimit.toString());\n      return;\n    }\n\n    if (window.confirm(\"Criar novo jogador?\")) {\n      const { data, error } = await supabase.from(USER_DATA_TABLE).insert([{ user, guess_limit: guessLimit, data: [] }]);\n\n      if (data && data[0]) {\n        setData(data[0]);\n        window.localStorage.setItem(\"user\", user);\n        window.localStorage.setItem(\"guess_limit\", guessLimit.toString());\n      }\n\n      if (error) {\n        setError(error);\n      }\n    }\n  }\n\n  if (error) {\n    return (\n      <div className=\"login-container\">\n        <pre>\n          {JSON.stringify(error, null, 2)}\n        </pre>\n\n        <Button onClick={() => setError(undefined)}>Retry</Button>\n      </div>\n    )\n  }\n\n  if (!data) {\n    return (\n      <div className=\"login-container\">\n        <form onSubmit={onSubmit}>\n          <div>\n            <label htmlFor=\"user\">Nome do Jogador</label>\n            <input name=\"user\" id=\"user\" defaultValue={window.localStorage.getItem(\"user\") || \"\"} />\n          </div>\n          <div hidden>\n            <label htmlFor=\"guess_limit\">Número de Palpites: {guessesNumber === \"0\" ? \"Ilimitado\" : guessesNumber}</label>\n            <input\n              type=\"range\"\n              name=\"guess_limit\"\n              id=\"guess_limit\"\n              defaultValue={guessesNumber}\n              onInput={e => setGuessesNumber((e.target as HTMLInputElement).value)}\n              min=\"0\"\n              max=\"10\"\n            />\n          </div>\n          <div>\n            <Button>Entrar</Button>\n          </div>\n        </form>\n\n        {/* <Link to=\"/leaderboard\">\n          Leaderboard\n        </Link> */}\n      </div>\n    );\n  }\n\n  if (!levels) {\n    return (\n      <div className=\"login-container\">\n        <span>\n          Loading levels...\n        </span>\n      </div>\n    )\n  }\n\n  return <InternalGame levels={levels} data={data} onUpdate={setData} />\n}\n\ninterface GameProps {\n  levels: Level[]\n  data: UserData\n  onUpdate: (data: UserData) => void\n}\n\nconst InternalGame: React.FC<GameProps> = ({ levels, data, onUpdate }) => {\n  const [index, setIndex] = useState(2);\n\n  const update = async (theNewUserData: UserData, updateState = true) => {\n    const { data } = await supabase.from<UserData>(USER_DATA_TABLE).update({ data: theNewUserData.data }).match({ id: theNewUserData.id });\n    if (data && data[0]) {\n      if (updateState) {\n        onUpdate(data[0]);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  const handleHintViewed = async (hintIndex: number, time: number) => {\n    const theNewUserData = JSON.parse(JSON.stringify(data)) as UserData;\n\n    const theHint: HintView = {\n      id: hintIndex,\n      viewed: true,\n      timestamp: time,\n    };\n    const levelData = theNewUserData.data.find(ud => ud.level_id === index);\n    if (levelData) {\n      levelData.hints.push(theHint);\n    } else {\n      theNewUserData.data.push({\n        \"id\": theNewUserData.data.length,\n        \"level_id\": index,\n        \"current_time\": 0,\n        \"hints\": [theHint],\n        \"guesses\": [],\n        \"completed\": false,\n      })\n    }\n\n    await update(theNewUserData);\n  }\n\n  const handleNext = async (toIndex?: number) => {\n    const theNewUserData = JSON.parse(JSON.stringify(data)) as UserData;\n\n    const nextIndex = toIndex || index + 1;\n    const levelData = theNewUserData.data.find(ud => ud.level_id === nextIndex);\n    if (!levelData) {\n      theNewUserData.data.push({\n        \"id\": theNewUserData.data.length,\n        \"level_id\": nextIndex,\n        \"current_time\": 0,\n        \"hints\": [],\n        \"guesses\": [],\n        \"completed\": false,\n      })\n    }\n\n    if (await update(theNewUserData)) {\n      setIndex((prev) => toIndex || prev + 1)\n    }\n  }\n\n  const handleGuess = async (marker: google.maps.LatLngLiteral, osmData: OSMData, time: number, distance: number) => {\n    const theNewUserData = JSON.parse(JSON.stringify(data)) as UserData;\n\n    const levelData = theNewUserData.data.find(ud => ud.level_id === index);\n    const theGuess = {\n      \"id\": levelData ? levelData.guesses.length + 1 : 1,\n      \"distance\": distance,\n      \"coordinates\": marker,\n      \"timestamp\": time,\n      \"hints_viewed\": levelData ? levelData.hints.length : 0,\n      \"data\": osmData,\n    };\n    if (levelData) {\n      levelData.guesses.push(theGuess);\n    } else {\n      theNewUserData.data.push({\n        \"id\": theNewUserData.data.length,\n        \"level_id\": index,\n        \"current_time\": 0,\n        \"hints\": [],\n        \"guesses\": [theGuess],\n        \"completed\": false,\n      })\n    }\n\n    await update(theNewUserData);\n\n    return theGuess;\n  }\n\n  const handleTimePassed = async (time: number) => {\n    const theNewUserData = JSON.parse(JSON.stringify(data)) as UserData;\n\n    const levelData = theNewUserData.data.find(ud => ud.level_id === index);\n    if (levelData) {\n      levelData.current_time = time;\n    } else {\n      theNewUserData.data.push({\n        \"id\": theNewUserData.data.length,\n        \"level_id\": index,\n        \"current_time\": time,\n        \"hints\": [],\n        \"guesses\": [],\n        \"completed\": false,\n      })\n    }\n\n    await update(theNewUserData, false);\n  }\n\n  const level = levels.find(l => l.id === index);\n  if (!level) {\n    return <span>Nenhum nível aqui!</span>;\n  }\n\n  return (\n    <div className=\"full\">\n      <Level\n        current={level}\n        guessLimit={data.guess_limit}\n        userData={data.data.find(ud => ud.level_id === index)}\n        onNext={handleNext}\n        onGuess={handleGuess}\n        onHintViewed={handleHintViewed}\n        onTimePassed={handleTimePassed}\n      />\n\n      <Path\n        levels={levels}\n        userData={data.data}\n        current={index}\n        onLevelClick={handleNext}\n      />\n    </div>\n  );\n};\n\nexport default Game;\n","import { PostgrestError } from \"@supabase/supabase-js\";\nimport supabase, { USER_DATA_TABLE } from \"../supabase\";\nimport React, { FormEvent, useState } from \"react\";\nimport Button from \"./Button\";\n\nconst Leaderboard: React.FC = () => {\n  const [data, setData] = useState<LeaderboardData[]>();\n  const [, setError] = useState<PostgrestError>();\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const guessLimit = Number((event.target as HTMLFormElement)[\"guess_limit\"].value || \"0\");\n\n    const { data, error } = await supabase.from(USER_DATA_TABLE).select().eq(\"guess_limit\", guessLimit);\n\n    if (error) {\n      setError(error);\n    }\n    if (data) {\n      const userData = data as UserData[];\n\n      setData(userData.map(ud => ({\n        user: ud.user,\n        guesses: ud.data.map(udd => {\n          const bestGuess = udd.guesses.sort((g1, g2) => g1.distance - g2.distance)?.[0];\n\n          return {\n            id: udd.id,\n            levelId: udd.level_id,\n            distance: bestGuess ? bestGuess.distance : -1,\n            hints: bestGuess.hints_viewed,\n          }\n        }),\n      })));\n    }\n  }\n\n  return (\n    <div style={{background: \"blue\"}}>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"guess_limit\">\n          Número de palpites\n        </label>\n        <select name=\"guess_limit\" id=\"guess_limit\" defaultValue={5}>\n          <option value=\"0\">Ilimitado</option>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n          <option value=\"6\">6</option>\n          <option value=\"7\">7</option>\n          <option value=\"8\">8</option>\n          <option value=\"9\">9</option>\n          <option value=\"10\">10</option>\n        </select>\n\n        <Button>Confirm</Button>\n      </form>\n\n      <div>\n        <ul>\n          {data?.map(d => (\n            <li key={d.user}>{d.user} {d.guesses.reduce((agg, crr) => agg + crr.distance + crr.hints * 100, 0)}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Leaderboard;\n","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport Game from './Game';\nimport Leaderboard from './Leaderboard';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"/leaderboard\" element={<Leaderboard />} />\n          <Route path=\"/street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"/map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <BrowserRouter basename='/tcc-learning'>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}