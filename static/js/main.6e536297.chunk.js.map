{"version":3,"sources":["click-2.wav","components/Button.tsx","components/Stopwatch.tsx","components/Flag.tsx","components/OpenStreetMapData.tsx","components/StreetView.tsx","components/Map.tsx","components/Modal.tsx","components/Spinner.tsx","components/PlaceChooser.tsx","components/Hints.tsx","components/Level.tsx","supabase.ts","components/Login.tsx","components/Path.tsx","components/Settings.tsx","components/Tutorial.tsx","components/Game.tsx","components/Leaderboard.tsx","components/Debug.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["click","Audio","clickSound","load","Button","children","props","onClick","event","window","localStorage","getItem","play","total","seconds","minutes","hours","days","Stopwatch","start","step","onChange","onStep","useStopwatch","autoStart","offsetTimestamp","Date","now","lastStepEmitted","useRef","useEffect","current","className","Flag","name","code","alt","height","width","src","CITY_KEYS","STATE_KEYS","findItemInOSMData","address","keys","key","isSame","addressOne","addressTwo","isSameOSMPlace","OpenStreetMapsData","data","distance","city","state","region","country","country_code","toUpperCase","toFixed","defaultCoordinates","lat","lng","StreetViewMarker","streetViewPanorama","coordinates","useState","marker","setMarker","infoWindowRef","position","onLoad","e","infoWindow","open","ref","options","pixelOffset","google","maps","Size","StreetView","markers","guesses","showMarkers","setStreetViewPanorama","streetViewPanoramaOptions","clickToGo","pov","heading","pitch","zoom","visible","enableCloseButton","disableDefaultUI","mapContainerStyle","center","map","guess","Number","lon","id","index","DEFAULT_COORDINATES","getZoom","lat_a","lng_a","lat_b","lng_b","latRad","sin","Math","PI","radX2","log","max","min","latDif","abs","lngDif","latFrac","lngFrac","lngZoom","latZoom","Map","onMapClick","Modal","portalClassName","show","onHide","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","style","overlay","backgroundColor","undefined","content","inset","border","background","borderRadius","color","padding","Spinner","borderColor","fetcher","url","fetch","then","r","json","Data","showConfirmButton","onConfirm","useSWR","suspense","error","GuessInfo","canGuess","level","onClose","onNext","action","PlaceChooserMarker","placeCoords","guessCoords","showInfoWindow","onShowInfoWindow","showDistance","setShowDistance","ready","setReady","useMemo","geometry","spherical","computeDistanceBetween","LatLng","zIndex","onPositionChanged","onCloseClick","Suspense","fallback","PlaceChooserGuesses","showInfoWindowId","onGuessClick","sort","g1","g2","length","icon","time_elapsed","radius","strokeWeight","PlaceChooserHelpModal","label","image","PlaceChooser","mapCenter","setMapCenter","setZoom","setGuessCoords","setShowInfoWindowId","guessInfo","setGuessInfo","showHelp","setShowHelp","handleSubmit","preventDefault","locale","target","value","encoded","encodeURIComponent","response","boundingbox","onSubmit","type","faQuestion","clickableIcons","streetViewControl","latLng","toJSON","PlaceChooserModal","Hints","hints","hintsViewed","onHintView","hint","hintView","find","h","hint_id","description","Level","guessLimit","startTime","onGuess","onHintViewed","onTimePassed","mapModalOpened","setMapModalOpened","hintsModalOpened","setHintsModalOpened","time","prev","supabase","createClient","process","GUESSES_TABLE","BEST_GUESSES_TABLE","GAMES_TABLE","GAME_LEVELS_TABLE","GAME_LEVEL_HINTS_TABLE","LEVELS_TABLE","PROFILES_TABLE","fetchOrCreate","table","match","insert","from","select","loginOrRegister","email","authData","password","auth","signIn","isNew","signUp","Login","onAuth","setGuessLimit","userName","alert","user","session","htmlFor","defaultValue","onInput","Levels","bestGuesses","levels","onLevelClick","bestGuess","g","hints_viewed","Path","setShow","useDimensions","divider","margin","SettingsModal","setItem","checked","Settings","showSettings","setShowSettings","faCog","TutorialModal","Tutorial","showTutorial","setShowTutorial","InternalGame","game","setGame","currentLevel","setCurrentLevel","setBestGuesses","fetchOrCreateGame","user_id","guess_limit","fetchBestGuesses","order","eq","d","game_levels","level_id","VeryInternalGame","gameLevel","setGameLevel","setGuesses","setHints","setHintsViewed","fetchOrCreateUserLevel","game_id","fetchGuesses","game_level_id","fetchHintsViewed","fetchHints","handleTimePass","update","handleHintView","handleGuess","osmData","Game","setAuth","setLevels","fetchLevels","to","fetchLeaderboard","levelId","query","LevelLeaderboard","setData","setError","games","profiles","GeneralLeaderboard","generalData","userGeneralData","gd","push","totalGuesses","totalTime","totalDistance","averageDistance","averageTime","correctGuesses","item","reduce","agg","crr","a","b","InternalLeaderboard","setLevelId","Leaderboard","Debug","App","useJsApiLoader","googleMapsApiKey","libraries","isLoaded","loadError","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","countries","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.6e536297.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click-2.66336ee5.wav\";","import React from \"react\";\nimport clickSound from \"../click-2.wav\";\n\ntype Props = JSX.IntrinsicElements[\"button\"]\n\nconst click = new Audio(clickSound);\nclick.load();\n\nconst Button: React.FC<Props> = ({ children, ...props}) => {\n    const handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n        if (window.localStorage.getItem(\"mute\") !== \"true\") click.play();\n        if (props.onClick) props.onClick(event)\n    }\n\n    return (\n        <button {...props} onClick={handleClick}>\n            {children}\n        </button>\n    )\n}\n\nexport default Button;","import React, { useEffect, useRef } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst total = (seconds: number, minutes: number, hours: number, days: number): number => seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24\n\ninterface Props {\n  start?: number\n  step?: number\n  onChange?: (total: number) => void\n  onStep?: (total: number) => void\n}\n\n\nconst Stopwatch: React.FC<Props> = ({ start = 0, step = 10, children, onChange, onStep }) => {\n  const { seconds, minutes, hours, days } = useStopwatch({\n    autoStart: true,\n    offsetTimestamp: new Date(Date.now() + start * 1000),\n  });\n  const lastStepEmitted = useRef<number>(start);\n\n  useEffect(() => {\n    const current = total(seconds, minutes, hours, days);\n\n    if (onChange) {\n      onChange(current)\n    }\n    if (onStep && current >= lastStepEmitted.current + step) {\n      onStep(current)\n      lastStepEmitted.current = current;\n    }\n\n  }, [onChange, seconds, minutes, hours, days, onStep, start, step])\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch-time shaking\">⏰</div>\n      <span className=\"stopwatch-time\">\n        {total(seconds, minutes, hours, days)}\n\n        {children}\n      </span>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React from \"react\";\nimport Flag from \"./Flag\";\n\ntype OSMAddressKeys = (keyof OSMAddress)[]\n\nexport const DISTRICT_KEYS: OSMAddressKeys = [\"city_district\", \"district\", \"borough\", \"suburb\", \"subdivision\"];\nexport const CITY_KEYS: OSMAddressKeys = [\"city\", \"town\", \"village\", \"municipality\"];\nexport const STATE_KEYS: OSMAddressKeys = [\"state\", \"state_district\", \"county\"];\n\nexport function findItemInOSMData(address: OSMAddress, keys: OSMAddressKeys): string {\n  for (const key of keys) {\n    if (key in address) {\n      return address[key] as string;\n    }\n  }\n  return \"\";\n}\n\nfunction isSame(addressOne: OSMAddress, addressTwo: OSMAddress, keys: OSMAddressKeys): boolean {\n  return findItemInOSMData(addressOne, keys) === findItemInOSMData(addressTwo, keys);\n}\n\nexport function isSameOSMPlace(addressOne: OSMAddress, addressTwo: OSMAddress): boolean {\n  if (!isSame(addressOne, addressTwo, STATE_KEYS)) {\n    return false;\n  }\n  if (!isSame(addressOne, addressTwo, CITY_KEYS)) {\n    return false;\n  }\n  if (!isSame(addressOne, addressTwo, [\"region\"])) {\n    return false;\n  }\n  if (!isSame(addressOne, addressTwo, [\"country\"])) {\n    return false;\n  }\n\n  return true;\n}\n\nconst OpenStreetMapsData: React.FC<OpenStreetMapDataProps> = ({ data, className = \"\", distance, children }) => {\n  const city = findItemInOSMData(data.address, CITY_KEYS);\n  const state = findItemInOSMData(data.address, STATE_KEYS);\n\n  return (\n    <div className={`data-container ${className}`}>\n      {city && <span>Cidade: {city}</span>}\n      {state && <span>Estado: {state}</span>}\n      {data.address.region && <span>Região: {data.address.region}</span>}\n      {data.address.country && data.address.country_code && (\n        <span className=\"country\">\n          País: {data.address.country}\n          <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n        </span>\n      )}\n      {distance && (<span>Distância: {(distance / 1000).toFixed(2)} km</span>)}\n      {children}\n    </div>\n  );\n}\n\nexport default OpenStreetMapsData;\n","import React, { useRef, useState } from 'react';\nimport { GoogleMap, InfoWindow, Marker } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\nimport OpenStreetMapsData from './OpenStreetMapData';\n\ninterface Props {\n  markers?: LevelMarker[]\n  guesses?: GuessEntity[]\n  coordinates?: google.maps.LatLngLiteral\n}\n\ninterface StreetViewMarkerProps {\n  streetViewPanorama: google.maps.StreetViewPanorama\n  coordinates?: google.maps.LatLngLiteral\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetViewMarker: React.FC<StreetViewMarkerProps> = ({ streetViewPanorama, coordinates, children }) => {\n  const [marker, setMarker] = useState<google.maps.Marker>();\n  const infoWindowRef = useRef<InfoWindow>(null);\n\n  if (!coordinates) {\n    return null;\n  }\n\n  return (\n    <Marker\n      position={coordinates}\n      onLoad={(e) => setMarker(e)}\n      onClick={() => {\n        if (infoWindowRef.current && infoWindowRef.current.state.infoWindow) {\n          infoWindowRef.current.state.infoWindow.open(streetViewPanorama);\n        }\n      }}\n    >\n      {children && marker && (\n        <InfoWindow\n          ref={infoWindowRef}\n          options={{pixelOffset: new google.maps.Size(0, -50, 'px', 'px')}}\n        >\n          {children}\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst StreetView: React.FC<Props> = ({ markers = [], guesses = [], coordinates = defaultCoordinates }) => {\n  const [showMarkers] = useState(false);\n  const [streetViewPanorama, setStreetViewPanorama] = useState<google.maps.StreetViewPanorama>();\n\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    clickToGo: true,\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n    disableDefaultUI: true,\n  };\n\n  return (\n    <>\n      <GoogleMap\n        mapContainerStyle={{ height: '100%' }}\n        center={coordinates}\n        zoom={10}\n      >\n        <StreetViewPanorama\n          onLoad={e => setStreetViewPanorama(e)}\n          options={streetViewPanoramaOptions}\n        />\n\n        {showMarkers && streetViewPanorama && (\n          <>\n            <StreetViewMarker\n              streetViewPanorama={streetViewPanorama}\n              coordinates={coordinates}\n            >\n              <span>This is the initial location</span>\n            </StreetViewMarker>\n\n            {guesses.map(guess => (\n              <StreetViewMarker\n                key={guess.id}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={{ lat: Number(guess.data.lat), lng: Number(guess.data.lon) }}\n              >\n                <OpenStreetMapsData data={guess.data} />\n              </StreetViewMarker>\n            ))}\n\n            {markers.map((marker, index) => (\n              <StreetViewMarker\n                key={index}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={marker.coordinates}\n              >\n                <span>{marker.data}</span>\n              </StreetViewMarker>\n            ))}\n          </>\n        )}\n      </GoogleMap>\n    </>\n  );\n};\n\nexport default StreetView;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface Props {\n  options?: google.maps.MapOptions\n  coordinates?: { lat: number; lng: number };\n  zoom?: number;\n  onMapClick?: ((e: google.maps.MapMouseEvent) => void) | undefined;\n}\n\nexport const DEFAULT_COORDINATES = {\n  lat: -13.8860709,\n  lng: -57.2789963,\n};\nexport const DEFAULT_ZOOM = 4.5;\n\nexport function getZoom(lat_a: number, lng_a: number, lat_b: number, lng_b: number): number {\n  function latRad(lat: number) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n    return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n  }\n\n  const latDif = Math.abs(latRad(lat_a) - latRad(lat_b))\n  const lngDif = Math.abs(lng_a - lng_b)\n\n  const latFrac = latDif / Math.PI\n  const lngFrac = lngDif / 360\n\n  const lngZoom = Math.log(1 / latFrac) / Math.log(2)\n  const latZoom = Math.log(1 / lngFrac) / Math.log(2)\n\n  return Math.min(lngZoom, latZoom)\n}\n\nconst Map: React.FC<Props> = ({ coordinates = DEFAULT_COORDINATES, zoom = DEFAULT_ZOOM, options = {}, children, onMapClick }) => {\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={zoom} options={options} onClick={onMapClick}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\ninterface Props {\n  className?: string\n  portalClassName?: string\n  show: boolean;\n  onHide: () => void;\n}\n\nconst Modal: React.FC<Props> = ({ className = \"\", portalClassName = \"\", children, show, onHide }) => {\n  return (\n    <ReactModal\n      isOpen={show}\n      onRequestClose={onHide}\n      shouldCloseOnEsc\n      shouldCloseOnOverlayClick\n      style={{\n        overlay: {\n          backgroundColor: undefined,\n        },\n        content: {\n          inset: '80px',\n          border: '1px solid #1d246e',\n          background: '#323dbb',\n          borderRadius: '12px',\n          color: 'white',\n          padding: '10px',\n        },\n      }}\n      className={className}\n      portalClassName={portalClassName}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from \"react\"\nimport CSS from 'csstype';\n\n\ninterface Props {\n    color?: CSS.Property.Color\n}\n\nconst Spinner: React.FC<Props> = ({ color = \"white\" }) => {\n    return (\n        <div className=\"spinner\" style={{ borderColor: color }} >\n            <div style={{ borderColor: color }} />\n            <div style={{ borderColor: color }} />\n        </div>\n    )\n}\n\nexport default Spinner","import React, { FormEvent, useEffect, useMemo, useState } from 'react';\nimport { Circle, InfoWindow, Marker } from '@react-google-maps/api';\nimport useSWR from 'swr';\nimport Button from './Button';\n\nimport Map, { DEFAULT_COORDINATES, DEFAULT_ZOOM, getZoom } from './Map';\nimport Modal from './Modal';\nimport OpenStreetMapsData, { isSameOSMPlace } from './OpenStreetMapData';\nimport Spinner from './Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestion } from '@fortawesome/free-solid-svg-icons'\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst Data: React.FC<{ position: google.maps.LatLngLiteral, showConfirmButton: boolean, onConfirm?: (data: OSMData) => void }> = ({ position, showConfirmButton, onConfirm, children }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  if (data.error || !data.address) {\n    return <span className='data-container'>Não consegui localizar, tente novamente.</span>;\n  }\n\n  return (\n    <>\n      <OpenStreetMapsData data={data}>\n        {children}\n      </OpenStreetMapsData>\n\n      {showConfirmButton && <Button onClick={() => onConfirm && onConfirm(data)}>Confirmar</Button>}\n    </>\n  );\n};\n\nconst GuessInfo: React.FC<{ canGuess: boolean, guess: GuessEntity, level: LevelEntity, onClose: () => void, onNext: () => void }> = ({ canGuess, level, guess, onClose, onNext }) => {\n  let action = null;\n  if (isSameOSMPlace(level.data.address, guess.data.address)) {\n    action = (\n      <>\n        <h4>Você acertou a cidade!</h4>\n\n        <Button onClick={onNext}>\n          Próximo\n        </Button>\n      </>\n    );\n  } else if (canGuess) {\n    action = (\n      <Button onClick={onClose}>\n        Tentar novamente\n      </Button>\n    );\n  } else {\n    action = (\n      <>\n        <h4>Nenhuma tentativa restante</h4>\n\n        <Button onClick={onNext}>\n          Próximo\n        </Button>\n      </>\n    )\n  }\n\n  return (\n    <Modal className=\"guess-info-modal\" portalClassName=\"guess-info-modal-container\" show onHide={onClose}>\n      <h3>Seu palpite</h3>\n\n      <OpenStreetMapsData data={guess.data}>\n        <span>Distância: {(guess.distance / 1000).toFixed(2)}km</span>\n\n        {action && <div className=\"guess-info-modal-actions\">{action}</div>}\n      </OpenStreetMapsData>\n    </Modal>\n  )\n}\n\nconst PlaceChooserMarker: React.FC<PlaceChooserMarkerProps> = ({ placeCoords, guessCoords, showInfoWindow, onShowInfoWindow, onConfirm }) => {\n  const [showDistance, setShowDistance] = useState(false);\n  const [ready, setReady] = useState(false);\n  const distance = useMemo(() => {\n    return window.google.maps.geometry.spherical.computeDistanceBetween(\n      new google.maps.LatLng(guessCoords),\n      new google.maps.LatLng(placeCoords)\n    );\n  }, [guessCoords, placeCoords]);\n\n  useEffect(() => {\n    setShowDistance(false);\n  }, [guessCoords])\n\n  const handleConfirm = (data: OSMData) => {\n    setShowDistance(true);\n    onConfirm(guessCoords, data, distance);\n  }\n\n  return (\n    <Marker\n      position={guessCoords}\n      zIndex={0}\n      onClick={() => onShowInfoWindow(true)}\n      onPositionChanged={() => onShowInfoWindow(true)}\n      onLoad={() => setReady(true)}\n    >\n      {showInfoWindow && ready && (\n        <InfoWindow onCloseClick={() => onShowInfoWindow(false)}>\n          <React.Suspense fallback={<Spinner color=\"#323dbb\" />}>\n            <Data position={guessCoords} showConfirmButton={!showDistance} onConfirm={handleConfirm}>\n              {showDistance && (\n                <span>Distância: {(distance / 1000).toFixed(2)}km</span>\n              )}\n            </Data>\n          </React.Suspense>\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst PlaceChooserGuesses: React.FC<{ showInfoWindowId?: number, level: LevelEntity, guesses: GuessEntity[], onGuessClick: (id?: number) => void }> = ({ showInfoWindowId, level, guesses, onGuessClick }) => {\n  return (\n    <>\n      {guesses.sort((g1, g2) => g1.distance - g2.distance).map((guess, index) => {\n        let color = \"red\";\n\n        if (isSameOSMPlace(guess.data.address, level.data.address)) {\n          color = \"sunny\";\n        } else {\n          if (guess.distance < 30 * 1000) {\n            color = \"blue\";\n          } else if (guess.distance < 100 * 1000) {\n            color = \"green\";\n          } else if (guess.distance < 300 * 1000) {\n            color = \"yellow\";\n          } else if (guess.distance < 1000 * 1000) {\n            color = \"orange\";\n          }\n\n          if (index === 0) {\n            color += \"-dot\";\n          }\n        }\n\n        return (\n          <Marker\n            key={guess.id}\n            zIndex={guesses.length + 1 - index}\n            position={guess}\n            icon={`https://maps.google.com/mapfiles/ms/micons/${color}.png`}\n            onClick={() => onGuessClick(guess.id)}\n          >\n            {showInfoWindowId === guess.id && (\n              <InfoWindow onCloseClick={() => onGuessClick(undefined)}>\n                <OpenStreetMapsData data={guess.data}>\n                  <span>Distância: {(guess.distance / 1000).toFixed(2)}km</span>\n                  <span>Palpite aos {guess.time_elapsed}s</span>\n                </OpenStreetMapsData>\n              </InfoWindow>\n            )}\n\n            {showInfoWindowId === guess.id && (\n              <Circle\n                center={guess}\n                radius={guess.distance}\n                options={{ strokeWeight: 1 }}\n              />\n            )}\n          </Marker>\n        )\n      }\n      )}\n    </>\n  )\n}\n\nconst PlaceChooserHelpModal: React.FC<{ show: boolean, onClose: () => void }> = ({ show, onClose }) => {\n  const markers = [\n    { label: \"Acertou na mosca! Mesma cidade\", image: \"https://maps.google.com/mapfiles/ms/micons/sunny.png\" },\n    { label: \"Quando tem um ponto no meio do marcador, é o seu melhor palpite\", image: \"https://maps.google.com/mapfiles/ms/micons/blue-dot.png\" },\n    { label: \"Pertinho! Menos de 30km, mas ainda não é a cidade certa!\", image: \"https://maps.google.com/mapfiles/ms/micons/blue.png\" },\n    { label: \"Ficando quente! Entre 30km e 100km\", image: \"https://maps.google.com/mapfiles/ms/micons/green.png\" },\n    { label: \"Chegando perto! Entre 100km e 300km\", image: \"https://maps.google.com/mapfiles/ms/micons/yellow.png\" },\n    { label: \"Um pouco longe ainda! Entre 300km e 1000km\", image: \"https://maps.google.com/mapfiles/ms/micons/orange.png\" },\n    { label: \"Muito longe! Mais de 1000km de distância\", image: \"https://maps.google.com/mapfiles/ms/micons/red.png\" },\n  ]\n\n\n  return (\n    <Modal className=\"place-chooser-tutorial\" portalClassName=\"place-chooser-tutorial-container\" show={show} onHide={onClose}>\n      <h3>Como dar um palpite?</h3>\n\n      <ul>\n        <li>Clique em qualquer lugar do mapa</li>\n        <li>Espere carregar as informações</li>\n        <li>Clique em &quot;Confirmar&quot;</li>\n      </ul>\n\n\n      <h3>Legenda dos marcadores</h3>\n\n      {markers.map(marker => (\n        <div key={marker.image}>\n          <img src={marker.image} height={32} width={32} />\n          <h4>{marker.label}</h4>\n        </div>\n      ))}\n    </Modal>\n  );\n}\n\nconst PlaceChooser: React.FC<PlaceChooserProps> = ({ level, canGuess, guesses, onConfirm, onNext }) => {\n  const [mapCenter, setMapCenter] = useState(DEFAULT_COORDINATES);\n  const [zoom, setZoom] = useState(DEFAULT_ZOOM);\n  const [guessCoords, setGuessCoords] = useState<google.maps.LatLngLiteral>();\n  const [showInfoWindowId, setShowInfoWindowId] = useState<number>();\n  const [guessInfo, setGuessInfo] = useState<GuessEntity>();\n  const [showHelp, setShowHelp] = useState(false);\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const locale = (event.target as HTMLFormElement)[\"locale\"].value;\n    const encoded = encodeURIComponent(locale);\n\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/search.php?q=${encoded}&polygon_geojson=1&format=jsonv2`\n    )\n    const data = await response.json();\n\n    if (data && data[0]) {\n      setMapCenter({\n        lat: Number(data[0].lat),\n        lng: Number(data[0].lon),\n      });\n      const zoom = getZoom(\n        Number(data[0].boundingbox[0]),\n        Number(data[0].boundingbox[2]),\n        Number(data[0].boundingbox[1]),\n        Number(data[0].boundingbox[3]),\n      )\n      setZoom(zoom);\n    }\n  }\n\n  return (\n    <div className=\"place-chooser-container\">\n      <div className=\"search-place-form\">\n        <form onSubmit={handleSubmit}>\n          <input name=\"locale\" id=\"locale\" />\n          <Button>Pesquisar</Button>\n\n          <Button type=\"button\" onClick={() => setShowHelp(true)}>\n            <FontAwesomeIcon icon={faQuestion} />\n          </Button>\n        </form>\n      </div>\n      <div className=\"place-chooser-map-container\">\n        <Map\n          coordinates={mapCenter}\n          zoom={zoom}\n          options={{ clickableIcons: false, streetViewControl: false }}\n          onMapClick={e => {\n            setShowInfoWindowId(-1);\n            if (e.latLng && canGuess) {\n              setGuessCoords(e.latLng.toJSON());\n            }\n          }}\n        >\n          <PlaceChooserGuesses\n            showInfoWindowId={showInfoWindowId}\n            level={level}\n            guesses={guesses}\n            onGuessClick={setShowInfoWindowId}\n          />\n\n          {guessCoords && (\n            <PlaceChooserMarker\n              placeCoords={level}\n              showInfoWindow={showInfoWindowId === -1}\n              guessCoords={guessCoords}\n              onShowInfoWindow={show => setShowInfoWindowId(show ? -1 : undefined)}\n              onConfirm={async (marker: google.maps.LatLngLiteral, data: OSMData, distance: number) => {\n                setShowInfoWindowId(undefined);\n                const guess = await onConfirm(marker, data, distance);\n                setGuessInfo(guess);\n                setGuessCoords(undefined);\n              }}\n            />\n          )}\n\n          {guessInfo && (\n            <GuessInfo\n              canGuess={canGuess}\n              level={level}\n              guess={guessInfo}\n              onClose={() => setGuessInfo(undefined)}\n              onNext={onNext}\n            />\n          )}\n        </Map>\n      </div>\n\n      <PlaceChooserHelpModal show={showHelp} onClose={() => setShowHelp(false)} />\n    </div>\n  )\n}\n\nexport const PlaceChooserModal: React.FC<PlaceChooserModalProps> = ({ show, canGuess, level, guesses, onHide, onConfirm, onNext }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <PlaceChooser level={level} canGuess={canGuess} guesses={guesses} onConfirm={onConfirm} onNext={onNext} />\n    </Modal>\n  );\n};\n","import React from \"react\";\n\nimport Button from './Button';\nimport Modal from './Modal';\n\ninterface HintsProps {\n  hints: HintEntity[]\n  hintsViewed: GameLevelHintEntity[]\n  show: boolean\n  onHide: () => void\n  onHintView: (hint: HintEntity) => void\n}\n\nconst Hints: React.FC<HintsProps> = ({ hints, hintsViewed, show, onHide, onHintView }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <ul className=\"hints\">\n        {hints.map((hint) => {\n          const hintView = hintsViewed.find(h => h.hint_id === hint.id);\n          if (hintView) {\n            return (\n              <li key={hint.id}>\n                <span>{hint.description} - Visto aos {hintView.time_elapsed}s</span>\n              </li>\n            );\n          }\n\n          return (\n            <li key={hint.id}>\n              <Button onClick={() => onHintView(hint)}>Mostrar</Button>\n            </li>\n          );\n        })}\n      </ul>\n    </Modal>\n  );\n};\n\nexport default Hints;\n","import React, { useRef, useState } from 'react';\nimport Button from './Button';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\nimport { PlaceChooserModal } from './PlaceChooser';\nimport Hints from './Hints';\n\nconst Level: React.FC<LevelProps> = ({ current, hints, guessLimit, startTime, guesses, hintsViewed, onGuess, onHintViewed, onTimePassed, onNext }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [hintsModalOpened, setHintsModalOpened] = useState(false);\n  const time = useRef(0); // Not ideal, but :(\n\n  const canGuess = guessLimit === 0 || guesses.length < guessLimit;\n\n  return (\n    <>\n      <div className=\"game-header\">\n        <div>\n          <Button onClick={() => setMapModalOpened((prev) => !prev)}>\n            Palpitar {guesses.length}/{guessLimit === 0 ? \"∞\" : guessLimit}\n          </Button>\n        </div>\n        <div>\n          <Stopwatch\n            key={current.id}\n            start={startTime}\n            onChange={total => time.current = total}\n            onStep={onTimePassed}\n          />\n        </div>\n        <div>\n          <Button onClick={() => setHintsModalOpened((prev) => !prev)}>\n            Dicas {hintsViewed.length}/{hints.length}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"game-body full-height\">\n        <StreetView\n          markers={[]}\n          guesses={guesses}\n          coordinates={current}\n        />\n      </div>\n\n      <PlaceChooserModal\n        show={mapModalOpened}\n        level={current}\n        canGuess={canGuess}\n        guesses={guesses}\n        onHide={() => setMapModalOpened(false)}\n        onConfirm={(marker, data, distance) => onGuess(marker, data, time.current, distance)}\n        onNext={onNext}\n      />\n\n      <Hints\n        hints={hints}\n        hintsViewed={hintsViewed}\n        show={hintsModalOpened}\n        onHide={() => setHintsModalOpened(false)}\n        onHintView={(hint: HintEntity) => onHintViewed(hint, time.current)}\n      />\n    </>\n  );\n};\n\nexport default Level;\n","import { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient('https://ddzlknjoifzrxzclbzop.supabase.co', process.env.REACT_APP_SUPABASE_KEY || '');\n\nexport const GUESSES_TABLE = \"guesses\";\nexport const BEST_GUESSES_TABLE = \"best_guesses\";\nexport const GAMES_TABLE = \"games\";\nexport const GAME_LEVELS_TABLE = \"game_levels\";\nexport const GAME_LEVEL_HINTS_TABLE = \"game_level_hints\";\nexport const LEVELS_TABLE = \"levels\";\nexport const PROFILES_TABLE = \"profiles\";\nexport const HINTS_TABLE = \"hints\";\n\nexport async function fetchOrCreate<T>(table: string, match: Record<string, unknown>, insert: Record<string, unknown>): Promise<T | null> {\n  let response = await supabase\n    .from(table)\n    .select()\n    .match(match);\n\n  if (response.data && response.data[0]) {\n    return response.data[0];\n  }\n\n  response = await supabase\n    .from(table)\n    .insert({...match, ...insert });\n\n  if (response.data && response.data[0]) {\n    return response.data[0];\n  }\n\n  return null;\n}\n\nexport default supabase;","import React, { FormEvent, useState } from \"react\";\nimport supabase from '../supabase';\nimport Button from \"./Button\";\n\nasync function loginOrRegister(email: string) {\n  const authData = { email: email, password: email };\n\n  let response = await supabase.auth.signIn(authData);\n  if (!response.error) {\n    return { response, isNew: false };\n  }\n\n  response = await supabase.auth.signUp(authData);\n  return { response, isNew: true };\n}\n\nconst Login: React.FC<LoginProps> = ({ onAuth }) => {\n  const [guessLimit, setGuessLimit] = useState(window.localStorage.getItem(\"guess_limit\") || \"5\");\n\n  const onSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const userName = (event.target as HTMLFormElement)[\"user\"].value;\n    if (!userName) {\n      alert(\"Informe o nome do jogador\")\n      return;\n    }\n\n    const { response: { user, session, error }, isNew } = await loginOrRegister(userName + \"@lalalala.com\");\n\n    onAuth({ user, session, error }, Number(guessLimit), isNew);\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        <label htmlFor=\"user\">Nome do Jogador</label>\n        <input name=\"user\" id=\"user\" defaultValue={window.localStorage.getItem(\"user\") || \"\"} />\n      </div>\n      <div>\n        <label htmlFor=\"guess_limit\">Número de Palpites: {guessLimit === \"0\" ? \"Ilimitado\" : guessLimit}</label>\n        <input\n          type=\"range\"\n          name=\"guess_limit\"\n          id=\"guess_limit\"\n          defaultValue={guessLimit}\n          onInput={e => setGuessLimit((e.target as HTMLInputElement).value)}\n          min=\"0\"\n          max=\"10\"\n        />\n      </div>\n      <div>\n        <Button>Entrar</Button>\n      </div>\n    </form>\n  )\n}\n\nexport default Login;","import React, { useState } from \"react\"\nimport Button from \"./Button\";\nimport useDimensions from \"react-use-dimensions\";\nimport Modal from \"./Modal\";\n\n\ninterface Props {\n  levels: LevelEntity[]\n  bestGuesses: BestGuess[]\n  current: number\n  onLevelClick: (index: number) => void\n}\n\ninterface LevelsProps extends Props {\n  style?: React.CSSProperties\n}\n\nconst Levels: React.FC<LevelsProps> = ({ style, bestGuesses, current, levels, onLevelClick }) => {\n  return (\n    <>\n      {levels.map((level, index) => {\n        const bestGuess = bestGuesses.find(g => g.level.id === level.id);\n\n        return (\n          <Button\n            key={level.id}\n            className={`path-content-level full ${current === index ? \"current\" : \"\"}`}\n            onClick={() => onLevelClick(index)}\n            style={style}\n          >\n            <span className={`level-number ${!bestGuess || !bestGuess.guess ? \"never-tried\" : \"\"}`}>{index + 1}</span>\n\n            {bestGuess && bestGuess.guess && (\n              <div className=\"best-guess-path\">\n                <span className=\"best-guess-path-title\">Melhor palpite</span>\n                <span>Distância: {bestGuess.guess.distance.toFixed(2)} km</span>\n                <span>Dicas: {bestGuess.guess.hints_viewed}</span>\n              </div>\n            )}\n          </Button>\n        );\n      })}\n    </>\n  )\n}\n\nconst Path: React.FC<Props> = ({ levels, bestGuesses, current, onLevelClick }) => {\n  const [show, setShow] = useState(false);\n  const [ref, { width }] = useDimensions();\n\n  let divider = 2;\n  if (width > 2500) {\n    divider = 7;\n  } else if (width > 1800) {\n    divider = 6;\n  } else if (width > 1200) {\n    divider = 5;\n  } else if (width > 850) {\n    divider = 4;\n  } else if (width > 600) {\n    divider = 3;\n  }\n\n  return (\n    <>\n      <Button onClick={() => setShow(prev => !prev)}>\n        Níveis\n      </Button>\n\n      <Modal show={show} onHide={() => setShow(false)}>\n        <div className=\"levels-container\" ref={ref}>\n          <Levels\n            style={{\n              width: (width || 0) / divider - 20,\n              height: (width || 0) / divider - 20,\n              margin: 10,\n            }}\n            levels={levels}\n            bestGuesses={bestGuesses}\n            current={current}\n            onLevelClick={level => {\n              onLevelClick(level);\n              setShow(false);\n            }}\n          />\n        </div>\n\n        <div>Mais por vir...</div>\n      </Modal>\n    </>\n  )\n}\n\nexport default Path","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\n\nimport React, { useState } from \"react\";\nimport Button from \"./Button\";\nimport Modal from './Modal';\n\nconst SettingsModal: React.FC<{ show: boolean, onClose: () => void }> = ({ show, onClose }) => {\n  return (\n    <Modal show={show} onHide={onClose}>\n      <h3>Configurações</h3>\n\n      <div>\n        <label htmlFor=\"mute\">Desativar sons</label>\n\n        <input\n          type=\"checkbox\"\n          id=\"mute\"\n          name=\"mute\"\n          onChange={event => window.localStorage.setItem(\"mute\", event.target.checked ? \"true\" : \"false\")}\n          checked={window.localStorage.getItem(\"mute\") === \"true\"}\n        />\n      </div>\n    </Modal>\n  )\n}\n\nconst Settings: React.FC = () => {\n  const [showSettings, setShowSettings] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setShowSettings(true)}>\n        <FontAwesomeIcon icon={faCog} />\n      </Button>\n\n      <SettingsModal show={showSettings} onClose={() => setShowSettings(false)} />\n    </>\n  )\n}\n\nexport default Settings;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faQuestion } from '@fortawesome/free-solid-svg-icons'\n\nimport React, { useState } from \"react\";\nimport Button from \"./Button\";\nimport Modal from './Modal';\n\nconst TutorialModal: React.FC<{ guessLimit: number, show: boolean, onClose: () => void }> = ({ guessLimit, show, onClose }) => {\n  return (\n    <Modal show={show} onHide={onClose}>\n      <h2>Tutorial</h2>\n\n      <h3>Navegação</h3>\n\n      <ul>\n        <li>Clique e arraste no mapa para girar a câmera</li>\n        <li>Clique nos &quot;X&quot; no chão para se mover</li>\n      </ul>\n\n      <h3>Dicas</h3>\n\n      <ul>\n        <li>Clique no botão &quot;Dicas&quot; se estiver sem ideias</li>\n      </ul>\n\n      <h3>Palpitar</h3>\n\n      <ul>\n        <li>Clique em &quot;Palpitar&quot; para uma tentativa</li>\n        <li>Clique em qualquer lugar no mapa para dar seu palpite e ver a distância do local correto</li>\n        <li>Você tem {guessLimit} tentativas, use com sabedoria</li>\n      </ul>\n\n      <h3>Níveis</h3>\n\n      <ul>\n        <li>Clique em &quot;Níveis&quot; para escolher um nível para jogar</li>\n        <li>Clique em &quot;Pular&quot; para ir ao próximo nível</li>\n      </ul>\n\n      <Button className=\"full-width\" onClick={onClose}>\n        Vamos lá!\n      </Button>\n    </Modal>\n  )\n}\n\nconst Tutorial: React.FC<{ guessLimit: number, show: boolean }> = ({ guessLimit, show }) => {\n  const [showTutorial, setShowTutorial] = useState(show);\n\n  return (\n    <>\n      <Button onClick={() => setShowTutorial(true)}>\n        <FontAwesomeIcon icon={faQuestion} />\n      </Button>\n\n      <TutorialModal guessLimit={guessLimit} show={showTutorial} onClose={() => setShowTutorial(false)} />\n    </>\n  )\n}\n\nexport default Tutorial;\n","import React, { useState, useEffect } from 'react';\n\nimport Level from './Level';\nimport supabase, { BEST_GUESSES_TABLE, fetchOrCreate, GAMES_TABLE, GAME_LEVELS_TABLE, GAME_LEVEL_HINTS_TABLE, GUESSES_TABLE, HINTS_TABLE, LEVELS_TABLE } from '../supabase';\nimport Login from './Login';\nimport { User } from '@supabase/supabase-js';\nimport Path from './Path';\nimport Button from './Button';\nimport { fisherYates } from '../utils';\nimport Settings from './Settings';\nimport { Link } from 'react-router-dom';\nimport Tutorial from './Tutorial';\n\nconst Game: React.FC = () => {\n  const [auth, setAuth] = useState<AuthData>();\n  const [guessLimit, setGuessLimit] = useState<number>();\n\n  const [levels, setLevels] = useState<LevelsData>();\n\n  const fetchLevels = async () => {\n    const { data, error } = await supabase.from(LEVELS_TABLE).select().order(\"id\");\n    // if (data) fisherYates(data);\n    setLevels({ data, error });\n  }\n\n  useEffect(() => {\n    if (!levels) fetchLevels()\n  }, [levels]);\n\n  if (!auth) {\n    return (\n      <div className=\"login-container\">\n        <Login\n          onAuth={(auth, guessLimit, isNew) => {\n            setAuth({ ...auth, isNew });\n            setGuessLimit(guessLimit);\n          }}\n        />\n\n        <Link to=\"/leaderboard\" className=\"leaderboard-link\">\n          leaderboard\n        </Link>\n      </div>\n    );\n  }\n\n  if (!levels || !levels.data || !auth || !auth.user || !auth.session || !guessLimit) {\n    return (\n      <div className=\"login-container\">\n        <span>\n          Carregando ou erro kkkk\n        </span>\n      </div>\n    )\n  }\n\n  return <InternalGame auth={auth as FulfilledAuthData} guessLimit={guessLimit} levels={levels.data} />\n}\n\nconst InternalGame: React.FC<GameProps> = ({ auth, guessLimit, levels }) => {\n  const [game, setGame] = useState<GameEntity>();\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [bestGuesses, setBestGuesses] = useState<BestGuess[]>();\n\n  const fetchOrCreateGame = async (user: User, guessLimit: number) => {\n    const game = await fetchOrCreate<GameEntity>(\n      GAMES_TABLE,\n      { user_id: user.id, guess_limit: guessLimit },\n      {},\n    );\n    if (game) {\n      setGame(game);\n    }\n  }\n\n  const fetchBestGuesses = async (game: GameEntity, levels: LevelEntity[]) => {\n    const { data, error } = await supabase\n      .from(BEST_GUESSES_TABLE)\n      .select(`*, ${GAME_LEVELS_TABLE}!inner(*, ${LEVELS_TABLE}!inner(*))`)\n      .order(\"distance\")\n      .eq(`${GAME_LEVELS_TABLE}.game_id`, game.id);\n\n    if (data) {\n      setBestGuesses(levels.map(level => ({\n        level,\n        guess: data.find(d => d.game_levels.level_id === level.id)\n      })));\n    }\n  }\n\n  useEffect(() => {\n    if (!game) fetchOrCreateGame(auth.user, guessLimit);\n  }, [game, guessLimit, auth.user])\n\n  useEffect(() => {\n    if (game && levels) fetchBestGuesses(game, levels);\n  }, [game, levels])\n\n  if (!game) {\n    return null;\n  }\n\n  const level = levels[currentLevel];\n  if (!level) {\n    return <span>Nenhum nível aqui!</span>;\n  }\n\n  return (\n    <div className=\"game-container full\">\n      <VeryInternalGame\n        key={currentLevel}\n        auth={auth}\n        level={level}\n        game={game}\n        onGuess={() => fetchBestGuesses(game, levels)}\n        onNext={() => setCurrentLevel(prev => prev + 1)}\n      />\n\n      <div className=\"game-footer\">\n        <div>\n          <Settings />\n\n          <Tutorial guessLimit={game.guess_limit} show={auth.isNew} />\n        </div>\n\n        <div>\n          <Path\n            levels={levels}\n            bestGuesses={bestGuesses || []}\n            current={currentLevel}\n            onLevelClick={setCurrentLevel}\n          />\n\n          <Button onClick={() => setCurrentLevel(prev => prev + 1)}>\n            Pular\n          </Button>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nconst VeryInternalGame: React.FC<{ auth: FulfilledAuthData, level: LevelEntity, game: GameEntity, onGuess: () => void, onNext: () => void }> = ({ auth, game, level, onGuess, onNext }) => {\n  const [gameLevel, setGameLevel] = useState<GameLevelEntity>();\n  const [guesses, setGuesses] = useState<GuessEntity[]>();\n  const [hints, setHints] = useState<HintEntity[]>();\n  const [hintsViewed, setHintsViewed] = useState<GameLevelHintEntity[]>();\n\n  const fetchOrCreateUserLevel = async (game: GameEntity, level: LevelEntity) => {\n    const gameLevel = await fetchOrCreate<GameLevelEntity>(\n      GAME_LEVELS_TABLE,\n      { game_id: game.id, level_id: level.id },\n      { time_elapsed: 0 },\n    )\n    if (gameLevel) {\n      setGameLevel(gameLevel);\n    }\n  }\n\n  const fetchGuesses = async (gameLevel: GameLevelEntity) => {\n    const { data, error } = await supabase.from(GUESSES_TABLE).select().match({ game_level_id: gameLevel.id });\n\n    if (data) {\n      setGuesses(data);\n    }\n  }\n\n  const fetchHintsViewed = async (gameLevel: GameLevelEntity) => {\n    const { data, error } = await supabase.from(GAME_LEVEL_HINTS_TABLE).select().match({ game_level_id: gameLevel.id });\n\n    if (data) {\n      setHintsViewed(data);\n    }\n  }\n\n  const fetchHints = async (level: LevelEntity) => {\n    const { data, error } = await supabase.from(HINTS_TABLE).select().match({ level_id: level.id });\n\n    if (data) {\n      setHints(data);\n    }\n  }\n\n  useEffect(() => {\n    if (!gameLevel) fetchOrCreateUserLevel(game, level);\n  }, [gameLevel, game, level]);\n\n  useEffect(() => {\n    if (gameLevel) {\n      fetchGuesses(gameLevel);\n      fetchHintsViewed(gameLevel);\n    }\n  }, [gameLevel]);\n\n  useEffect(() => {\n    if (level) fetchHints(level);\n  }, [level]);\n\n  if (!gameLevel) {\n    return null;\n  }\n\n  const handleTimePass = async (time: number) => {\n    await supabase\n      .from(GAME_LEVELS_TABLE)\n      .update({ time_elapsed: time })\n      .match({ game_id: game.id, level_id: level.id });\n  }\n\n  const handleHintView = async (hint: HintEntity, time: number) => {\n    const { data, error } = await supabase\n      .from(GAME_LEVEL_HINTS_TABLE)\n      .insert({ game_level_id: gameLevel.id, hint_id: hint.id, time_elapsed: time });\n\n    handleTimePass(time);\n\n    if (data && data[0]) {\n      setHintsViewed(prev => [...(prev || []), data[0]]);\n    }\n  }\n\n  const handleGuess = async (marker: google.maps.LatLngLiteral, osmData: OSMData, time: number, distance: number) => {\n    const { data, error } = await supabase\n      .from(GUESSES_TABLE)\n      .insert({\n        game_level_id: gameLevel.id,\n        distance: distance,\n        lat: marker.lat,\n        lng: marker.lng,\n        time_elapsed: time,\n        data: osmData,\n        hints_viewed: (hintsViewed || []).length\n      });\n\n    handleTimePass(time);\n\n    if (data && data[0]) {\n      setGuesses(prev => [...(prev || []), data[0]])\n      onGuess();\n      return data[0];\n    }\n\n    return null;\n  }\n\n  return (\n    <Level\n      current={level}\n      hints={hints || []}\n      guessLimit={game.guess_limit}\n      startTime={gameLevel.time_elapsed}\n      guesses={guesses || []}\n      hintsViewed={hintsViewed || []}\n      onNext={onNext}\n      onGuess={handleGuess}\n      onHintViewed={handleHintView}\n      onTimePassed={handleTimePass}\n    />\n  );\n};\n\nexport default Game;\n","import { PostgrestError } from \"@supabase/supabase-js\";\nimport supabase, { BEST_GUESSES_TABLE, GAMES_TABLE, GAME_LEVELS_TABLE, LEVELS_TABLE, PROFILES_TABLE } from \"../supabase\";\nimport React, { FormEvent, useEffect, useState } from \"react\";\nimport Button from \"./Button\";\nimport { isSameOSMPlace } from \"./OpenStreetMapData\";\n\nconst Leaderboard: React.FC = () => {\n  const [levels, setLevels] = useState<LevelEntity[]>();\n\n  const fetchLevels = async () => {\n    const { data, error } = await supabase.from(LEVELS_TABLE).select().order(\"id\");\n    if (data) {\n      setLevels(data);\n    }\n  }\n\n  useEffect(() => {\n    if (!levels) fetchLevels()\n  }, [levels]);\n\n  if (!levels) {\n    return null;\n  }\n\n  return <InternalLeaderboard levels={levels} />;\n}\n\nconst fetchLeaderboard = async (guessLimit = 5, levelId = 0): Promise<{ data: LeaderboardData[] | null, error: PostgrestError | null }> => {\n  let query = supabase\n    .from(BEST_GUESSES_TABLE)\n    .select(`*, ${GAME_LEVELS_TABLE}!inner(*, ${LEVELS_TABLE}!inner(*), ${GAMES_TABLE}!inner(*, ${PROFILES_TABLE}!inner(*)))`)\n    .eq(`${GAME_LEVELS_TABLE}.${GAMES_TABLE}.guess_limit`, guessLimit);\n\n  if (levelId !== 0) {\n    query = query.eq(`${GAME_LEVELS_TABLE}.level_id`, levelId);\n  }\n\n  const { data, error } = await query.order('distance');\n\n  return { data, error };\n}\n\nconst LevelLeaderboard: React.FC<{ guessLimit: number, levelId: number  }> = ({ guessLimit, levelId }) => {\n  const [data, setData] = useState<LeaderboardData[]>();\n  const [, setError] = useState<PostgrestError>();\n\n  useEffect(() => {\n    setData(undefined);\n    setError(undefined);\n    fetchLeaderboard(guessLimit, levelId).then(({ data, error }) => {\n      if (data) {\n        setData(data);\n      }\n      if (error) {\n        setError(error);\n      }\n    })\n  }, [guessLimit, levelId]);\n\n  if (!data) {\n    return <span>Loading...</span>;\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Nome</th>\n            <th>Distância</th>\n            <th>Acertou?</th>\n            <th>Tempo</th>\n            <th>Dicas Usadas</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {data.map((d, index) => (\n            <tr key={d.game_levels.games.profiles.name}>\n              <td>{index + 1}</td>\n              <td>{d.game_levels.games.profiles.name}</td>\n              <td>{(d.distance / 1000).toFixed(2)}</td>\n              <td>{isSameOSMPlace(d.data.address, d.game_levels.levels.data.address) ? \"SIM\" : \"NÃO\"}</td>\n              <td>{d.time_elapsed}</td>\n              <td>{d.hints_viewed}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst GeneralLeaderboard: React.FC<{ guessLimit: number }> = ({ guessLimit }) => {\n  const [data, setData] = useState<GeneralLeaderboardData[]>();\n  const [, setError] = useState<PostgrestError>();\n\n  useEffect(() => {\n    setData(undefined);\n    setError(undefined);\n\n    fetchLeaderboard(guessLimit).then(({ data, error }) => {\n      if (data) {\n        const generalData: GeneralLeaderboardData[] = [];\n        for (const guess of data) {\n          const userGeneralData = generalData.find(gd => gd.user.id === guess.game_levels.games.profiles.id);\n          if (!userGeneralData) {\n            generalData.push({\n              user: guess.game_levels.games.profiles,\n              guesses: [guess],\n              totalGuesses: 0,\n              totalTime: 0,\n              totalDistance: 0,\n              averageDistance: 0,\n              averageTime: 0,\n              correctGuesses: 0,\n            })\n          } else {\n            userGeneralData.guesses.push(guess);\n          }\n        }\n\n        for (const item of generalData) {\n          item.totalGuesses = item.guesses.length;\n          item.correctGuesses = item.guesses.reduce((agg, crr) => agg + Number(isSameOSMPlace(crr.data.address, crr.game_levels.levels.data.address)), 0);\n          item.totalDistance = item.guesses.reduce((agg, crr) => agg + (crr.distance / 1000), 0);\n          item.totalTime = item.guesses.reduce((agg, crr) => agg + crr.time_elapsed, 0);\n          item.averageDistance = item.totalDistance / item.totalGuesses;\n          item.averageTime = item.totalTime / item.totalGuesses;\n        }\n\n        // Sort by correctGuesses, then by averageDistance, then by Average Time\n        setData(generalData.sort((a, b) => a.totalGuesses - b.totalGuesses || a.correctGuesses - b.correctGuesses || a.averageDistance - b.averageDistance || a.averageTime - b.averageTime));\n      }\n      if (error) {\n        setError(error);\n      }\n    })\n  }, [guessLimit]);\n\n  if (!data) {\n    return <span>Loading...</span>;\n  }\n\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Nome</th>\n            <th>Palpites Totais</th>\n            <th>Palpites Acertados</th>\n            <th>Distância Total</th>\n            <th>Tempo Total</th>\n            <th>Distância Média</th>\n            <th>Tempo Médio</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {data.map((d, index) => (\n            <tr key={d.user.id}>\n              <td>{index + 1}</td>\n              <td>{d.user.name}</td>\n              <td>{d.totalGuesses}</td>\n              <td>{d.correctGuesses}</td>\n              <td>{d.totalDistance.toFixed(2)}</td>\n              <td>{d.totalTime}s</td>\n              <td>{d.averageDistance.toFixed(2)}</td>\n              <td>{d.averageTime.toFixed(2)}s</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst InternalLeaderboard: React.FC<{ levels: LevelEntity[] }> = ({ levels }) => {\n  const [guessLimit, setGuessLimit] = useState<number>(5);\n  const [levelId, setLevelId] = useState<number>(0);\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setGuessLimit(Number((event.target as HTMLFormElement)[\"guess_limit\"].value || \"0\"));\n    setLevelId(Number((event.target as HTMLFormElement)[\"level_id\"].value || \"0\"));\n  }\n\n  return (\n    <div className=\"leaderboard\">\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"level_id\">\n            Nível\n          </label>\n          <select name=\"level_id\" id=\"level_id\" defaultValue={0}>\n            <option value={0}>Todos</option>\n            {levels.map(level => <option key={level.id} value={level.id}>{level.id}</option>)}\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"guess_limit\">\n            Número de palpites\n          </label>\n          <select name=\"guess_limit\" id=\"guess_limit\" defaultValue={5}>\n            <option value=\"0\">Ilimitado</option>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n            <option value=\"7\">7</option>\n            <option value=\"8\">8</option>\n            <option value=\"9\">9</option>\n            <option value=\"10\">10</option>\n          </select>\n        </div>\n\n        <div>\n          <Button>Confirmar</Button>\n        </div>\n      </form>\n\n      {levelId === 0 ? (\n        <GeneralLeaderboard guessLimit={guessLimit} />\n      ) : (\n        <LevelLeaderboard guessLimit={guessLimit} levelId={levelId} />\n      )}\n    </div>\n  );\n}\n\nexport default Leaderboard;\n","import React, { useEffect } from \"react\";\nimport supabase, { GAME_LEVELS_TABLE, GUESSES_TABLE, LEVELS_TABLE } from \"../supabase\";\n\nasync function update() {\n  const { data, error } = await supabase\n    .from(GUESSES_TABLE)\n    .select(`*, ${GAME_LEVELS_TABLE}!guesses_game_level_id_fkey(*, ${LEVELS_TABLE}!inner(*))`);\n\n  if (!data) {\n    return;\n  }\n\n  debugger\n\n  for (const item of data) {\n    const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\n      new google.maps.LatLng(item),\n      new google.maps.LatLng(item.game_levels.levels)\n    );\n    await supabase.from(GUESSES_TABLE).update({ distance }).match({ id: item.id })\n  }\n\n  console.log(data)\n}\n\nconst Debug: React.FC = () => {\n  useEffect(() => {\n    // update();\n  }, [])\n\n  return null;\n}\n\nexport default Debug;","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport Game from './Game';\nimport Leaderboard from './Leaderboard';\nimport Debug from './Debug';\n\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n    libraries: [\"geometry\"],\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"/leaderboard\" element={<Leaderboard />} />\n          <Route path=\"/debug\" element={<Debug />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <BrowserRouter basename='/tcc-learning'>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}