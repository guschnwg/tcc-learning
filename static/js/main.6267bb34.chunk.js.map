{"version":3,"sources":["click-2.wav","components/Button.tsx","components/Map.tsx","components/Modal.tsx","components/Flag.tsx","components/OpenStreetMapData.tsx","components/Spinner.tsx","components/Stopwatch.tsx","components/StreetView.tsx","components/Level.tsx","components/Path.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["click","Audio","clickSound","load","Button","children","props","onClick","event","play","defaultCoordinates","lat","lng","Map","coordinates","zoom","onMapClick","mapContainerStyle","height","center","Modal","show","onHide","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","style","overlay","backgroundColor","undefined","content","inset","border","background","borderRadius","color","Flag","name","code","alt","width","src","OpenStreetMapsData","data","className","distance","city","address","town","municipality","county","village","console","log","district","neighbourhood","suburb","city_district","state","region","country","country_code","toUpperCase","Spinner","borderColor","total","seconds","minutes","hours","days","Stopwatch","onChange","useStopwatch","autoStart","useEffect","StreetView","streetViewPanoramaOptions","position","pov","heading","pitch","visible","enableCloseButton","disableDefaultUI","options","fetcher","url","fetch","then","r","json","Data","onConfirm","useSWR","suspense","error","PlaceChooser","marker","useState","showInfoWindow","setShowInfoWindow","onPositionChanged","onLoad","onCloseClick","Suspense","fallback","PlaceChooserModal","setMarker","e","latLng","toJSON","Hints","hints","hintsViewed","onTipView","map","hint","find","h","id","description","Level","current","userData","onNext","onGuess","onHintViewed","mapModalOpened","setMapModalOpened","hintsModalOpened","setHintsModalOpened","time","useRef","useMemo","filter","viewed","length","extraPoints","prev","location","mk1","mk2","rlat1","Math","PI","rlat2","difflat","difflon","asin","sqrt","sin","cos","haversineDistance","index","Path","levels","onLevelClick","setShow","stateClass","sliderRef","useDimensions","ref","settings","slidesToShow","floor","slidesToScroll","infinite","waitForAnimate","prevArrow","icon","faChevronLeft","nextArrow","faChevronRight","faChevronDown","faChevronUp","level","d","level_id","bestGuess","guesses","sort","g1","g2","hints_viewed","Game","setIndex","JSON","parse","stringify","_userData","setUserData","handleNext","toIndex","nextIndex","ud","push","l","levelData","theGuess","hintIndex","theHint","COORDINATES","App","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","countries","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.6267bb34.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click-2.66336ee5.wav\";","import React from \"react\";\nimport clickSound from \"../click-2.wav\";\n\ntype Props = JSX.IntrinsicElements[\"button\"]\n\nconst click = new Audio(clickSound);\nclick.load();\n\nconst Button: React.FC<Props> = ({ children, ...props}) => {\n    const handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n        click.play();   \n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    }\n\n    return (\n        <button {...props} onClick={handleClick}>\n            {children}\n        </button>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface Props {\n  coordinates?: { lat: number; lng: number };\n  zoom?: number;\n  onMapClick?: ((e: google.maps.MapMouseEvent) => void) | undefined;\n}\n\nconst defaultCoordinates = {\n  lat: -13.8860709,\n  lng: -57.2789963,\n};\nconst defaultZoom = 4.5;\n\nconst Map: React.FC<Props> = ({ coordinates = defaultCoordinates, zoom = defaultZoom, children, onMapClick }) => {\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={zoom} onClick={onMapClick}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\ninterface Props {\n  show: boolean;\n  onHide: () => void;\n}\n\nconst Modal: React.FC<Props> = ({ children, show, onHide }) => {\n  return (\n    <ReactModal\n      isOpen={show}\n      onRequestClose={onHide}\n      shouldCloseOnEsc\n      shouldCloseOnOverlayClick\n      style={{\n        overlay: {\n          backgroundColor: undefined,\n        },\n        content: {\n          inset: '150px 40px 40px 40px',\n          border: '1px solid #1d246e',\n          background: '#323dbb',\n          borderRadius: '12px',\n          color: 'white',\n        },\n      }}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React, { PropsWithChildren } from \"react\";\nimport Flag from \"./Flag\";\n\nexport default function OpenStreetMapsData({ data, className = \"\", distance, children }: PropsWithChildren<OpenStreetMapDataProps>) {\n  const city = data.address.city || data.address.town || data.address.municipality || data.address.county || data.address.village;\n  if (!city) {\n    console.log(data);\n  }\n\n  const district = data.address.neighbourhood || data.address.suburb || data.address.city_district;\n\n  return (\n    <div className={`data-container ${className}`}>\n      {district && <span>Bairro: {district}</span>}\n      {city && <span>Cidade: {city}</span>}\n      {data.address.state && <span>Estado: {data.address.state}</span>}\n      {data.address.region && <span>Região: {data.address.region}</span>}\n      {data.address.country && data.address.country_code && (\n        <span className=\"country\">\n          País: {data.address.country}\n          <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n        </span>\n      )}\n      {distance && (<span>Distância: {distance} km</span>)}\n      {children}\n    </div>\n  );\n}\n","import React from \"react\"\nimport CSS from 'csstype';\n\n\ninterface Props {\n    color?: CSS.Property.Color\n}\n\nconst Spinner: React.FC<Props> = ({ color = \"white\" }) => {\n    return (\n        <div className=\"spinner\" style={{ borderColor: color }} >\n            <div style={{ borderColor: color }} />\n            <div style={{ borderColor: color }} />\n        </div>\n    )\n}\n\nexport default Spinner","import React, { useEffect } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst total = (seconds: number, minutes: number, hours: number, days: number): number => seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24\n\ninterface Props {\n  onChange?: (total: number) => void\n}\n\nconst Stopwatch: React.FC<Props> = ({ children, onChange }) => {\n  const { seconds, minutes, hours, days } = useStopwatch({ autoStart: true });\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(total(seconds, minutes, hours, days))\n    }\n  }, [onChange, seconds, minutes, hours, days])\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch-time shaking\">⏰</div>\n      <span className=\"stopwatch-time\">\n        {total(seconds, minutes, hours, days)}\n\n        {children}\n      </span>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\n\ninterface Props {\n  coordinates?: { lat: number; lng: number };\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetView: React.FC<Props> = ({ coordinates = defaultCoordinates }) => {\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n    disableDefaultUI: true,\n  };\n\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={10}>\n      <StreetViewPanorama options={streetViewPanoramaOptions} />\n    </GoogleMap>\n  );\n};\n\nexport default StreetView;\n","import { InfoWindow, Marker } from '@react-google-maps/api';\nimport React, { useMemo, useRef, useState } from 'react';\nimport useSWR from 'swr';\nimport _data from '../data.json';\nimport _userData from '../user-data.json';\nimport Button from './Button';\n\nimport Flag from './Flag';\nimport Map from './Map';\nimport Modal from './Modal';\nimport OpenStreetMapsData from './OpenStreetMapData';\nimport Spinner from './Spinner';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst haversineDistance = (mk1: google.maps.LatLngLiteral, mk2: google.maps.LatLngLiteral) => {\n  const R = 3958.8; // Radius of the Earth in miles\n  const rlat1 = mk1.lat * (Math.PI / 180); // Convert degrees to radians\n  const rlat2 = mk2.lat * (Math.PI / 180); // Convert degrees to radians\n  const difflat = rlat2 - rlat1; // Radian difference (latitudes)\n  const difflon = (mk2.lng - mk1.lng) * (Math.PI / 180); // Radian difference (longitudes)\n\n  const d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n  return d;\n}\n\nconst Data = ({ position, onConfirm }: { position: google.maps.LatLngLiteral, onConfirm: (data: OSMData) => void }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  if (data.error || !data.address) {\n    return <span className='data-container'>Not able to get data, try again.</span>;\n  }\n\n  return (\n    <>\n      <OpenStreetMapsData data={data} />\n\n      <Button onClick={() => onConfirm(data)}>Confirmar</Button>\n    </>\n  )\n};\n\nconst PlaceChooser = ({ marker, onMapClick, onConfirm }: any) => {\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\n\n  return (\n    <div className=\"full\">\n      <div className=\"full\">\n        <Map\n          onMapClick={onMapClick}\n        >\n          {marker && (\n            <Marker\n              position={marker}\n              onClick={() => setShowInfoWindow(true)}\n              onPositionChanged={() => setShowInfoWindow(true)}\n              onLoad={() => setShowInfoWindow(true)}\n            >\n              {showInfoWindow && (\n                <InfoWindow onCloseClick={() => setShowInfoWindow(false)}>\n                  <React.Suspense fallback={<Spinner color=\"#323dbb\" />}>\n                    <Data position={marker} onConfirm={onConfirm} />\n                  </React.Suspense>\n                </InfoWindow>\n              )}\n            </Marker>\n          )}\n        </Map>\n      </div>\n    </div>\n  )\n}\n\nconst PlaceChooserModal = ({ show, onHide, onConfirm }: PlaceChooserModalProps) => {\n  const [marker, setMarker] = useState<google.maps.LatLngLiteral>();\n\n  return (\n    <Modal show={show} onHide={onHide}>\n      <PlaceChooser\n        marker={marker}\n        onMapClick={(e: any) => {\n          if (e.latLng) {\n            setMarker(e.latLng.toJSON());\n          }\n        }}\n        onConfirm={(data: OSMData) => {\n          if (marker) {\n            onConfirm(marker, data);\n          }\n        }}\n      />\n    </Modal>\n  );\n};\n\ninterface HintsProps {\n  hints: typeof _data.levels[number][\"hints\"]\n  hintsViewed: typeof _userData[number][\"hints\"]\n  show: boolean\n  onHide: () => void\n  onTipView: (index: number) => void\n}\n\nconst Hints = ({ hints, hintsViewed, show, onHide, onTipView }: HintsProps) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <div className=\"full\">\n        <ul>\n          {hints.map((hint) => {\n            if (hintsViewed.find(h => h.id === hint.id)) {\n              return <li key={hint.id}>{hint.description}</li>;\n            }\n            return (\n              <li key={hint.id}>\n                <Button onClick={() => onTipView(hint.id)}>Mostrar</Button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </Modal>\n  );\n};\n\ninterface Props {\n  current: typeof _data.levels[number];\n  userData: typeof _userData[number];\n  onNext: () => void\n  onGuess: (data: any, time: number, distance: number) => void;\n  onHintViewed: (index: number, time: number) => void;\n}\n\nconst Level: React.FC<Props> = ({ current, userData, onNext, onGuess, onHintViewed }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [hintsModalOpened, setHintsModalOpened] = useState(false);\n  const time = useRef(0); // Not ideal, but :(\n\n  const hintsViewed = useMemo(\n    () => userData.hints.filter(h => h.viewed),\n    [userData.hints.length]\n  );\n  const extraPoints = hintsViewed.length * 100;\n\n  return (\n    <div className=\"game-container full\">\n      <div className=\"game-header\">\n        <div>\n          <Button onClick={() => setMapModalOpened((prev) => !prev)}>Palpitar</Button>\n          <Button onClick={() => setHintsModalOpened((prev) => !prev)}>\n            Dicas {hintsViewed.length}/{current.hints.length}\n          </Button>\n        </div>\n\n        <div>\n          <Stopwatch key={current.id} onChange={total => time.current = total}>\n            {extraPoints ? (\n              <span className=\"stopwatch-extra\">\n                (+{extraPoints})\n              </span>\n            ) : null}\n          </Stopwatch>\n        </div>\n\n        <div>\n          <Button onClick={onNext}>Pular</Button>\n        </div>\n      </div>\n\n      <div className=\"game-body full-height\">\n        <StreetView coordinates={current.coordinates} />\n      </div>\n\n      <PlaceChooserModal\n        show={mapModalOpened}\n        onHide={() => setMapModalOpened(false)}\n        onConfirm={(location, data) => {\n          onGuess(data, time.current, haversineDistance(location, current.coordinates));\n        }}\n      />\n\n      <Hints\n        hints={current.hints}\n        hintsViewed={hintsViewed}\n        show={hintsModalOpened}\n        onHide={() => setHintsModalOpened(false)}\n        onTipView={(index: number) => onHintViewed(index, time.current)}\n      />\n    </div>\n  );\n};\n\nexport default Level;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronUp, faChevronDown, faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons'\nimport React, { useRef, useState } from \"react\"\nimport data from '../data.json';\nimport _userData from '../user-data.json';\nimport Button from \"./Button\";\nimport \"slick-carousel/slick/slick.css\";\nimport useDimensions from \"react-use-dimensions\";\nimport Slider, { Settings } from \"react-slick\";\nimport OpenStreetMapsData from \"./OpenStreetMapData\";\n\n\ninterface Props {\n    levels: typeof data.levels\n    userData: typeof _userData\n    current: number\n    onLevelClick: (index: number) => void\n}\n\nconst Path: React.FC<Props> = ({ levels, userData, current, onLevelClick }) => {\n    const [show, setShow] = useState(false);\n    const stateClass = show ? \"shown\" : \"hidden\"\n    const sliderRef = useRef<React.LegacyRef<Slider>>()\n    const [ref, { width }] = useDimensions();\n\n    const settings: Settings = {\n        slidesToShow: width ? Math.floor((width) / (180 + 40)) : 1,\n        slidesToScroll: 4,\n        infinite: false,\n        waitForAnimate: false,\n        prevArrow: <Button><FontAwesomeIcon icon={faChevronLeft} /></Button>,\n        nextArrow: <Button><FontAwesomeIcon icon={faChevronRight} /></Button>,\n    };\n\n    return (\n        <div className={`path-container ${stateClass}`}>\n            <Button onClick={() => setShow(prev => !prev)}>\n                Níveis\n                {\" \"}\n                <FontAwesomeIcon icon={show ? faChevronDown : faChevronUp} />\n            </Button>\n\n            <div className=\"path-content\">\n                <div ref={ref}>\n                    <Slider {...settings} ref={sliderRef.current}>\n                        {levels.map(level => {\n                            const data = userData.find(d => d.level_id === level.id);\n\n                            let bestGuess = null;\n                            if (data && data.guesses) {\n                                bestGuess = data.guesses.sort((g1, g2) => g1.distance - g2.distance)[0];\n                            }\n\n                            return (\n                                <Button\n                                    key={level.id}\n                                    className={`path-content-level full ${current === level.id && \"current\"}`}\n                                    onClick={() => onLevelClick(level.id)}\n                                >\n                                    <span className={`level-number ${!bestGuess && \"never-tried\"}`}>{level.id}</span>\n\n                                    {bestGuess && (\n                                        <>\n                                            <OpenStreetMapsData\n                                                data={bestGuess.data as any}\n                                                className=\"best-guess\"\n                                                distance={bestGuess.distance}\n                                            >\n                                                <span>Dicas: {bestGuess.hints_viewed}</span>\n                                            </OpenStreetMapsData>\n                                        </>\n                                    )}\n                                </Button>\n                            );\n                        })}\n                    </Slider>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Path","import React, { useState } from 'react';\n\nimport data from '../data.json';\nimport _userData from '../user-data.json';\n\nimport Level from './Level';\nimport Path from './Path';\n\nconst Game: React.FC = () => {\n  const [index, setIndex] = useState(1);\n\n  const [userData, setUserData] = useState<typeof _userData>(JSON.parse(JSON.stringify(_userData)));\n\n  const handleHintViewed = (hintIndex: number, time: number) => {\n    setUserData((prev: typeof userData) => {\n      const theHint = {\n        \"id\": hintIndex,\n        \"viewed\": true,\n        \"timestamp\": time,\n      };\n      const levelData = prev.find(ud => ud.level_id === index);\n      if (levelData) {\n        levelData.hints.push(theHint);\n      } else {\n        prev.push({\n          \"id\": userData.length,\n          \"level_id\": index,\n          \"hints\": [theHint],\n          \"guesses\": [],\n          \"completed\": false,\n        })\n      }\n\n      return [...prev];\n    })\n  }\n\n  const handleNext = (toIndex?: number) => {\n    setUserData((prev: typeof userData) => {\n      const nextIndex = toIndex || index + 1;\n      const levelData = prev.find(ud => ud.level_id === nextIndex);\n      if (!levelData) {\n        prev.push({\n          \"id\": userData.length,\n          \"level_id\": nextIndex,\n          \"hints\": [],\n          \"guesses\": [],\n          \"completed\": false,\n        })\n      }\n\n      return [...prev];\n    })\n    setIndex((prev) => toIndex || prev + 1)\n  }\n\n  const handleGuess = (data: OSMData, time: number, distance: number) => {\n    setUserData((prev: typeof userData) => {\n      const levelData = prev.find(ud => ud.level_id === index);\n      const theGuess = {\n        \"id\": levelData ? levelData.guesses.length + 1 : 1,\n        \"distance\": distance,\n        \"timestamp\": time,\n        \"hints_viewed\": levelData ? levelData.hints.length : 0,\n        \"data\": data,\n      };\n      if (levelData) {\n        levelData.guesses.push(theGuess as any);\n      } else {\n        prev.push({\n          \"id\": userData.length,\n          \"level_id\": index,\n          \"hints\": [],\n          \"guesses\": [theGuess as any],\n          \"completed\": false,\n        })\n      }\n\n      return [...prev];\n    })\n  }\n\n  return (\n    <div className=\"full\">\n      <Level\n        current={data.levels.find(l => l.id === index)!}\n        userData={userData.find(ud => ud.level_id === index)!}\n        onNext={handleNext}\n        onGuess={handleGuess}\n        onHintViewed={handleHintViewed}\n      />\n\n      <Path\n        levels={data.levels}\n        userData={userData}\n        current={index}\n        onLevelClick={handleNext}\n      />\n    </div>\n  );\n};\n\nexport default Game;\n","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport Game from './Game';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}