{"version":3,"sources":["click-2.wav","components/Button.tsx","components/Stopwatch.tsx","components/Flag.tsx","components/OpenStreetMapData.tsx","components/StreetView.tsx","components/Map.tsx","components/Modal.tsx","components/Spinner.tsx","components/PlaceChooser.tsx","components/Hints.tsx","components/Level.tsx","supabase.ts","components/Login.tsx","components/Path.tsx","components/Game.tsx","components/Leaderboard.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["click","Audio","clickSound","load","Button","children","props","onClick","event","play","total","seconds","minutes","hours","days","Stopwatch","start","step","onChange","onStep","useStopwatch","autoStart","offsetTimestamp","Date","now","lastStepEmitted","useRef","useEffect","current","className","Flag","name","code","alt","height","width","src","OpenStreetMapsData","data","distance","city","address","town","municipality","county","village","console","log","district","neighbourhood","suburb","city_district","state","region","country","country_code","toUpperCase","defaultCoordinates","lat","lng","StreetViewMarker","streetViewPanorama","coordinates","useState","marker","setMarker","infoWindowRef","position","onLoad","e","infoWindow","open","ref","options","pixelOffset","google","maps","Size","StreetView","markers","guesses","showMarkers","setStreetViewPanorama","streetViewPanoramaOptions","clickToGo","pov","heading","pitch","zoom","visible","enableCloseButton","disableDefaultUI","mapContainerStyle","center","map","guess","Number","lon","id","index","DEFAULT_COORDINATES","getZoom","lat_a","lng_a","lat_b","lng_b","latRad","sin","Math","PI","radX2","max","min","latDif","abs","lngDif","latFrac","lngFrac","lngZoom","latZoom","Map","onMapClick","Modal","show","onHide","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","style","overlay","backgroundColor","undefined","content","inset","border","background","borderRadius","color","padding","Spinner","borderColor","fetcher","url","fetch","then","r","json","Data","showConfirmButton","onConfirm","useSWR","suspense","error","PlaceChooserMarker","placeCoords","guessCoords","showInfoWindow","onShowInfoWindow","showDistance","setShowDistance","ready","setReady","useMemo","mk1","mk2","rlat1","rlat2","difflat","difflon","asin","sqrt","cos","haversineDistance","zIndex","onPositionChanged","onCloseClick","Suspense","fallback","toFixed","PlaceChooserGuesses","showInfoWindowId","onGuessClick","sort","g1","g2","length","icon","time_elapsed","PlaceChooser","canGuess","mapCenter","setMapCenter","setZoom","setGuessCoords","setShowInfoWindowId","handleSubmit","preventDefault","locale","target","value","encoded","encodeURIComponent","response","boundingbox","onSubmit","clickableIcons","latLng","toJSON","PlaceChooserModal","Hints","hints","hintsViewed","onHintView","hint","hintView","find","h","hint_id","description","Level","guessLimit","startTime","onNext","onGuess","onHintViewed","onTimePassed","mapModalOpened","setMapModalOpened","hintsModalOpened","setHintsModalOpened","time","prev","supabase","createClient","process","GUESSES_TABLE","GAME_LEVELS_TABLE","GAME_LEVEL_HINTS_TABLE","LEVELS_TABLE","fetchOrCreate","table","match","insert","from","select","loginOrRegister","email","authData","password","auth","signIn","signUp","Login","onAuth","userName","alert","user","session","htmlFor","defaultValue","window","localStorage","getItem","Levels","bestGuesses","levels","onLevelClick","level","bestGuess","g","hints_viewed","Path","setShow","useDimensions","divider","margin","InternalGame","game","setGame","currentLevel","setCurrentLevel","setBestGuesses","fetchOrCreateGame","user_id","guess_limit","fetchBestGuesses","order","eq","d","game_levels","level_id","l","onLevelChange","VeryInternalGame","gameLevel","setGameLevel","setGuesses","setHints","setHintsViewed","fetchOrCreateUserLevel","game_id","fetchGuesses","game_level_id","fetchHintsViewed","fetchHints","handleHintView","handleGuess","osmData","handleTimePass","update","Game","setAuth","setLevels","fetchLevels","Leaderboard","COORDINATES","App","useJsApiLoader","googleMapsApiKey","isLoaded","loadError","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","countries","registerLocale","brCountries","ReactModal","setAppElement","document","getElementById","body","appendChild","createElement","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.4c6f153c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click-2.66336ee5.wav\";","import React from \"react\";\nimport clickSound from \"../click-2.wav\";\n\ntype Props = JSX.IntrinsicElements[\"button\"]\n\nconst click = new Audio(clickSound);\nclick.load();\n\nconst Button: React.FC<Props> = ({ children, ...props}) => {\n    const handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n        click.play();   \n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    }\n\n    return (\n        <button {...props} onClick={handleClick}>\n            {children}\n        </button>\n    )\n}\n\nexport default Button;","import React, { useEffect, useRef } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst total = (seconds: number, minutes: number, hours: number, days: number): number => seconds + minutes * 60 + hours * 60 * 60 + days * 60 * 60 * 24\n\ninterface Props {\n  start?: number\n  step?: number\n  onChange?: (total: number) => void\n  onStep?: (total: number) => void\n}\n\n\nconst Stopwatch: React.FC<Props> = ({ start = 0, step = 10, children, onChange, onStep }) => {\n  const { seconds, minutes, hours, days } = useStopwatch({\n    autoStart: true,\n    offsetTimestamp: new Date(Date.now() + start * 1000),\n  });\n  const lastStepEmitted = useRef<number>(start);\n\n  useEffect(() => {\n    const current = total(seconds, minutes, hours, days);\n\n    if (onChange) {\n      onChange(current)\n    }\n    if (onStep && current >= lastStepEmitted.current + step) {\n      onStep(current)\n      lastStepEmitted.current = current;\n    }\n\n  }, [onChange, seconds, minutes, hours, days, onStep, start, step])\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch-time shaking\">⏰</div>\n      <span className=\"stopwatch-time\">\n        {total(seconds, minutes, hours, days)}\n\n        {children}\n      </span>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\n\ninterface Props {\n  name: string;\n  code: string;\n}\n\nconst Flag: React.FC<Props> = ({ name, code }) => {\n  return (\n    <img\n      alt={name}\n      height={20}\n      width={30}\n      src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${code}.svg`}\n    />\n  );\n};\n\nexport default Flag;\n","import React from \"react\";\nimport Flag from \"./Flag\";\n\nconst OpenStreetMapsData: React.FC<OpenStreetMapDataProps> = ({ data, className = \"\", distance, children }) => {\n  const city = data.address.city || data.address.town || data.address.municipality || data.address.county || data.address.village;\n  if (!city) {\n    console.log(data);\n  }\n\n  const district = data.address.neighbourhood || data.address.suburb || data.address.city_district;\n\n  return (\n    <div className={`data-container ${className}`}>\n      {district && <span>Bairro: {district}</span>}\n      {city && <span>Cidade: {city}</span>}\n      {data.address.state && <span>Estado: {data.address.state}</span>}\n      {data.address.region && <span>Região: {data.address.region}</span>}\n      {data.address.country && data.address.country_code && (\n        <span className=\"country\">\n          País: {data.address.country}\n          <Flag name={data.address.country} code={((data.address.country_code as string) || '').toUpperCase()} />\n        </span>\n      )}\n      {distance && (<span>Distância: {distance} km</span>)}\n      {children}\n    </div>\n  );\n}\n\nexport default OpenStreetMapsData;\n","import React, { useRef, useState } from 'react';\nimport { GoogleMap, InfoWindow, Marker } from '@react-google-maps/api';\nimport { StreetViewPanorama } from '@react-google-maps/api';\nimport OpenStreetMapsData from './OpenStreetMapData';\n\ninterface Props {\n  markers?: LevelMarker[]\n  guesses?: GuessEntity[]\n  coordinates?: google.maps.LatLngLiteral\n}\n\ninterface StreetViewMarkerProps {\n  streetViewPanorama: google.maps.StreetViewPanorama\n  coordinates?: google.maps.LatLngLiteral\n}\n\nconst defaultCoordinates = {\n  lat: 10.99835602,\n  lng: 77.01502627,\n};\n\nconst StreetViewMarker: React.FC<StreetViewMarkerProps> = ({ streetViewPanorama, coordinates, children }) => {\n  const [marker, setMarker] = useState<google.maps.Marker>();\n  const infoWindowRef = useRef<InfoWindow>(null);\n\n  if (!coordinates) {\n    return null;\n  }\n\n  return (\n    <Marker\n      position={coordinates}\n      onLoad={(e) => setMarker(e)}\n      onClick={() => {\n        if (infoWindowRef.current && infoWindowRef.current.state.infoWindow) {\n          infoWindowRef.current.state.infoWindow.open(streetViewPanorama);\n        }\n      }}\n    >\n      {children && marker && (\n        <InfoWindow\n          ref={infoWindowRef}\n          options={{pixelOffset: new google.maps.Size(0, -50, 'px', 'px')}}\n        >\n          {children}\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst StreetView: React.FC<Props> = ({ markers = [], guesses = [], coordinates = defaultCoordinates }) => {\n  const [showMarkers] = useState(false);\n  const [streetViewPanorama, setStreetViewPanorama] = useState<google.maps.StreetViewPanorama>();\n\n  const streetViewPanoramaOptions: google.maps.StreetViewPanoramaOptions = {\n    clickToGo: true,\n    position: coordinates,\n    pov: { heading: 0, pitch: 0 },\n    zoom: 1,\n    visible: true,\n    enableCloseButton: false,\n    disableDefaultUI: true,\n  };\n\n  return (\n    <>\n      <GoogleMap\n        mapContainerStyle={{ height: '100%' }}\n        center={coordinates}\n        zoom={10}\n      >\n        <StreetViewPanorama\n          onLoad={e => setStreetViewPanorama(e)}\n          options={streetViewPanoramaOptions}\n        />\n\n        {showMarkers && streetViewPanorama && (\n          <>\n            <StreetViewMarker\n              streetViewPanorama={streetViewPanorama}\n              coordinates={coordinates}\n            >\n              <span>This is the initial location</span>\n            </StreetViewMarker>\n\n            {guesses.map(guess => (\n              <StreetViewMarker\n                key={guess.id}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={{ lat: Number(guess.data.lat), lng: Number(guess.data.lon) }}\n              >\n                <OpenStreetMapsData data={guess.data} />\n              </StreetViewMarker>\n            ))}\n\n            {markers.map((marker, index) => (\n              <StreetViewMarker\n                key={index}\n                streetViewPanorama={streetViewPanorama}\n                coordinates={marker.coordinates}\n              >\n                <span>{marker.data}</span>\n              </StreetViewMarker>\n            ))}\n          </>\n        )}\n      </GoogleMap>\n    </>\n  );\n};\n\nexport default StreetView;\n","import React from 'react';\nimport { GoogleMap } from '@react-google-maps/api';\n\ninterface Props {\n  options?: google.maps.MapOptions\n  coordinates?: { lat: number; lng: number };\n  zoom?: number;\n  onMapClick?: ((e: google.maps.MapMouseEvent) => void) | undefined;\n}\n\nexport const DEFAULT_COORDINATES = {\n  lat: -13.8860709,\n  lng: -57.2789963,\n};\nexport const DEFAULT_ZOOM = 4.5;\n\nexport function getZoom(lat_a: number, lng_a: number, lat_b: number, lng_b: number): number {\n  function latRad(lat: number) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n    return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n  }\n\n  const latDif = Math.abs(latRad(lat_a) - latRad(lat_b))\n  const lngDif = Math.abs(lng_a - lng_b)\n\n  const latFrac = latDif / Math.PI\n  const lngFrac = lngDif / 360\n\n  const lngZoom = Math.log(1 / latFrac) / Math.log(2)\n  const latZoom = Math.log(1 / lngFrac) / Math.log(2)\n\n  return Math.min(lngZoom, latZoom)\n}\n\nconst Map: React.FC<Props> = ({ coordinates = DEFAULT_COORDINATES, zoom = DEFAULT_ZOOM, options = {}, children, onMapClick }) => {\n  return (\n    <GoogleMap mapContainerStyle={{ height: '100%' }} center={coordinates} zoom={zoom} options={options} onClick={onMapClick}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\ninterface Props {\n  show: boolean;\n  onHide: () => void;\n}\n\nconst Modal: React.FC<Props> = ({ children, show, onHide }) => {\n  return (\n    <ReactModal\n      isOpen={show}\n      onRequestClose={onHide}\n      shouldCloseOnEsc\n      shouldCloseOnOverlayClick\n      style={{\n        overlay: {\n          backgroundColor: undefined,\n        },\n        content: {\n          inset: '150px',\n          border: '1px solid #1d246e',\n          background: '#323dbb',\n          borderRadius: '12px',\n          color: 'white',\n          padding: '10px',\n        },\n      }}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from \"react\"\nimport CSS from 'csstype';\n\n\ninterface Props {\n    color?: CSS.Property.Color\n}\n\nconst Spinner: React.FC<Props> = ({ color = \"white\" }) => {\n    return (\n        <div className=\"spinner\" style={{ borderColor: color }} >\n            <div style={{ borderColor: color }} />\n            <div style={{ borderColor: color }} />\n        </div>\n    )\n}\n\nexport default Spinner","import React, { FormEvent, useEffect, useMemo, useState } from 'react';\nimport { InfoWindow, Marker } from '@react-google-maps/api';\nimport useSWR from 'swr';\nimport Button from './Button';\n\nimport Map, { DEFAULT_COORDINATES, DEFAULT_ZOOM, getZoom } from './Map';\nimport Modal from './Modal';\nimport OpenStreetMapsData from './OpenStreetMapData';\nimport Spinner from './Spinner';\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json());\n\nconst haversineDistance = (mk1: google.maps.LatLngLiteral, mk2: google.maps.LatLngLiteral) => {\n  const R = 3958.8; // Radius of the Earth in miles\n  const rlat1 = mk1.lat * (Math.PI / 180); // Convert degrees to radians\n  const rlat2 = mk2.lat * (Math.PI / 180); // Convert degrees to radians\n  const difflat = rlat2 - rlat1; // Radian difference (latitudes)\n  const difflon = (mk2.lng - mk1.lng) * (Math.PI / 180); // Radian difference (longitudes)\n\n  const d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n  return d;\n}\n\nconst Data: React.FC<{ position: google.maps.LatLngLiteral, showConfirmButton: boolean, onConfirm?: (data: OSMData) => void }> = ({ position, showConfirmButton, onConfirm, children }) => {\n  const { data } = useSWR(\n    `https://nominatim.openstreetmap.org/reverse.php?lat=${position.lat}&lon=${position.lng}&zoom=18&format=jsonv2`,\n    fetcher,\n    { suspense: true }\n  );\n\n  if (data.error || !data.address) {\n    return <span className='data-container'>Não consegui localizar, tente novamente.</span>;\n  }\n\n  return (\n    <>\n      <OpenStreetMapsData data={data}>\n        {children}\n      </OpenStreetMapsData>\n\n      {showConfirmButton && <Button onClick={() => onConfirm && onConfirm(data)}>Confirmar</Button>}\n    </>\n  );\n};\n\nconst PlaceChooserMarker: React.FC<PlaceChooserMarkerProps> = ({ placeCoords, guessCoords, showInfoWindow, onShowInfoWindow, onConfirm }) => {\n  const [showDistance, setShowDistance] = useState(false);\n  const [ready, setReady] = useState(false);\n  const distance = useMemo(() => {\n    return haversineDistance(guessCoords, placeCoords);\n  }, [guessCoords, placeCoords]);\n\n  useEffect(() => {\n    setShowDistance(false);\n  }, [guessCoords])\n\n  const handleConfirm = (data: OSMData) => {\n    setShowDistance(true);\n    onConfirm(guessCoords, data, distance);\n  }\n\n  return (\n    <Marker\n      position={guessCoords}\n      zIndex={0}\n      onClick={() => onShowInfoWindow(true)}\n      onPositionChanged={() => onShowInfoWindow(true)}\n      onLoad={() => setReady(true)}\n    >\n      {showInfoWindow && ready && (\n        <InfoWindow onCloseClick={() => onShowInfoWindow(false)}>\n          <React.Suspense fallback={<Spinner color=\"#323dbb\" />}>\n            <Data position={guessCoords} showConfirmButton={!showDistance} onConfirm={handleConfirm}>\n              {showDistance && (\n                <span>Distância: {distance.toFixed(2)}km</span>\n              )}\n            </Data>\n          </React.Suspense>\n        </InfoWindow>\n      )}\n    </Marker>\n  )\n}\n\nconst PlaceChooserGuesses: React.FC<{ showInfoWindowId?: number, guesses: GuessEntity[], onGuessClick: (id?: number) => void }> = ({ showInfoWindowId, guesses, onGuessClick }) => {\n  return (\n    <>\n      {guesses.sort((g1, g2) => g1.distance - g2.distance).map((guess, index) => {\n        let color = \"red\";\n        if (guess.distance < 30) {\n          color = \"blue\";\n        } else if (guess.distance < 100) {\n          color = \"green\";\n        } else if (guess.distance < 300) {\n          color = \"yellow\";\n        } else if (guess.distance < 1000) {\n          color = \"orange\";\n        }\n\n        if (index === 0) {\n          color += \"-dot\";\n        }\n\n        return (\n          <Marker\n            key={guess.id}\n            zIndex={guesses.length + 1 - index}\n            position={guess}\n            icon={`https://maps.google.com/mapfiles/ms/icons/${color}.png`}\n            onClick={() => onGuessClick(guess.id)}\n          >\n            {showInfoWindowId === guess.id && (\n              <InfoWindow onCloseClick={() => onGuessClick(undefined)}>\n                <OpenStreetMapsData data={guess.data}>\n                  <span>Distância: {guess.distance.toFixed(2)}km</span>\n                  <span>Palpite aos {guess.time_elapsed}s</span>\n                </OpenStreetMapsData>\n              </InfoWindow>\n            )}\n          </Marker>\n        )}\n      )}\n    </>\n  )\n}\n\nconst PlaceChooser: React.FC<PlaceChooserProps> = ({ placeCoords, canGuess, guesses, onConfirm }) => {\n  const [mapCenter, setMapCenter] = useState(DEFAULT_COORDINATES);\n  const [zoom, setZoom] = useState(DEFAULT_ZOOM);\n  const [guessCoords, setGuessCoords] = useState<google.maps.LatLngLiteral>();\n  const [showInfoWindowId, setShowInfoWindowId] = useState<number>();\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const locale = (event.target as HTMLFormElement)[\"locale\"].value;\n    const encoded = encodeURIComponent(locale);\n\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/search.php?q=${encoded}&polygon_geojson=1&format=jsonv2`\n    )\n    const data = await response.json();\n\n    if (data && data[0]) {\n      setMapCenter({\n        lat: Number(data[0].lat),\n        lng: Number(data[0].lon),\n      });\n      const zoom = getZoom(\n        Number(data[0].boundingbox[0]),\n        Number(data[0].boundingbox[2]),\n        Number(data[0].boundingbox[1]),\n        Number(data[0].boundingbox[3]),\n      )\n      setZoom(zoom);\n    }\n  }\n\n  return (\n    <div className=\"place-chooser-container\">\n      <div className=\"search-place-form\">\n        <form onSubmit={handleSubmit}>\n          <input name=\"locale\" id=\"locale\" />\n          <Button>Pesquisar</Button>\n        </form>\n      </div>\n      <div className=\"place-chooser-map-container\">\n        <Map\n          coordinates={mapCenter}\n          zoom={zoom}\n          options={{ clickableIcons: false }}\n          onMapClick={e => {\n            setShowInfoWindowId(-1);\n            if (e.latLng && canGuess) {\n              setGuessCoords(e.latLng.toJSON());\n            }\n          }}\n        >\n          <PlaceChooserGuesses\n            showInfoWindowId={showInfoWindowId}\n            guesses={guesses}\n            onGuessClick={setShowInfoWindowId}\n          />\n\n          {guessCoords && (\n            <PlaceChooserMarker\n              placeCoords={placeCoords}\n              showInfoWindow={showInfoWindowId === -1}\n              guessCoords={guessCoords}\n              onShowInfoWindow={show => setShowInfoWindowId(show ? -1 : undefined)}\n              onConfirm={async (marker: google.maps.LatLngLiteral, data: OSMData, distance: number) => {\n                const guess = await onConfirm(marker, data, distance);\n                setShowInfoWindowId(guess.id);\n                setGuessCoords(undefined);\n              }}\n            />\n          )}\n        </Map>\n      </div>\n    </div>\n  )\n}\n\nexport const PlaceChooserModal: React.FC<PlaceChooserModalProps> = ({ show, canGuess, coordinates, guesses, onHide, onConfirm }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <PlaceChooser placeCoords={coordinates} canGuess={canGuess} guesses={guesses} onConfirm={onConfirm} />\n    </Modal>\n  );\n};\n","import React from \"react\";\n\nimport Button from './Button';\nimport Modal from './Modal';\n\ninterface HintsProps {\n  hints: HintEntity[]\n  hintsViewed: GameLevelHintEntity[]\n  show: boolean\n  onHide: () => void\n  onHintView: (hint: HintEntity) => void\n}\n\nconst Hints: React.FC<HintsProps> = ({ hints, hintsViewed, show, onHide, onHintView }) => {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <ul>\n        {hints.map((hint) => {\n          const hintView = hintsViewed.find(h => h.hint_id === hint.id);\n          if (hintView) {\n            return <li key={hint.id}>{hint.description} - Visto aos {hintView.time_elapsed}s</li>;\n          }\n\n          return (\n            <li key={hint.id}>\n              <Button onClick={() => onHintView(hint)}>Mostrar</Button>\n            </li>\n          );\n        })}\n      </ul>\n    </Modal>\n  );\n};\n\nexport default Hints;\n","import React, { useRef, useState } from 'react';\nimport Button from './Button';\nimport Stopwatch from './Stopwatch';\nimport StreetView from './StreetView';\nimport { PlaceChooserModal } from './PlaceChooser';\nimport Hints from './Hints';\n\nconst Level: React.FC<LevelProps> = ({ current, hints, guessLimit, startTime, guesses, hintsViewed, onNext, onGuess, onHintViewed, onTimePassed }) => {\n  const [mapModalOpened, setMapModalOpened] = useState(false);\n  const [hintsModalOpened, setHintsModalOpened] = useState(false);\n  const time = useRef(0); // Not ideal, but :(\n\n  const canGuess = guessLimit === 0 || guesses.length < guessLimit;\n\n  return (\n    <div className=\"game-container full\">\n      <div className=\"game-header\">\n        <div>\n          <Button onClick={() => setMapModalOpened((prev) => !prev)}>\n            Palpitar {guesses.length}/{guessLimit === 0 ? \"∞\" : guessLimit}\n          </Button>\n          <Button onClick={() => setHintsModalOpened((prev) => !prev)}>\n            Dicas {hintsViewed.length}/{hints.length}\n          </Button>\n        </div>\n\n        <div>\n          <Stopwatch\n            key={current.id}\n            start={startTime}\n            onChange={total => time.current = total}\n            onStep={onTimePassed}\n          />\n        </div>\n\n        <div>\n          <Button onClick={() => onNext()}>Pular</Button>\n        </div>\n      </div>\n\n      <div className=\"game-body full-height\">\n        <StreetView\n          markers={[]}\n          guesses={guesses}\n          coordinates={current}\n        />\n      </div>\n\n      <PlaceChooserModal\n        show={mapModalOpened}\n        coordinates={current}\n        canGuess={canGuess}\n        guesses={guesses}\n        onHide={() => setMapModalOpened(false)}\n        onConfirm={(marker, data, distance) => onGuess(marker, data, time.current, distance)}\n      />\n\n      <Hints\n        hints={hints}\n        hintsViewed={hintsViewed}\n        show={hintsModalOpened}\n        onHide={() => setHintsModalOpened(false)}\n        onHintView={(hint: HintEntity) => onHintViewed(hint, time.current)}\n      />\n    </div>\n  );\n};\n\nexport default Level;\n","import { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient('https://ddzlknjoifzrxzclbzop.supabase.co', process.env.REACT_APP_SUPABASE_KEY || '');\n\nexport const GUESSES_TABLE = \"guesses\";\nexport const GAMES_TABLE = \"games\";\nexport const GAME_LEVELS_TABLE = \"game_levels\";\nexport const GAME_LEVEL_HINTS_TABLE = \"game_level_hints\";\nexport const LEVELS_TABLE = \"levels\";\nexport const HINTS_TABLE = \"hints\";\nexport const LEADERBOARD_TABLE = \"leaderboard\";\n\nexport async function fetchOrCreate<T>(table: string, match: Record<string, unknown>, insert: Record<string, unknown>): Promise<T | null> {\n  let response = await supabase\n    .from(table)\n    .select()\n    .match(match);\n\n  if (response.data && response.data[0]) {\n    return response.data[0];\n  }\n\n  response = await supabase\n    .from(table)\n    .insert({...match, ...insert });\n\n  if (response.data && response.data[0]) {\n    return response.data[0];\n  }\n\n  return null;\n}\n\nexport default supabase;","import React, { FormEvent } from \"react\";\nimport supabase from '../supabase';\nimport Button from \"./Button\";\n\nasync function loginOrRegister(email: string) {\n  const authData = { email: email, password: email };\n\n  const response = await supabase.auth.signIn(authData);\n  if (!response.error) {\n    return response;\n  }\n\n  return await supabase.auth.signUp(authData);\n}\n\nconst Login: React.FC<LoginProps> = ({ onAuth }) => {\n  const onSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const userName = (event.target as HTMLFormElement)[\"user\"].value;\n    if (!userName) {\n      alert(\"Informe o nome do jogador\")\n      return;\n    }\n\n    const { user, session, error } = await loginOrRegister(userName + \"@lalalala.com\");\n\n    onAuth({ user, session, error });\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        <label htmlFor=\"user\">Nome do Jogador</label>\n        <input name=\"user\" id=\"user\" defaultValue={window.localStorage.getItem(\"user\") || \"\"} />\n      </div>\n      <div>\n        <Button>Entrar</Button>\n      </div>\n    </form>\n  )\n}\n\nexport default Login;","import React, { useState } from \"react\"\nimport Button from \"./Button\";\nimport useDimensions from \"react-use-dimensions\";\nimport Modal from \"./Modal\";\n\n\ninterface Props {\n  levels: LevelEntity[]\n  bestGuesses: BestGuess[]\n  current: number\n  onLevelClick: (index: number) => void\n}\n\nconst Levels: React.FC<Props & { style?: React.CSSProperties }> = ({ style = {}, bestGuesses, current, levels, onLevelClick }) => {\n  return (\n    <>\n      {levels.map(level => {\n        const bestGuess = bestGuesses.find(g => g.level.id === level.id);\n\n        return (\n          <Button\n            key={level.id}\n            className={`path-content-level full ${current === level.id ? \"current\" : \"\"}`}\n            onClick={() => onLevelClick(level.id)}\n            style={style}\n          >\n            <span className={`level-number ${!bestGuess || !bestGuess.guess ? \"never-tried\" : \"\"}`}>{level.id}</span>\n\n            {bestGuess && bestGuess.guess && (\n              <div className=\"best-guess-path\">\n                <span className=\"best-guess-path-title\">Melhor palpite</span>\n                <span>Distância: {bestGuess.guess.distance.toFixed(2)} km</span>\n                <span>Dicas: {bestGuess.guess.hints_viewed}</span>\n              </div>\n            )}\n          </Button>\n        );\n      })}\n    </>\n  )\n}\n\nconst Path: React.FC<Props> = ({ levels, bestGuesses, current, onLevelClick }) => {\n  const [show, setShow] = useState(false);\n  const [ref, { width }] = useDimensions();\n\n  let divider = 2;\n  if (width > 2500) {\n    divider = 7;\n  } else if (width > 1800) {\n    divider = 6;\n  } else if (width > 1200) {\n    divider = 5;\n  } else if (width > 850) {\n    divider = 4;\n  } else if (width > 600) {\n    divider = 3;\n  }\n\n  return (\n    <div className=\"path-container shown\">\n      <Button onClick={() => setShow(prev => !prev)}>\n        Níveis\n      </Button>\n\n      <Modal show={show} onHide={() => setShow(false)}>\n        <div className=\"levels-container\" ref={ref}>\n          <Levels\n            style={{\n              width: (width || 0) / divider - 20,\n              height: (width || 0) / divider - 20,\n              margin: 10,\n            }}\n            levels={levels}\n            bestGuesses={bestGuesses}\n            current={current}\n            onLevelClick={level => {\n              onLevelClick(level);\n              setShow(false);\n            }}\n          />\n        </div>\n\n        <div>Mais por vir...</div>\n      </Modal>\n    </div>\n  )\n}\n\nexport default Path","import React, { useState, useEffect } from 'react';\n\nimport Level from './Level';\nimport supabase, { fetchOrCreate, GAMES_TABLE, GAME_LEVELS_TABLE, GAME_LEVEL_HINTS_TABLE, GUESSES_TABLE, HINTS_TABLE, LEVELS_TABLE } from '../supabase';\nimport Login from './Login';\nimport { User } from '@supabase/supabase-js';\nimport Path from './Path';\n\nconst Game: React.FC = () => {\n  const [auth, setAuth] = useState<AuthData>();\n\n  const [levels, setLevels] = useState<LevelsData>();\n\n  const fetchLevels = async () => {\n    const { data, error } = await supabase.from(LEVELS_TABLE).select().order(\"id\");\n    setLevels({ data, error });\n  }\n\n  useEffect(() => {\n    if (!levels) fetchLevels()\n  }, [levels]);\n\n  if (!auth) {\n    return (\n      <div className=\"login-container\">\n        <Login onAuth={setAuth} />\n      </div>\n    );\n  }\n\n  if (!levels || !levels.data || !auth || !auth.user || !auth.session) {\n    return (\n      <div className=\"login-container\">\n        <span>\n          Carregando ou erro kkkk\n        </span>\n      </div>\n    )\n  }\n\n  return <InternalGame auth={auth as FulfilledAuthData} levels={levels.data} />\n}\n\nconst InternalGame: React.FC<GameProps> = ({ auth, levels }) => {\n  const [game, setGame] = useState<GameEntity>();\n  const [currentLevel, setCurrentLevel] = useState(levels[0].id);\n  const [bestGuesses, setBestGuesses] = useState<BestGuess[]>();\n\n  const fetchOrCreateGame = async (user: User) => {\n    const game = await fetchOrCreate<GameEntity>(\n      GAMES_TABLE,\n      { user_id: user.id },\n      { guess_limit: 5 },\n    );\n    if (game) {\n      setGame(game);\n    }\n  }\n\n  const fetchBestGuesses = async (game: GameEntity, levels: LevelEntity[]) => {\n    const { data, error } = await supabase\n      .from(GUESSES_TABLE)\n      .select(`*, ${GAME_LEVELS_TABLE}!inner(*, ${LEVELS_TABLE}!inner(*))`)\n      .order(\"distance\")\n      .eq(`${GAME_LEVELS_TABLE}.game_id`, game.id);\n\n    // TODO: get only best guesses per level\n\n    if (data) {\n      setBestGuesses(levels.map(level => ({\n        level,\n        guess: data.find(d => d.game_levels.level_id === level.id)\n      })));\n    }\n  }\n\n  useEffect(() => {\n    if (!game) fetchOrCreateGame(auth.user);\n  }, [game, auth.user])\n\n  useEffect(() => {\n    if (game && levels) fetchBestGuesses(game, levels);\n  }, [game, levels])\n\n  if (!game) {\n    return null;\n  }\n\n  const level = levels.find(l => l.id === currentLevel);\n  if (!level) {\n    return <span>Nenhum nível aqui!</span>;\n  }\n\n  return (\n    <div className=\"full\">\n      <VeryInternalGame\n        key={currentLevel}\n        auth={auth}\n        level={level}\n        game={game}\n        onGuess={() => fetchBestGuesses(game, levels)}\n        onLevelChange={setCurrentLevel}\n      />\n\n      <Path\n        levels={levels}\n        bestGuesses={bestGuesses || []}\n        current={currentLevel}\n        onLevelClick={setCurrentLevel}\n      />\n    </div>\n  );\n}\n\nconst VeryInternalGame: React.FC<{ auth: FulfilledAuthData, level: LevelEntity, game: GameEntity, onGuess: () => void, onLevelChange: (index: number) => void }> = ({ auth, game, level, onGuess, onLevelChange }) => {\n  const [gameLevel, setGameLevel] = useState<GameLevelEntity>();\n  const [guesses, setGuesses] = useState<GuessEntity[]>();\n  const [hints, setHints] = useState<HintEntity[]>();\n  const [hintsViewed, setHintsViewed] = useState<GameLevelHintEntity[]>();\n\n  const fetchOrCreateUserLevel = async (game: GameEntity, level: LevelEntity) => {\n    const gameLevel = await fetchOrCreate<GameLevelEntity>(\n      GAME_LEVELS_TABLE,\n      { game_id: game.id, level_id: level.id },\n      { time_elapsed: 0 },\n    )\n    if (gameLevel) {\n      setGameLevel(gameLevel);\n    }\n  }\n\n  const fetchGuesses = async (gameLevel: GameLevelEntity) => {\n    const { data, error } = await supabase.from(GUESSES_TABLE).select().match({ game_level_id: gameLevel.id });\n\n    if (data) {\n      setGuesses(data);\n    }\n  }\n\n  const fetchHintsViewed = async (gameLevel: GameLevelEntity) => {\n    const { data, error } = await supabase.from(GAME_LEVEL_HINTS_TABLE).select().match({ game_level_id: gameLevel.id });\n\n    if (data) {\n      setHintsViewed(data);\n    }\n  }\n\n  const fetchHints = async (level: LevelEntity) => {\n    const { data, error } = await supabase.from(HINTS_TABLE).select().match({ level_id: level.id });\n\n    if (data) {\n      setHints(data);\n    }\n  }\n\n  useEffect(() => {\n    if (!gameLevel) fetchOrCreateUserLevel(game, level);\n  }, [gameLevel, game, level]);\n\n  useEffect(() => {\n    if (gameLevel) {\n      fetchGuesses(gameLevel);\n      fetchHintsViewed(gameLevel);\n    }\n  }, [gameLevel]);\n\n  useEffect(() => {\n    if (level) fetchHints(level);\n  }, [level]);\n\n  if (!gameLevel) {\n    return null;\n  }\n\n  const handleHintView = async (hint: HintEntity, time: number) => {\n    const { data, error } = await supabase\n      .from(GAME_LEVEL_HINTS_TABLE)\n      .insert({ game_level_id: gameLevel.id, hint_id: hint.id, time_elapsed: time });\n\n    if (data && data[0]) {\n      setHintsViewed(prev => [...(prev || []), data[0]]);\n    }\n  }\n\n  const handleGuess = async (marker: google.maps.LatLngLiteral, osmData: OSMData, time: number, distance: number) => {\n    const { data, error } = await supabase\n      .from(GUESSES_TABLE)\n      .insert({\n        game_level_id: gameLevel.id,\n        distance: distance,\n        lat: marker.lat,\n        lng: marker.lng,\n        time_elapsed: time,\n        data: osmData,\n        hints_viewed: (hintsViewed || []).length\n      });\n\n    if (data && data[0]) {\n      setGuesses(prev => [...(prev || []), data[0]])\n      onGuess();\n      return data[0];\n    }\n\n    return null;\n  }\n\n  const handleTimePass = async (time: number) => {\n    await supabase\n      .from(GAME_LEVELS_TABLE)\n      .update({ time_elapsed: time })\n      .match({ game_id: game.id, level_id: level.id });\n  }\n\n  return (\n    <Level\n      current={level}\n      hints={hints || []}\n      guessLimit={game.guess_limit}\n      startTime={gameLevel.time_elapsed}\n      guesses={guesses || []}\n      hintsViewed={hintsViewed || []}\n      onNext={() => onLevelChange(level.id + 1)}\n      onGuess={handleGuess}\n      onHintViewed={handleHintView}\n      onTimePassed={handleTimePass}\n    />\n  );\n};\n\nexport default Game;\n","// import { PostgrestError } from \"@supabase/supabase-js\";\n// import supabase, { LEADERBOARD_TABLE } from \"../supabase\";\n// import React, { FormEvent, useState } from \"react\";\n// import Button from \"./Button\";\n\n// const Leaderboard: React.FC = () => {\n//   const [data, setData] = useState<LeaderboardData[]>();\n//   const [, setError] = useState<PostgrestError>();\n\n//   const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n//     event.preventDefault();\n\n//     const guessLimit = Number((event.target as HTMLFormElement)[\"guess_limit\"].value || \"0\");\n\n//     const { data, error } = await supabase.from(LEADERBOARD_TABLE).select().eq(\"guess_limit\", guessLimit);\n\n//     if (error) {\n//       setError(error);\n//     }\n//     if (data) {\n//       const userData = data as UserData[];\n\n//       setData(userData.map(ud => ({\n//         user: ud.user,\n//         guesses: ud.data.map(udd => {\n//           const bestGuess = udd.guesses.sort((g1, g2) => g1.distance - g2.distance)?.[0];\n\n//           return {\n//             id: udd.id,\n//             levelId: udd.level_id,\n//             distance: bestGuess ? bestGuess.distance : -1,\n//             hints: bestGuess.hints_viewed,\n//           }\n//         }),\n//       })));\n//     }\n//   }\n\n//   return (\n//     <div style={{background: \"blue\"}}>\n//       <form onSubmit={handleSubmit}>\n//         <label htmlFor=\"guess_limit\">\n//           Número de palpites\n//         </label>\n//         <select name=\"guess_limit\" id=\"guess_limit\" defaultValue={5}>\n//           <option value=\"0\">Ilimitado</option>\n//           <option value=\"1\">1</option>\n//           <option value=\"2\">2</option>\n//           <option value=\"3\">3</option>\n//           <option value=\"4\">4</option>\n//           <option value=\"5\">5</option>\n//           <option value=\"6\">6</option>\n//           <option value=\"7\">7</option>\n//           <option value=\"8\">8</option>\n//           <option value=\"9\">9</option>\n//           <option value=\"10\">10</option>\n//         </select>\n\n//         <Button>Confirm</Button>\n//       </form>\n\n//       <div>\n//         <ul>\n//           {data?.map(d => (\n//             <li key={d.user}>{d.user} {d.guesses.reduce((agg, crr) => agg + crr.distance + crr.hints * 100, 0)}</li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Leaderboard;\n\nexport default function Leaderboard(): null { return null; }","import { useJsApiLoader } from '@react-google-maps/api';\nimport React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport Game from './Game';\nimport Leaderboard from './Leaderboard';\n\nimport Map from './Map';\nimport StreetView from './StreetView';\n\nconst COORDINATES = { lat: -20.3864301, lng: -43.5027689 };\n\nconst App: React.FC = () => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n  });\n\n  if (!isLoaded || loadError) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"full\">\n        <Routes>\n          <Route path=\"/\" element={<Game />} />\n          <Route path=\"/leaderboard\" element={<Leaderboard />} />\n          <Route path=\"/street-view\" element={<StreetView coordinates={COORDINATES} />} />\n          <Route path=\"/map\" element={<Map coordinates={COORDINATES} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactModal from 'react-modal';\n\nimport countries from 'i18n-iso-countries';\nimport brCountries from 'i18n-iso-countries/langs/pt.json';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ncountries.registerLocale(brCountries);\n\nReactModal.setAppElement(\n  document.getElementById('modal-container') || document.body.appendChild(document.createElement('div'))\n);\n\nReactDOM.render(\n  <BrowserRouter basename='/tcc-learning'>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}