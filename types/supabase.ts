/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/game_level": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_level.id"];
          created_at?: parameters["rowFilter.game_level.created_at"];
          game_id?: parameters["rowFilter.game_level.game_id"];
          level_id?: parameters["rowFilter.game_level.level_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["game_level"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** game_level */
          game_level?: definitions["game_level"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_level.id"];
          created_at?: parameters["rowFilter.game_level.created_at"];
          game_id?: parameters["rowFilter.game_level.game_id"];
          level_id?: parameters["rowFilter.game_level.level_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_level.id"];
          created_at?: parameters["rowFilter.game_level.created_at"];
          game_id?: parameters["rowFilter.game_level.game_id"];
          level_id?: parameters["rowFilter.game_level.level_id"];
        };
        body: {
          /** game_level */
          game_level?: definitions["game_level"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/games": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.games.id"];
          created_at?: parameters["rowFilter.games.created_at"];
          user_id?: parameters["rowFilter.games.user_id"];
          guess_limit?: parameters["rowFilter.games.guess_limit"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["games"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** games */
          games?: definitions["games"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.games.id"];
          created_at?: parameters["rowFilter.games.created_at"];
          user_id?: parameters["rowFilter.games.user_id"];
          guess_limit?: parameters["rowFilter.games.guess_limit"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.games.id"];
          created_at?: parameters["rowFilter.games.created_at"];
          user_id?: parameters["rowFilter.games.user_id"];
          guess_limit?: parameters["rowFilter.games.guess_limit"];
        };
        body: {
          /** games */
          games?: definitions["games"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/guess_hints": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guess_hints.id"];
          created_at?: parameters["rowFilter.guess_hints.created_at"];
          guess_id?: parameters["rowFilter.guess_hints.guess_id"];
          hint_id?: parameters["rowFilter.guess_hints.hint_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["guess_hints"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** guess_hints */
          guess_hints?: definitions["guess_hints"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guess_hints.id"];
          created_at?: parameters["rowFilter.guess_hints.created_at"];
          guess_id?: parameters["rowFilter.guess_hints.guess_id"];
          hint_id?: parameters["rowFilter.guess_hints.hint_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guess_hints.id"];
          created_at?: parameters["rowFilter.guess_hints.created_at"];
          guess_id?: parameters["rowFilter.guess_hints.guess_id"];
          hint_id?: parameters["rowFilter.guess_hints.hint_id"];
        };
        body: {
          /** guess_hints */
          guess_hints?: definitions["guess_hints"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/guesses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guesses.id"];
          created_at?: parameters["rowFilter.guesses.created_at"];
          game_level_id?: parameters["rowFilter.guesses.game_level_id"];
          distance?: parameters["rowFilter.guesses.distance"];
          lat?: parameters["rowFilter.guesses.lat"];
          lng?: parameters["rowFilter.guesses.lng"];
          data?: parameters["rowFilter.guesses.data"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["guesses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** guesses */
          guesses?: definitions["guesses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guesses.id"];
          created_at?: parameters["rowFilter.guesses.created_at"];
          game_level_id?: parameters["rowFilter.guesses.game_level_id"];
          distance?: parameters["rowFilter.guesses.distance"];
          lat?: parameters["rowFilter.guesses.lat"];
          lng?: parameters["rowFilter.guesses.lng"];
          data?: parameters["rowFilter.guesses.data"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guesses.id"];
          created_at?: parameters["rowFilter.guesses.created_at"];
          game_level_id?: parameters["rowFilter.guesses.game_level_id"];
          distance?: parameters["rowFilter.guesses.distance"];
          lat?: parameters["rowFilter.guesses.lat"];
          lng?: parameters["rowFilter.guesses.lng"];
          data?: parameters["rowFilter.guesses.data"];
        };
        body: {
          /** guesses */
          guesses?: definitions["guesses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/hints": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.hints.id"];
          created_at?: parameters["rowFilter.hints.created_at"];
          description?: parameters["rowFilter.hints.description"];
          level_id?: parameters["rowFilter.hints.level_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["hints"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** hints */
          hints?: definitions["hints"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.hints.id"];
          created_at?: parameters["rowFilter.hints.created_at"];
          description?: parameters["rowFilter.hints.description"];
          level_id?: parameters["rowFilter.hints.level_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.hints.id"];
          created_at?: parameters["rowFilter.hints.created_at"];
          description?: parameters["rowFilter.hints.description"];
          level_id?: parameters["rowFilter.hints.level_id"];
        };
        body: {
          /** hints */
          hints?: definitions["hints"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/leaderboard": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.leaderboard.id"];
          created_at?: parameters["rowFilter.leaderboard.created_at"];
          user?: parameters["rowFilter.leaderboard.user"];
          score?: parameters["rowFilter.leaderboard.score"];
          guess_limit?: parameters["rowFilter.leaderboard.guess_limit"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["leaderboard"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** leaderboard */
          leaderboard?: definitions["leaderboard"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.leaderboard.id"];
          created_at?: parameters["rowFilter.leaderboard.created_at"];
          user?: parameters["rowFilter.leaderboard.user"];
          score?: parameters["rowFilter.leaderboard.score"];
          guess_limit?: parameters["rowFilter.leaderboard.guess_limit"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.leaderboard.id"];
          created_at?: parameters["rowFilter.leaderboard.created_at"];
          user?: parameters["rowFilter.leaderboard.user"];
          score?: parameters["rowFilter.leaderboard.score"];
          guess_limit?: parameters["rowFilter.leaderboard.guess_limit"];
        };
        body: {
          /** leaderboard */
          leaderboard?: definitions["leaderboard"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/levels": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.levels.id"];
          city?: parameters["rowFilter.levels.city"];
          lat?: parameters["rowFilter.levels.lat"];
          lng?: parameters["rowFilter.levels.lng"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["levels"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** levels */
          levels?: definitions["levels"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.levels.id"];
          city?: parameters["rowFilter.levels.city"];
          lat?: parameters["rowFilter.levels.lat"];
          lng?: parameters["rowFilter.levels.lng"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.levels.id"];
          city?: parameters["rowFilter.levels.city"];
          lat?: parameters["rowFilter.levels.lat"];
          lng?: parameters["rowFilter.levels.lng"];
        };
        body: {
          /** levels */
          levels?: definitions["levels"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  game_level: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `games.id`.<fk table='games' column='id'/>
     */
    game_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `levels.id`.<fk table='levels' column='id'/>
     */
    level_id?: number;
  };
  games: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id?: string;
    /** Format: bigint */
    guess_limit?: number;
  };
  guess_hints: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `guesses.id`.<fk table='guesses' column='id'/>
     */
    guess_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `hints.id`.<fk table='hints' column='id'/>
     */
    hint_id?: number;
  };
  guesses: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `game_level.id`.<fk table='game_level' column='id'/>
     */
    game_level_id: number;
    /** Format: double precision */
    distance?: number;
    /** Format: double precision */
    lat?: number;
    /** Format: double precision */
    lng?: number;
    /** Format: json */
    data?: string;
  };
  hints: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `levels.id`.<fk table='levels' column='id'/>
     */
    level_id?: number;
  };
  leaderboard: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    user: string;
    /** Format: bigint */
    score?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    guess_limit: number;
  };
  levels: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: json */
    city: string;
    /** Format: double precision */
    lat?: number;
    /** Format: double precision */
    lng?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description game_level */
  "body.game_level": definitions["game_level"];
  /** Format: bigint */
  "rowFilter.game_level.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.game_level.created_at": string;
  /** Format: bigint */
  "rowFilter.game_level.game_id": string;
  /** Format: bigint */
  "rowFilter.game_level.level_id": string;
  /** @description games */
  "body.games": definitions["games"];
  /** Format: bigint */
  "rowFilter.games.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.games.created_at": string;
  /** Format: uuid */
  "rowFilter.games.user_id": string;
  /** Format: bigint */
  "rowFilter.games.guess_limit": string;
  /** @description guess_hints */
  "body.guess_hints": definitions["guess_hints"];
  /** Format: bigint */
  "rowFilter.guess_hints.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.guess_hints.created_at": string;
  /** Format: bigint */
  "rowFilter.guess_hints.guess_id": string;
  /** Format: bigint */
  "rowFilter.guess_hints.hint_id": string;
  /** @description guesses */
  "body.guesses": definitions["guesses"];
  /** Format: bigint */
  "rowFilter.guesses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.guesses.created_at": string;
  /** Format: bigint */
  "rowFilter.guesses.game_level_id": string;
  /** Format: double precision */
  "rowFilter.guesses.distance": string;
  /** Format: double precision */
  "rowFilter.guesses.lat": string;
  /** Format: double precision */
  "rowFilter.guesses.lng": string;
  /** Format: json */
  "rowFilter.guesses.data": string;
  /** @description hints */
  "body.hints": definitions["hints"];
  /** Format: bigint */
  "rowFilter.hints.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.hints.created_at": string;
  /** Format: text */
  "rowFilter.hints.description": string;
  /** Format: bigint */
  "rowFilter.hints.level_id": string;
  /** @description leaderboard */
  "body.leaderboard": definitions["leaderboard"];
  /** Format: bigint */
  "rowFilter.leaderboard.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.leaderboard.created_at": string;
  /** Format: text */
  "rowFilter.leaderboard.user": string;
  /** Format: bigint */
  "rowFilter.leaderboard.score": string;
  /** Format: bigint */
  "rowFilter.leaderboard.guess_limit": string;
  /** @description levels */
  "body.levels": definitions["levels"];
  /** Format: bigint */
  "rowFilter.levels.id": string;
  /** Format: json */
  "rowFilter.levels.city": string;
  /** Format: double precision */
  "rowFilter.levels.lat": string;
  /** Format: double precision */
  "rowFilter.levels.lng": string;
}

export interface operations {}

export interface external {}
